2021-10-21 19:29:11,141 [12168] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-10-21 19:29:11,141 [12168] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-10-21 19:29:11,141 [12168] INFO     root:247: [JupyterRequire] Initializing comms.
2021-10-21 19:29:11,147 [12168] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-10-21 19:29:11,148 [12168] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-10-21 19:29:11,148 [12168] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-10-21 19:29:12,013 [12168] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-10-21 19:29:12,013 [12168] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-10-21 19:29:12,013 [12168] INFO     root:247: [JupyterRequire] Initializing comms.
2021-10-21 19:29:12,015 [12168] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-10-21 19:29:12,016 [12168] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-10-21 19:29:12,016 [12168] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-10-21 19:29:26,403 [10148] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-10-21 19:29:26,403 [10148] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-10-21 19:29:26,403 [10148] INFO     root:247: [JupyterRequire] Initializing comms.
2021-10-21 19:29:26,405 [10148] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-10-21 19:29:26,405 [10148] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-10-21 19:29:26,405 [10148] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-10-21 19:29:27,266 [10148] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-10-21 19:29:27,266 [10148] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-10-21 19:29:27,266 [10148] INFO     root:247: [JupyterRequire] Initializing comms.
2021-10-21 19:29:27,269 [10148] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-10-21 19:29:27,270 [10148] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-10-21 19:29:27,271 [10148] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-10-21 19:29:43,169 [12892] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-10-21 19:29:43,169 [12892] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-10-21 19:29:43,169 [12892] INFO     root:247: [JupyterRequire] Initializing comms.
2021-10-21 19:29:43,171 [12892] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-10-21 19:29:43,171 [12892] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-10-21 19:29:43,171 [12892] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-10-21 19:29:43,705 [12892] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-10-21 19:29:43,705 [12892] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-10-21 19:29:43,705 [12892] INFO     root:247: [JupyterRequire] Initializing comms.
2021-10-21 19:29:43,707 [12892] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-10-21 19:29:43,707 [12892] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-10-21 19:29:43,707 [12892] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-10-21 19:29:50,098 [1796] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-10-21 19:29:50,098 [1796] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-10-21 19:29:50,098 [1796] INFO     root:247: [JupyterRequire] Initializing comms.
2021-10-21 19:29:50,100 [1796] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-10-21 19:29:50,100 [1796] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-10-21 19:29:50,101 [1796] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-10-21 19:29:50,628 [1796] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-10-21 19:29:50,628 [1796] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-10-21 19:29:50,628 [1796] INFO     root:247: [JupyterRequire] Initializing comms.
2021-10-21 19:29:50,630 [1796] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-10-21 19:29:50,630 [1796] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-10-21 19:29:50,630 [1796] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-10-21 19:31:22,139 [12892] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2021-10-21 19:31:22,140 [12892] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2021-10-21 19:31:22,146 [12892] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=C:\Users\sasha\.matplotlib
2021-10-21 19:31:22,148 [12892] DEBUG    matplotlib:1471: [JupyterRequire] matplotlib version 3.3.2
2021-10-21 19:31:22,148 [12892] DEBUG    matplotlib:1472: [JupyterRequire] interactive is False
2021-10-21 19:31:22,149 [12892] DEBUG    matplotlib:1473: [JupyterRequire] platform is win32
2021-10-21 19:31:22,149 [12892] DEBUG    matplotlib:1474: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1251', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'pprint', 'locale', 'gettext', 'argparse', 'ipython_genutils._version', 'ipython_genutils', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', '_struct', 'struct', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_21', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'ipython_genutils.importstring', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'configparser', 'isort.stdlibs.py27', 'isort.stdlibs.py2', 'isort.stdlibs.py35', 'isort.stdlibs.py36', 'isort.stdlibs.py37', 'isort.stdlibs.py38', 'isort.stdlibs.py39', 'isort.stdlibs.py3', 'isort.stdlibs.all', 'isort.stdlibs', 'dataclasses', 'isort._future', 'isort._vendored', 'isort._vendored.toml.tz', 'isort._vendored.toml.decoder', 'isort._vendored.toml.encoder', 'isort._vendored.toml', 'isort.profiles', 'isort.exceptions', 'isort.sections', 'isort.comments', 'isort.wrap_modes', 'isort.settings', 'isort._version', 'isort.literal', 'isort.format', 'isort.utils', 'isort.place', 'isort.deprecated', 'isort.deprecated.finders', 'isort.parse', 'isort.sorting', 'isort.wrap', 'isort.output', 'isort.core', 'isort.io', 'isort.api', 'isort', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'matplotlib', 'gzip', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-10-21 19:31:22,248 [12892] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=C:\Users\sasha\.matplotlib
2021-10-21 19:31:22,338 [12892] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from C:\Users\sasha\.matplotlib\fontlist-v330.json
2021-10-21 19:31:22,693 [12892] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-10-21 19:31:22,703 [12892] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-10-21 19:31:43,551 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:31:43,552 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 1
2021-10-21 19:31:43,552 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:3] new[1:1]
2021-10-21 19:31:43,552 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 19:31:43,553 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:31:44,173 [12892] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2021-10-21 19:31:44,331 [12892] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2021-10-21 19:33:38,586 [10148] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2021-10-21 19:33:38,623 [10148] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2021-10-21 19:34:45,168 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:34:45,169 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-10-21 19:34:45,169 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-10-21 19:34:45,170 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 19:34:45,171 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:34:45,843 [12892] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\typing.py
2021-10-21 19:34:46,046 [12892] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2021-10-21 19:36:31,262 [1796] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2021-10-21 19:36:33,182 [1796] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2021-10-21 19:36:33,182 [1796] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2021-10-21 19:36:33,186 [1796] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=C:\Users\sasha\.matplotlib
2021-10-21 19:36:33,188 [1796] DEBUG    matplotlib:1471: [JupyterRequire] matplotlib version 3.3.2
2021-10-21 19:36:33,188 [1796] DEBUG    matplotlib:1472: [JupyterRequire] interactive is False
2021-10-21 19:36:33,189 [1796] DEBUG    matplotlib:1473: [JupyterRequire] platform is win32
2021-10-21 19:36:33,189 [1796] DEBUG    matplotlib:1474: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1251', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'pprint', 'locale', 'gettext', 'argparse', 'ipython_genutils._version', 'ipython_genutils', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', '_struct', 'struct', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_21', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'ipython_genutils.importstring', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'configparser', 'isort.stdlibs.py27', 'isort.stdlibs.py2', 'isort.stdlibs.py35', 'isort.stdlibs.py36', 'isort.stdlibs.py37', 'isort.stdlibs.py38', 'isort.stdlibs.py39', 'isort.stdlibs.py3', 'isort.stdlibs.all', 'isort.stdlibs', 'dataclasses', 'isort._future', 'isort._vendored', 'isort._vendored.toml.tz', 'isort._vendored.toml.decoder', 'isort._vendored.toml.encoder', 'isort._vendored.toml', 'isort.profiles', 'isort.exceptions', 'isort.sections', 'isort.comments', 'isort.wrap_modes', 'isort.settings', 'isort._version', 'isort.literal', 'isort.format', 'isort.utils', 'isort.place', 'isort.deprecated', 'isort.deprecated.finders', 'isort.parse', 'isort.sorting', 'isort.wrap', 'isort.output', 'isort.core', 'isort.io', 'isort.api', 'isort', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'gzip', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._continuous_distns', 'scipy.stats._discrete_distns', 'scipy.stats.distributions', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._multivariate', 'scipy.stats', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-10-21 19:36:33,224 [1796] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=C:\Users\sasha\.matplotlib
2021-10-21 19:36:33,228 [1796] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from C:\Users\sasha\.matplotlib\fontlist-v330.json
2021-10-21 19:36:33,365 [1796] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-10-21 19:36:33,369 [1796] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-10-21 19:36:33,622 [1796] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-10-21 19:36:52,616 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:36:52,616 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2021-10-21 19:36:52,616 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2021-10-21 19:36:52,617 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 1 in part parser)
2021-10-21 19:36:52,617 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 2 (to 1 in part parser)
2021-10-21 19:36:52,617 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:37:44,041 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:37:44,041 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2021-10-21 19:37:44,042 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2021-10-21 19:37:44,042 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2021-10-21 19:37:44,042 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2021-10-21 19:37:44,042 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:38:03,271 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:38:03,271 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 9
2021-10-21 19:38:03,272 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:9]
2021-10-21 19:38:03,272 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 9 (to 8 in part parser)
2021-10-21 19:38:03,273 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:38:18,418 [1796] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-10-21 19:38:23,886 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:38:23,886 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 9; new: 3
2021-10-21 19:38:23,886 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2021-10-21 19:38:23,887 [12892] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2021-10-21 19:38:23,888 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 3 (to 2 in part parser)
2021-10-21 19:38:23,888 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:9] new[3:3]
2021-10-21 19:38:23,889 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:38:31,822 [12892] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-10-21 19:38:31,822 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,822 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,822 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,822 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,822 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,822 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,822 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,822 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,822 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,822 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,838 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,853 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,869 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 19:38:31,885 [12892] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-10-21 19:38:42,488 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:38:42,488 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 1
2021-10-21 19:38:42,489 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:3] new[1:1]
2021-10-21 19:38:42,490 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 19:38:42,490 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:38:45,352 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:38:45,353 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-10-21 19:38:45,353 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-10-21 19:38:45,353 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 19:38:45,354 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:38:49,637 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:38:49,637 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-10-21 19:38:49,637 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-10-21 19:38:49,638 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 19:38:49,638 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:38:52,625 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:38:52,626 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2021-10-21 19:38:52,626 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2021-10-21 19:38:52,627 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2021-10-21 19:38:52,627 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:38:53,835 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:38:53,835 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2021-10-21 19:38:53,836 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2021-10-21 19:38:53,836 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 0 in part parser)
2021-10-21 19:38:53,836 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:39:44,540 [1796] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:39:44,540 [1796] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 5
2021-10-21 19:39:44,540 [1796] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:3] new[1:5]
2021-10-21 19:39:44,542 [1796] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 6 (to 4 in part parser)
2021-10-21 19:39:44,542 [1796] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:39:44,617 [1796] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2021-10-21 19:40:29,421 [1796] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:40:29,422 [1796] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 1
2021-10-21 19:40:29,422 [1796] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:5] new[1:1]
2021-10-21 19:40:29,423 [1796] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 19:40:29,423 [1796] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:40:40,086 [1796] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-10-21 19:40:40,086 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,091 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,096 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,101 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,106 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,116 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,116 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,116 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 19:40:40,116 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,117 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,117 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:40:40,117 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,117 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 19:40:40,117 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:40:40,117 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 19:40:40,117 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,118 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,118 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,118 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,118 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,118 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,118 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 19:40:40,118 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 19:40:40,118 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,119 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,119 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,119 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,119 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 19:40:40,119 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 19:40:40,119 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 19:40:40,120 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,120 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,120 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,120 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,120 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,121 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,126 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,136 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 19:40:40,147 [1796] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-10-21 19:40:43,502 [1796] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:40:43,503 [1796] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-10-21 19:40:43,503 [1796] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-10-21 19:40:43,503 [1796] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 0 in part parser)
2021-10-21 19:40:43,504 [1796] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:40:43,544 [1796] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2021-10-21 19:40:43,590 [1796] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\typing.py
2021-10-21 19:40:43,597 [1796] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2021-10-21 19:42:01,157 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:42:01,157 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-10-21 19:42:01,157 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-10-21 19:42:01,158 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 19:42:01,158 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:42:55,401 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:42:55,401 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-10-21 19:42:55,401 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-10-21 19:42:55,402 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 19:42:55,402 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 19:58:19,859 [1796] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 19:58:19,859 [1796] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-10-21 19:58:19,860 [1796] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-10-21 19:58:19,860 [1796] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 19:58:19,860 [1796] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 20:11:39,235 [12168] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2021-10-21 20:11:40,237 [12168] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2021-10-21 20:11:40,237 [12168] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2021-10-21 20:11:40,250 [12168] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=C:\Users\sasha\.matplotlib
2021-10-21 20:11:40,261 [12168] DEBUG    matplotlib:1471: [JupyterRequire] matplotlib version 3.3.2
2021-10-21 20:11:40,262 [12168] DEBUG    matplotlib:1472: [JupyterRequire] interactive is False
2021-10-21 20:11:40,264 [12168] DEBUG    matplotlib:1473: [JupyterRequire] platform is win32
2021-10-21 20:11:40,265 [12168] DEBUG    matplotlib:1474: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1251', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'pprint', 'locale', 'gettext', 'argparse', 'ipython_genutils._version', 'ipython_genutils', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', '_struct', 'struct', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_21', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'ipython_genutils.importstring', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'configparser', 'isort.stdlibs.py27', 'isort.stdlibs.py2', 'isort.stdlibs.py35', 'isort.stdlibs.py36', 'isort.stdlibs.py37', 'isort.stdlibs.py38', 'isort.stdlibs.py39', 'isort.stdlibs.py3', 'isort.stdlibs.all', 'isort.stdlibs', 'dataclasses', 'isort._future', 'isort._vendored', 'isort._vendored.toml.tz', 'isort._vendored.toml.decoder', 'isort._vendored.toml.encoder', 'isort._vendored.toml', 'isort.profiles', 'isort.exceptions', 'isort.sections', 'isort.comments', 'isort.wrap_modes', 'isort.settings', 'isort._version', 'isort.literal', 'isort.format', 'isort.utils', 'isort.place', 'isort.deprecated', 'isort.deprecated.finders', 'isort.parse', 'isort.sorting', 'isort.wrap', 'isort.output', 'isort.core', 'isort.io', 'isort.api', 'isort', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'gzip', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-10-21 20:11:40,348 [12168] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=C:\Users\sasha\.matplotlib
2021-10-21 20:11:40,352 [12168] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from C:\Users\sasha\.matplotlib\fontlist-v330.json
2021-10-21 20:11:40,696 [12168] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-10-21 20:11:40,700 [12168] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-10-21 20:11:44,081 [12168] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-10-21 20:11:44,200 [12168] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0.
2021-10-21 20:11:44,202 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,202 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,202 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,202 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,203 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,203 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,203 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,203 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,203 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,203 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,203 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,204 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,204 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,204 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:11:44,204 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,204 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,204 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,204 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,205 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,205 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,205 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,205 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,205 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:11:44,205 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,205 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,206 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,206 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,206 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,206 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,207 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:11:44,207 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:11:44,207 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,207 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,208 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,208 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,208 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:11:44,209 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,209 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:11:44,209 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,210 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,210 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 20:11:44,210 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,210 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,210 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,211 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,211 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 20:11:44,211 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,211 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,211 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 20:11:44,211 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,212 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,212 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,212 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,212 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,212 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 20:11:44,212 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,212 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:11:44,213 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,213 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,213 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,213 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,213 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,213 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,213 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,214 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 20:11:44,214 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,214 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:11:44,214 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,214 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,214 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,215 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,215 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 20:11:44,215 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,215 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,215 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,215 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,215 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,216 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,216 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,216 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,216 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,216 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,216 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,216 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,217 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,217 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,217 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,217 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,217 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,217 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,217 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,217 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,218 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,218 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:11:44,218 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,218 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,218 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,218 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,218 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,219 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,219 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,219 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,219 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,219 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 20:11:44,219 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,219 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 20:11:44,220 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,220 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,220 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,220 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,220 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:11:44,220 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,220 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:11:44,221 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,221 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:11:44,221 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,221 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 20:11:44,221 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,221 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,221 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,221 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,222 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:11:44,222 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,222 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,222 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 20:11:44,222 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,222 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,222 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,223 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 20:11:44,223 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,223 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,223 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 20:11:44,223 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:11:44,223 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,224 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:11:44,224 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,224 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,224 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,224 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,224 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:11:44,224 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,225 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 20:11:44,225 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,225 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 20:11:44,225 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,226 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,226 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,227 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,227 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 20:11:44,227 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,227 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,228 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,228 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,228 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 20:11:44,228 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,229 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,229 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,229 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,229 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,229 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,229 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,230 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 20:11:44,230 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,230 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,230 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,230 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,230 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,231 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 20:11:44,231 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,231 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,231 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,231 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,231 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 20:11:44,231 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,232 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 20:11:44,232 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,232 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,232 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,232 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,232 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,232 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,233 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:11:44,233 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 20:11:44,233 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,233 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,233 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,233 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,234 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:11:44,234 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:11:44,234 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 20:11:44,234 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,234 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,234 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,234 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,234 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,235 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,235 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,235 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,235 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:11:44,235 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,235 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:11:44,235 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,236 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,236 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,236 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,236 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,236 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:11:44,236 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,236 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,237 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,237 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 20:11:44,237 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,237 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,237 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:11:44,237 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,237 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,238 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,238 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,238 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,238 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,238 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,238 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:11:44,239 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,239 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 20:11:44,239 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,239 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 20:11:44,239 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,239 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,240 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,240 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:11:44,240 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 20:11:44,240 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,241 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,241 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,241 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,241 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,242 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,242 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,242 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 20:11:44,242 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 20:11:44,242 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 20:11:44,243 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:11:44,243 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,243 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,243 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,243 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,243 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,244 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 20:11:44,244 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,244 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,244 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,244 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,244 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,244 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,245 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,245 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,245 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,245 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 20:11:44,245 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 20:11:44,245 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,245 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,246 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:11:44,246 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,246 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 20:11:44,246 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,246 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,246 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 20:11:44,246 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,247 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,247 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,247 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,247 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 20:11:44,247 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,247 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,247 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 20:11:44,247 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,248 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,248 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,248 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,248 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,248 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,248 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,248 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,249 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,249 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,249 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,249 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,249 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,249 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,249 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,250 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,250 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,250 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,250 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,250 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,250 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 20:11:44,250 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:11:44,251 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,251 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,251 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,251 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,251 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:11:44,251 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,251 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,252 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,252 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,252 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,252 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:11:44,252 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,252 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,252 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,252 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 20:11:44,253 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,253 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,253 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 20:11:44,253 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,253 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,253 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 20:11:44,254 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,254 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,254 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,254 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,254 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,255 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,255 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,255 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:11:44,256 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,256 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,256 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,256 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,257 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,257 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,257 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,257 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,257 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,258 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,258 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,258 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,259 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,260 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,260 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 20:11:44,261 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,262 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,262 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,263 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 20:11:44,263 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,263 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,263 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 20:11:44,263 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,264 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 20:11:44,264 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,264 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,264 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-10-21 20:11:44,264 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 20:11:44,264 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,264 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,265 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,265 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,265 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,265 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,265 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,265 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,265 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:11:44,266 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,266 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,266 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,266 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,266 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,266 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 20:11:44,266 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,267 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,267 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,267 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,267 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 20:11:44,267 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,267 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,267 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,268 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,268 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,268 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:11:44,268 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:11:44,268 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,268 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,268 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,269 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,269 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,269 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,269 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,269 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,269 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,269 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,270 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 20:11:44,270 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 20:11:44,270 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,270 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 20:11:44,270 [12168] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-10-21 20:11:44,275 [12168] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-10-21 20:11:44,275 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,275 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,275 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,275 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,276 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,276 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,276 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,276 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,276 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,276 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,276 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,277 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,277 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,277 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:11:44,277 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,277 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,277 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,277 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,278 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,278 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,278 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,278 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,278 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:11:44,278 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,279 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,279 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,279 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,279 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,279 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,279 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:11:44,279 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:11:44,280 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,280 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,280 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,280 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,280 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:11:44,280 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,280 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:11:44,281 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,281 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,281 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 20:11:44,281 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,281 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,282 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,282 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,282 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 20:11:44,282 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,282 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,282 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 20:11:44,283 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,283 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,283 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,283 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,284 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,284 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 20:11:44,284 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,284 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:11:44,285 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,285 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,285 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,285 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,285 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,285 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,286 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,286 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 20:11:44,286 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,286 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:11:44,287 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,287 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,287 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,287 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,287 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 20:11:44,288 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,288 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,288 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,288 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,288 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,289 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,289 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,289 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,289 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,289 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,289 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,290 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,290 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,290 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,290 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,290 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,290 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,290 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,290 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,290 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,292 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,292 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:11:44,292 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,293 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,293 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,294 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,295 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,295 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,295 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,295 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,295 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,296 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 20:11:44,296 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,296 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 20:11:44,296 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,296 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,296 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,297 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,297 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:11:44,297 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,297 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:11:44,297 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,297 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:11:44,297 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,298 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 20:11:44,298 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,298 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,298 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,298 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,298 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:11:44,299 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,299 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,299 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 20:11:44,299 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,299 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,299 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,300 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 20:11:44,300 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,300 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,300 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 20:11:44,300 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:11:44,300 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,300 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:11:44,301 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,301 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,301 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,301 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,301 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:11:44,301 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,301 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 20:11:44,302 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,302 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 20:11:44,302 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,302 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,302 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,302 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,303 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 20:11:44,303 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,303 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,303 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,303 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,303 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 20:11:44,303 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,304 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,304 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,304 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,304 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,304 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,304 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,304 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 20:11:44,305 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,305 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,305 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,305 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,305 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,305 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 20:11:44,305 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,306 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,306 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,306 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,306 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 20:11:44,306 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,306 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 20:11:44,307 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,307 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,307 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,307 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,307 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,307 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,308 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:11:44,308 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 20:11:44,308 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,308 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,308 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,308 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,309 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:11:44,309 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:11:44,309 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 20:11:44,309 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,309 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,309 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,309 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,310 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,310 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,310 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,310 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,310 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:11:44,310 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,311 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:11:44,311 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,311 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,311 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,311 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,311 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,311 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:11:44,312 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,312 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,312 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,312 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 20:11:44,312 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,312 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,313 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:11:44,313 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,313 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,313 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,313 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,313 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,313 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,314 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,314 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:11:44,314 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,314 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 20:11:44,315 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,315 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 20:11:44,315 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,316 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,316 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,316 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:11:44,316 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 20:11:44,316 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,317 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,317 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,317 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,317 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,318 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,318 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,318 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 20:11:44,318 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 20:11:44,318 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 20:11:44,319 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:11:44,319 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,319 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,319 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,320 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,320 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,320 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 20:11:44,320 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,320 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,320 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,320 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,321 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,321 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,321 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,321 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,322 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,322 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 20:11:44,322 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 20:11:44,322 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,323 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,323 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:11:44,323 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,323 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 20:11:44,323 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,324 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,324 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 20:11:44,324 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,324 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,325 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,325 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,326 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 20:11:44,326 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,327 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,327 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 20:11:44,328 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,328 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,328 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,328 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,328 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,328 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,329 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,329 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,329 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,329 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,329 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,329 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,330 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,330 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,330 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,330 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,330 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,330 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,331 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,331 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,331 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 20:11:44,331 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:11:44,331 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,331 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,332 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,332 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,332 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:11:44,332 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,332 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,332 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,333 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,333 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,333 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:11:44,333 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,333 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,333 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,333 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 20:11:44,334 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,334 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,334 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 20:11:44,334 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,334 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,334 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 20:11:44,334 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,335 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,335 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,335 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,335 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,335 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,335 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,335 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:11:44,336 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,336 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,336 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,336 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,336 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,336 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:11:44,336 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,337 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,337 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,337 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,337 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,337 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,337 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,337 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,338 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 20:11:44,338 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,338 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,338 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,338 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 20:11:44,338 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,338 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,339 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 20:11:44,339 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,339 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 20:11:44,339 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,339 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,339 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-10-21 20:11:44,340 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 20:11:44,340 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,340 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,340 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,340 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,340 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,341 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,341 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,341 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,341 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:11:44,342 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,342 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,342 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,342 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,342 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:11:44,343 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 20:11:44,343 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,343 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,343 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,343 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,343 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 20:11:44,344 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,344 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,344 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,344 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,344 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,344 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:11:44,344 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:11:44,345 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,345 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,345 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,345 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,345 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,345 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:11:44,346 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,346 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,346 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:11:44,346 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,346 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 20:11:44,346 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 20:11:44,346 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:11:44,347 [12168] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 20:11:44,347 [12168] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-10-21 20:22:05,009 [10148] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2021-10-21 20:22:05,010 [10148] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2021-10-21 20:22:05,015 [10148] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=C:\Users\sasha\.matplotlib
2021-10-21 20:22:05,018 [10148] DEBUG    matplotlib:1471: [JupyterRequire] matplotlib version 3.3.2
2021-10-21 20:22:05,018 [10148] DEBUG    matplotlib:1472: [JupyterRequire] interactive is False
2021-10-21 20:22:05,018 [10148] DEBUG    matplotlib:1473: [JupyterRequire] platform is win32
2021-10-21 20:22:05,044 [10148] DEBUG    matplotlib:1474: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1251', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'pprint', 'locale', 'gettext', 'argparse', 'ipython_genutils._version', 'ipython_genutils', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', '_struct', 'struct', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_21', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'ipython_genutils.importstring', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'configparser', 'isort.stdlibs.py27', 'isort.stdlibs.py2', 'isort.stdlibs.py35', 'isort.stdlibs.py36', 'isort.stdlibs.py37', 'isort.stdlibs.py38', 'isort.stdlibs.py39', 'isort.stdlibs.py3', 'isort.stdlibs.all', 'isort.stdlibs', 'dataclasses', 'isort._future', 'isort._vendored', 'isort._vendored.toml.tz', 'isort._vendored.toml.decoder', 'isort._vendored.toml.encoder', 'isort._vendored.toml', 'isort.profiles', 'isort.exceptions', 'isort.sections', 'isort.comments', 'isort.wrap_modes', 'isort.settings', 'isort._version', 'isort.literal', 'isort.format', 'isort.utils', 'isort.place', 'isort.deprecated', 'isort.deprecated.finders', 'isort.parse', 'isort.sorting', 'isort.wrap', 'isort.output', 'isort.core', 'isort.io', 'isort.api', 'isort', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'jedi.inference.finder', 'jedi.inference.star_args', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'matplotlib', 'gzip', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2021-10-21 20:22:05,473 [10148] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=C:\Users\sasha\.matplotlib
2021-10-21 20:22:05,477 [10148] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from C:\Users\sasha\.matplotlib\fontlist-v330.json
2021-10-21 20:22:05,658 [10148] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-10-21 20:22:05,662 [10148] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-10-21 20:22:06,426 [10148] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2021-10-21 20:22:11,651 [10148] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2021-10-21 20:22:11,651 [10148] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2021-10-21 20:22:11,651 [10148] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2021-10-21 20:22:11,651 [10148] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2021-10-21 20:23:08,275 [10148] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2021-10-21 20:23:08,276 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,276 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,276 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,276 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,277 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,277 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,277 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,278 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,279 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,280 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,280 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,282 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,283 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,283 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:23:08,284 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,284 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,284 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,284 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,284 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,285 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,285 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,285 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,285 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:23:08,285 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,286 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,286 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,286 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,286 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,286 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,286 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:23:08,287 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:23:08,287 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,287 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,287 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,287 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,288 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:23:08,288 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,288 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:23:08,288 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,289 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,289 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 20:23:08,289 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,289 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,289 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,290 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,290 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 20:23:08,290 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:23:08,290 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,290 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 20:23:08,290 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,290 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,291 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,291 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,291 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,291 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 20:23:08,291 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,291 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:23:08,292 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,292 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,292 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,292 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,292 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,292 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,292 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,293 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 20:23:08,293 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,293 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:23:08,293 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,294 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,294 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,295 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,295 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 20:23:08,296 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,296 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,296 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,296 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,296 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,297 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,297 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,297 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,297 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,298 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,298 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,298 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,298 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,298 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,299 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,299 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,299 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,299 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,299 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,300 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,300 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,300 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:23:08,300 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,300 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,300 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,300 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,301 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,301 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,301 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,301 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,301 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,301 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 20:23:08,301 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,302 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 20:23:08,302 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,302 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,302 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,302 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,302 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:23:08,302 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,303 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:23:08,303 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,303 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:23:08,303 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,303 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 20:23:08,303 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,303 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,304 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,304 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,304 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:23:08,304 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,304 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,304 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 20:23:08,304 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,304 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,305 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,305 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 20:23:08,305 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,305 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,305 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 20:23:08,305 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:23:08,305 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,306 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:23:08,306 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,306 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,306 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,306 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,306 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:23:08,306 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,307 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 20:23:08,307 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,307 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 20:23:08,307 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,307 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,307 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,307 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,308 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 20:23:08,308 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,308 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,308 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,308 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:23:08,308 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 20:23:08,308 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,309 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,309 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,309 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,309 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,309 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,309 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,309 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 20:23:08,310 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,310 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,310 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,311 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,311 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,312 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 20:23:08,313 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,314 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,314 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:23:08,315 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,316 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 20:23:08,316 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:23:08,317 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 20:23:08,317 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,317 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,317 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,317 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,318 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,318 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,318 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:23:08,318 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 20:23:08,318 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,318 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,318 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,319 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,319 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:23:08,319 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:23:08,319 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 20:23:08,319 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,320 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,320 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,320 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,320 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,320 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,320 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,321 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,321 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:23:08,322 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,322 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:23:08,323 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,323 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,323 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,323 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,323 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,324 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:23:08,324 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,324 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,324 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,324 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 20:23:08,325 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,325 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,325 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:23:08,325 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:23:08,326 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,326 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,326 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,326 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,326 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,327 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,327 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:23:08,327 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,327 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 20:23:08,327 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,328 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 20:23:08,328 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,328 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,328 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,328 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:23:08,328 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 20:23:08,329 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,329 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,329 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,329 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 20:23:08,329 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,329 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,330 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,330 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 20:23:08,330 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 20:23:08,330 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 20:23:08,330 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:23:08,330 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,330 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,331 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,331 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,331 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,331 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 20:23:08,331 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,331 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,331 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,332 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,332 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,332 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,332 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,332 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,332 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,332 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 20:23:08,333 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 20:23:08,333 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,333 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,333 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:23:08,333 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,333 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 20:23:08,333 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,334 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,334 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 20:23:08,334 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,334 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,334 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,334 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,334 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 20:23:08,334 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,335 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,335 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 20:23:08,335 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,335 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,335 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,335 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,335 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,336 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,336 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,336 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,336 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,336 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:23:08,336 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,336 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,337 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,337 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,337 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,337 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,337 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,337 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,337 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,338 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,338 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 20:23:08,338 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:23:08,338 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,338 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,338 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,338 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,338 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:23:08,339 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,339 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,339 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,339 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,339 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,339 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:23:08,339 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,340 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,340 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,340 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 20:23:08,340 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,340 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:23:08,340 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 20:23:08,340 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,341 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,341 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 20:23:08,341 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,341 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,341 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,341 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,342 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,342 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,342 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,342 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:23:08,342 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,342 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,342 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,343 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,343 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 20:23:08,343 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:23:08,343 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,343 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,343 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,344 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,344 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,344 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,344 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,344 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,344 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 20:23:08,345 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,345 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,345 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,345 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 20:23:08,345 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,345 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,345 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 20:23:08,346 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,346 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 20:23:08,346 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,346 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,346 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-10-21 20:23:08,346 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 20:23:08,346 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,347 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,347 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,347 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,347 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,347 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,347 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,347 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,348 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:23:08,348 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,348 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,348 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,348 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,348 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:23:08,348 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 20:23:08,349 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,349 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,349 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,349 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,349 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 20:23:08,349 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,349 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,350 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,350 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,350 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,350 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:23:08,350 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:23:08,350 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,350 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,351 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,351 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,351 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,351 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:23:08,351 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,351 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,351 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:23:08,352 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,352 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 20:23:08,352 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 20:23:08,352 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:23:08,352 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 20:23:08,352 [10148] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-10-21 20:30:22,731 [10148] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 20:30:22,732 [10148] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 2
2021-10-21 20:30:22,733 [10148] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:2]
2021-10-21 20:30:22,751 [10148] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 2 (to 1 in part parser)
2021-10-21 20:30:22,751 [10148] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 20:30:28,968 [10148] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 20:30:28,968 [10148] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 2
2021-10-21 20:30:28,968 [10148] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:1] new[1:1]
2021-10-21 20:30:28,969 [10148] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2021-10-21 20:30:28,969 [10148] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[2:2] new[2:2]
2021-10-21 20:30:28,969 [10148] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 3 (to 1 in part parser)
2021-10-21 20:30:28,970 [10148] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 20:30:47,502 [10148] DEBUG    numba.core.byteflow:74: [JupyterRequire] bytecode dump:
>          0	NOP(arg=None, lineno=81)
           2	LOAD_GLOBAL(arg=0, lineno=81)
           4	LOAD_FAST(arg=0, lineno=81)
           6	LOAD_FAST(arg=1, lineno=81)
           8	LOAD_FAST(arg=2, lineno=81)
          10	CALL_FUNCTION(arg=3, lineno=81)
          12	STORE_FAST(arg=3, lineno=81)
          14	LOAD_GLOBAL(arg=1, lineno=82)
          16	LOAD_METHOD(arg=2, lineno=82)
          18	LOAD_FAST(arg=3, lineno=82)
          20	LOAD_CONST(arg=1, lineno=82)
          22	BINARY_SUBSCR(arg=None, lineno=82)
          24	CALL_METHOD(arg=1, lineno=82)
          26	RETURN_VALUE(arg=None, lineno=82)
2021-10-21 20:30:47,502 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=0 nstack_initial=0)])
2021-10-21 20:30:47,503 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:47,503 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=0, inst=NOP(arg=None, lineno=81)
2021-10-21 20:30:47,503 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:47,504 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=81)
2021-10-21 20:30:47,504 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:47,504 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=81)
2021-10-21 20:30:47,504 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$2load_global.0']
2021-10-21 20:30:47,504 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=81)
2021-10-21 20:30:47,504 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$2load_global.0', '$s14.1']
2021-10-21 20:30:47,505 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=81)
2021-10-21 20:30:47,505 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$2load_global.0', '$s14.1', '$s26.2']
2021-10-21 20:30:47,505 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=81)
2021-10-21 20:30:47,505 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$2load_global.0', '$s14.1', '$s26.2', '$mask8.3']
2021-10-21 20:30:47,505 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=12, inst=STORE_FAST(arg=3, lineno=81)
2021-10-21 20:30:47,505 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$10call_function.4']
2021-10-21 20:30:47,505 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=82)
2021-10-21 20:30:47,506 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:47,506 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=16, inst=LOAD_METHOD(arg=2, lineno=82)
2021-10-21 20:30:47,506 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$14load_global.5']
2021-10-21 20:30:47,506 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=82)
2021-10-21 20:30:47,506 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16load_method.6']
2021-10-21 20:30:47,506 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=20, inst=LOAD_CONST(arg=1, lineno=82)
2021-10-21 20:30:47,507 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16load_method.6', '$cum_sum18.7']
2021-10-21 20:30:47,507 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=82)
2021-10-21 20:30:47,507 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16load_method.6', '$cum_sum18.7', '$const20.8']
2021-10-21 20:30:47,507 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=82)
2021-10-21 20:30:47,507 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16load_method.6', '$22binary_subscr.9']
2021-10-21 20:30:47,507 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=82)
2021-10-21 20:30:47,508 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24call_method.10']
2021-10-21 20:30:47,508 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2021-10-21 20:30:47,508 [10148] DEBUG    numba.core.byteflow:163: [JupyterRequire] -------------------------Prune PHIs-------------------------
2021-10-21 20:30:47,508 [10148] DEBUG    numba.core.byteflow:232: [JupyterRequire] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2021-10-21 20:30:47,508 [10148] DEBUG    numba.core.byteflow:189: [JupyterRequire] defmap: {}
2021-10-21 20:30:47,509 [10148] DEBUG    numba.core.byteflow:190: [JupyterRequire] phismap: defaultdict(<class 'set'>, {})
2021-10-21 20:30:47,509 [10148] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>, {})
2021-10-21 20:30:47,509 [10148] DEBUG    numba.core.byteflow:220: [JupyterRequire] keep phismap: {}
2021-10-21 20:30:47,509 [10148] DEBUG    numba.core.byteflow:226: [JupyterRequire] new_out: defaultdict(<class 'dict'>, {})
2021-10-21 20:30:47,510 [10148] DEBUG    numba.core.byteflow:236: [JupyterRequire] ----------------------DONE Prune PHIs-----------------------
2021-10-21 20:30:47,510 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$s14.1'}), (6, {'res': '$s26.2'}), (8, {'res': '$mask8.3'}), (10, {'func': '$2load_global.0', 'args': ['$s14.1', '$s26.2', '$mask8.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_method.6'}), (18, {'res': '$cum_sum18.7'}), (20, {'res': '$const20.8'}), (22, {'index': '$const20.8', 'target': '$cum_sum18.7', 'res': '$22binary_subscr.9'}), (24, {'func': '$16load_method.6', 'args': ['$22binary_subscr.9'], 'res': '$24call_method.10'}), (26, {'retval': '$24call_method.10', 'castval': '$26return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2021-10-21 20:30:47,513 [10148] DEBUG    numba.core.interpreter:149: [JupyterRequire] label 0:
    s1 = arg(0, name=s1)                     ['s1']
    s2 = arg(1, name=s2)                     ['s2']
    mask = arg(2, name=mask)                 ['mask']
    $2load_global.0 = global(njit_accumulated_matrix: CPUDispatcher(<function njit_accumulated_matrix at 0x0000016A52C17820>)) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(s1, s2, mask, func=$2load_global.0, args=[Var(s1, dtw_variants.py:81), Var(s2, dtw_variants.py:81), Var(mask, dtw_variants.py:81)], kws=(), vararg=None) ['$10call_function.4', '$2load_global.0', 'mask', 's1', 's2']
    cum_sum = $10call_function.4             ['$10call_function.4', 'cum_sum']
    $14load_global.5 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_method.6 = getattr(value=$14load_global.5, attr=sqrt) ['$14load_global.5', '$16load_method.6']
    $const_-1 = const(int, -1)               ['$const_-1']
    $const_-1.1 = const(int, -1)             ['$const_-1.1']
    $const20.8 = build_tuple(items=[Var($const_-1, dtw_variants.py:82), Var($const_-1.1, dtw_variants.py:82)]) ['$const20.8', '$const_-1', '$const_-1.1']
    $22binary_subscr.9 = getitem(value=cum_sum, index=$const20.8) ['$22binary_subscr.9', '$const20.8', 'cum_sum']
    $24call_method.10 = call $16load_method.6($22binary_subscr.9, func=$16load_method.6, args=[Var($22binary_subscr.9, dtw_variants.py:82)], kws=(), vararg=None) ['$16load_method.6', '$22binary_subscr.9', '$24call_method.10']
    $26return_value.11 = cast(value=$24call_method.10) ['$24call_method.10', '$26return_value.11']
    return $26return_value.11                ['$26return_value.11']

2021-10-21 20:30:47,520 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 0
2021-10-21 20:30:47,521 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54BFAA30>
2021-10-21 20:30:47,521 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: s1 = arg(0, name=s1)
2021-10-21 20:30:47,521 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: s2 = arg(1, name=s2)
2021-10-21 20:30:47,521 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: mask = arg(2, name=mask)
2021-10-21 20:30:47,521 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $2load_global.0 = global(njit_accumulated_matrix: CPUDispatcher(<function njit_accumulated_matrix at 0x0000016A52C17820>))
2021-10-21 20:30:47,522 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10call_function.4 = call $2load_global.0(s1, s2, mask, func=$2load_global.0, args=[Var(s1, dtw_variants.py:81), Var(s2, dtw_variants.py:81), Var(mask, dtw_variants.py:81)], kws=(), vararg=None)
2021-10-21 20:30:47,522 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: cum_sum = $10call_function.4
2021-10-21 20:30:47,522 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $14load_global.5 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:47,522 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16load_method.6 = getattr(value=$14load_global.5, attr=sqrt)
2021-10-21 20:30:47,522 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const_-1 = const(int, -1)
2021-10-21 20:30:47,522 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const_-1.1 = const(int, -1)
2021-10-21 20:30:47,523 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const20.8 = build_tuple(items=[Var($const_-1, dtw_variants.py:82), Var($const_-1.1, dtw_variants.py:82)])
2021-10-21 20:30:47,523 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22binary_subscr.9 = static_getitem(value=cum_sum, index=(-1, -1), index_var=$const20.8)
2021-10-21 20:30:47,523 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24call_method.10 = call $16load_method.6($22binary_subscr.9, func=$16load_method.6, args=[Var($22binary_subscr.9, dtw_variants.py:82)], kws=(), vararg=None)
2021-10-21 20:30:47,523 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26return_value.11 = cast(value=$24call_method.10)
2021-10-21 20:30:47,523 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $26return_value.11
2021-10-21 20:30:47,524 [10148] DEBUG    numba.core.ssa:141: [JupyterRequire] defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x0000016A54BA1CA0>],
             '$14load_global.5': [<numba.core.ir.Assign object at 0x0000016A54BA1F10>],
             '$16load_method.6': [<numba.core.ir.Assign object at 0x0000016A54BC10D0>],
             '$22binary_subscr.9': [<numba.core.ir.Assign object at 0x0000016A54BFA370>],
             '$24call_method.10': [<numba.core.ir.Assign object at 0x0000016A54BC18E0>],
             '$26return_value.11': [<numba.core.ir.Assign object at 0x0000016A54BC1A30>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000016A54BA1790>],
             '$const20.8': [<numba.core.ir.Assign object at 0x0000016A54BC15B0>],
             '$const_-1': [<numba.core.ir.Assign object at 0x0000016A54BC13A0>],
             '$const_-1.1': [<numba.core.ir.Assign object at 0x0000016A54BC14C0>],
             'cum_sum': [<numba.core.ir.Assign object at 0x0000016A54BA1D90>],
             'mask': [<numba.core.ir.Assign object at 0x0000016A54BA1610>],
             's1': [<numba.core.ir.Assign object at 0x0000016A54BA1430>],
             's2': [<numba.core.ir.Assign object at 0x0000016A54BA11F0>]})
2021-10-21 20:30:47,524 [10148] DEBUG    numba.core.ssa:143: [JupyterRequire] SSA violators set()
2021-10-21 20:30:47,528 [10148] DEBUG    numba.core.byteflow:74: [JupyterRequire] bytecode dump:
>          0	NOP(arg=None, lineno=45)
           2	LOAD_FAST(arg=0, lineno=45)
           4	LOAD_ATTR(arg=0, lineno=45)
           6	LOAD_CONST(arg=1, lineno=45)
           8	BINARY_SUBSCR(arg=None, lineno=45)
          10	STORE_FAST(arg=3, lineno=45)
          12	LOAD_FAST(arg=1, lineno=46)
          14	LOAD_ATTR(arg=0, lineno=46)
          16	LOAD_CONST(arg=1, lineno=46)
          18	BINARY_SUBSCR(arg=None, lineno=46)
          20	STORE_FAST(arg=4, lineno=46)
          22	LOAD_GLOBAL(arg=1, lineno=47)
          24	LOAD_METHOD(arg=2, lineno=47)
          26	LOAD_FAST(arg=3, lineno=47)
          28	LOAD_CONST(arg=2, lineno=47)
          30	BINARY_ADD(arg=None, lineno=47)
          32	LOAD_FAST(arg=4, lineno=47)
          34	LOAD_CONST(arg=2, lineno=47)
          36	BINARY_ADD(arg=None, lineno=47)
          38	BUILD_TUPLE(arg=2, lineno=47)
          40	LOAD_GLOBAL(arg=1, lineno=47)
          42	LOAD_ATTR(arg=3, lineno=47)
          44	CALL_METHOD(arg=2, lineno=47)
          46	STORE_FAST(arg=5, lineno=47)
          48	LOAD_CONST(arg=3, lineno=48)
          50	LOAD_FAST(arg=5, lineno=48)
          52	LOAD_CONST(arg=4, lineno=48)
          54	STORE_SUBSCR(arg=None, lineno=48)
          56	LOAD_GLOBAL(arg=4, lineno=50)
          58	LOAD_FAST(arg=3, lineno=50)
          60	CALL_FUNCTION(arg=1, lineno=50)
          62	GET_ITER(arg=None, lineno=50)
>         64	FOR_ITER(arg=138, lineno=50)
          66	STORE_FAST(arg=6, lineno=50)
          68	LOAD_GLOBAL(arg=4, lineno=51)
          70	LOAD_FAST(arg=4, lineno=51)
          72	CALL_FUNCTION(arg=1, lineno=51)
          74	GET_ITER(arg=None, lineno=51)
>         76	FOR_ITER(arg=124, lineno=51)
          78	STORE_FAST(arg=7, lineno=51)
          80	LOAD_GLOBAL(arg=1, lineno=52)
          82	LOAD_METHOD(arg=5, lineno=52)
          84	LOAD_FAST(arg=2, lineno=52)
          86	LOAD_FAST(arg=6, lineno=52)
          88	LOAD_FAST(arg=7, lineno=52)
          90	BUILD_TUPLE(arg=2, lineno=52)
          92	BINARY_SUBSCR(arg=None, lineno=52)
          94	CALL_METHOD(arg=1, lineno=52)
          96	POP_JUMP_IF_FALSE(arg=76, lineno=52)
          98	LOAD_GLOBAL(arg=6, lineno=53)
         100	LOAD_FAST(arg=0, lineno=53)
         102	LOAD_FAST(arg=6, lineno=53)
         104	BINARY_SUBSCR(arg=None, lineno=53)
         106	LOAD_FAST(arg=1, lineno=53)
         108	LOAD_FAST(arg=7, lineno=53)
         110	BINARY_SUBSCR(arg=None, lineno=53)
         112	CALL_FUNCTION(arg=2, lineno=53)
         114	LOAD_FAST(arg=5, lineno=53)
         116	LOAD_FAST(arg=6, lineno=53)
         118	LOAD_CONST(arg=2, lineno=53)
         120	BINARY_ADD(arg=None, lineno=53)
         122	LOAD_FAST(arg=7, lineno=53)
         124	LOAD_CONST(arg=2, lineno=53)
         126	BINARY_ADD(arg=None, lineno=53)
         128	BUILD_TUPLE(arg=2, lineno=53)
         130	STORE_SUBSCR(arg=None, lineno=53)
         132	LOAD_FAST(arg=5, lineno=54)
         134	LOAD_FAST(arg=6, lineno=54)
         136	LOAD_CONST(arg=2, lineno=54)
         138	BINARY_ADD(arg=None, lineno=54)
         140	LOAD_FAST(arg=7, lineno=54)
         142	LOAD_CONST(arg=2, lineno=54)
         144	BINARY_ADD(arg=None, lineno=54)
         146	BUILD_TUPLE(arg=2, lineno=54)
         148	DUP_TOP_TWO(arg=None, lineno=54)
         150	BINARY_SUBSCR(arg=None, lineno=54)
         152	LOAD_GLOBAL(arg=7, lineno=54)
         154	LOAD_FAST(arg=5, lineno=54)
         156	LOAD_FAST(arg=6, lineno=54)
         158	LOAD_FAST(arg=7, lineno=54)
         160	LOAD_CONST(arg=2, lineno=54)
         162	BINARY_ADD(arg=None, lineno=54)
         164	BUILD_TUPLE(arg=2, lineno=54)
         166	BINARY_SUBSCR(arg=None, lineno=54)
         168	LOAD_FAST(arg=5, lineno=55)
         170	LOAD_FAST(arg=6, lineno=55)
         172	LOAD_CONST(arg=2, lineno=55)
         174	BINARY_ADD(arg=None, lineno=55)
         176	LOAD_FAST(arg=7, lineno=55)
         178	BUILD_TUPLE(arg=2, lineno=55)
         180	BINARY_SUBSCR(arg=None, lineno=55)
         182	LOAD_FAST(arg=5, lineno=56)
         184	LOAD_FAST(arg=6, lineno=56)
         186	LOAD_FAST(arg=7, lineno=56)
         188	BUILD_TUPLE(arg=2, lineno=56)
         190	BINARY_SUBSCR(arg=None, lineno=56)
         192	CALL_FUNCTION(arg=3, lineno=54)
         194	INPLACE_ADD(arg=None, lineno=54)
         196	ROT_THREE(arg=None, lineno=54)
         198	STORE_SUBSCR(arg=None, lineno=54)
         200	JUMP_ABSOLUTE(arg=76, lineno=54)
>        202	JUMP_ABSOLUTE(arg=64, lineno=54)
>        204	LOAD_FAST(arg=5, lineno=57)
         206	LOAD_CONST(arg=2, lineno=57)
         208	LOAD_CONST(arg=5, lineno=57)
         210	BUILD_SLICE(arg=2, lineno=57)
         212	LOAD_CONST(arg=2, lineno=57)
         214	LOAD_CONST(arg=5, lineno=57)
         216	BUILD_SLICE(arg=2, lineno=57)
         218	BUILD_TUPLE(arg=2, lineno=57)
         220	BINARY_SUBSCR(arg=None, lineno=57)
         222	RETURN_VALUE(arg=None, lineno=57)
2021-10-21 20:30:47,528 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=0 nstack_initial=0)])
2021-10-21 20:30:47,529 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:47,529 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=0, inst=NOP(arg=None, lineno=45)
2021-10-21 20:30:47,529 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:47,529 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=45)
2021-10-21 20:30:47,529 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:47,529 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=45)
2021-10-21 20:30:47,530 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$s12.0']
2021-10-21 20:30:47,530 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=45)
2021-10-21 20:30:47,531 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_attr.1']
2021-10-21 20:30:47,531 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=45)
2021-10-21 20:30:47,531 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_attr.1', '$const6.2']
2021-10-21 20:30:47,531 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=10, inst=STORE_FAST(arg=3, lineno=45)
2021-10-21 20:30:47,531 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$8binary_subscr.3']
2021-10-21 20:30:47,532 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=46)
2021-10-21 20:30:47,532 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:47,532 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=14, inst=LOAD_ATTR(arg=0, lineno=46)
2021-10-21 20:30:47,532 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$s212.4']
2021-10-21 20:30:47,532 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=46)
2021-10-21 20:30:47,532 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$14load_attr.5']
2021-10-21 20:30:47,533 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=46)
2021-10-21 20:30:47,533 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$14load_attr.5', '$const16.6']
2021-10-21 20:30:47,533 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=20, inst=STORE_FAST(arg=4, lineno=46)
2021-10-21 20:30:47,534 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$18binary_subscr.7']
2021-10-21 20:30:47,534 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=22, inst=LOAD_GLOBAL(arg=1, lineno=47)
2021-10-21 20:30:47,534 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:47,534 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=47)
2021-10-21 20:30:47,534 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$22load_global.8']
2021-10-21 20:30:47,534 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=47)
2021-10-21 20:30:47,534 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9']
2021-10-21 20:30:47,534 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=47)
2021-10-21 20:30:47,534 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$l126.10']
2021-10-21 20:30:47,534 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=30, inst=BINARY_ADD(arg=None, lineno=47)
2021-10-21 20:30:47,534 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$l126.10', '$const28.11']
2021-10-21 20:30:47,535 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=47)
2021-10-21 20:30:47,535 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$30binary_add.12']
2021-10-21 20:30:47,535 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=34, inst=LOAD_CONST(arg=2, lineno=47)
2021-10-21 20:30:47,535 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$30binary_add.12', '$l232.13']
2021-10-21 20:30:47,535 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=36, inst=BINARY_ADD(arg=None, lineno=47)
2021-10-21 20:30:47,535 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$30binary_add.12', '$l232.13', '$const34.14']
2021-10-21 20:30:47,535 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=38, inst=BUILD_TUPLE(arg=2, lineno=47)
2021-10-21 20:30:47,536 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$30binary_add.12', '$36binary_add.15']
2021-10-21 20:30:47,536 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=40, inst=LOAD_GLOBAL(arg=1, lineno=47)
2021-10-21 20:30:47,536 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$38build_tuple.16']
2021-10-21 20:30:47,536 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=42, inst=LOAD_ATTR(arg=3, lineno=47)
2021-10-21 20:30:47,536 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$38build_tuple.16', '$40load_global.17']
2021-10-21 20:30:47,536 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=44, inst=CALL_METHOD(arg=2, lineno=47)
2021-10-21 20:30:47,537 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$38build_tuple.16', '$42load_attr.18']
2021-10-21 20:30:47,537 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=46, inst=STORE_FAST(arg=5, lineno=47)
2021-10-21 20:30:47,537 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$44call_method.19']
2021-10-21 20:30:47,537 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=48)
2021-10-21 20:30:47,537 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:47,538 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=48)
2021-10-21 20:30:47,538 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$const48.20']
2021-10-21 20:30:47,538 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=52, inst=LOAD_CONST(arg=4, lineno=48)
2021-10-21 20:30:47,539 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$const48.20', '$cum_sum50.21']
2021-10-21 20:30:47,539 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=54, inst=STORE_SUBSCR(arg=None, lineno=48)
2021-10-21 20:30:47,539 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$const48.20', '$cum_sum50.21', '$const52.22']
2021-10-21 20:30:47,539 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=56, inst=LOAD_GLOBAL(arg=4, lineno=50)
2021-10-21 20:30:47,539 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:47,539 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=58, inst=LOAD_FAST(arg=3, lineno=50)
2021-10-21 20:30:47,540 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$56load_global.23']
2021-10-21 20:30:47,540 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=60, inst=CALL_FUNCTION(arg=1, lineno=50)
2021-10-21 20:30:47,540 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$56load_global.23', '$l158.24']
2021-10-21 20:30:47,540 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=62, inst=GET_ITER(arg=None, lineno=50)
2021-10-21 20:30:47,540 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$60call_function.25']
2021-10-21 20:30:47,540 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=64, stack=('$62get_iter.26',), blockstack=(), npush=0)]
2021-10-21 20:30:47,541 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=64 nstack_initial=1)])
2021-10-21 20:30:47,541 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi64.0']
2021-10-21 20:30:47,541 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=64, inst=FOR_ITER(arg=138, lineno=50)
2021-10-21 20:30:47,541 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi64.0']
2021-10-21 20:30:47,542 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=204, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=('$phi64.0', '$64for_iter.2'), blockstack=(), npush=0)]
2021-10-21 20:30:47,542 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=204 nstack_initial=0), State(pc_initial=66 nstack_initial=2)])
2021-10-21 20:30:47,542 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:47,542 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=204, inst=LOAD_FAST(arg=5, lineno=57)
2021-10-21 20:30:47,542 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:47,542 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=206, inst=LOAD_CONST(arg=2, lineno=57)
2021-10-21 20:30:47,543 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0']
2021-10-21 20:30:47,543 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=208, inst=LOAD_CONST(arg=5, lineno=57)
2021-10-21 20:30:47,543 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0', '$const206.1']
2021-10-21 20:30:47,544 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=210, inst=BUILD_SLICE(arg=2, lineno=57)
2021-10-21 20:30:47,544 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0', '$const206.1', '$const208.2']
2021-10-21 20:30:47,544 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=212, inst=LOAD_CONST(arg=2, lineno=57)
2021-10-21 20:30:47,544 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0', '$210build_slice.4']
2021-10-21 20:30:47,544 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=214, inst=LOAD_CONST(arg=5, lineno=57)
2021-10-21 20:30:47,544 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0', '$210build_slice.4', '$const212.5']
2021-10-21 20:30:47,545 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=216, inst=BUILD_SLICE(arg=2, lineno=57)
2021-10-21 20:30:47,545 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0', '$210build_slice.4', '$const212.5', '$const214.6']
2021-10-21 20:30:47,545 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=218, inst=BUILD_TUPLE(arg=2, lineno=57)
2021-10-21 20:30:47,545 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0', '$210build_slice.4', '$216build_slice.8']
2021-10-21 20:30:47,545 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=57)
2021-10-21 20:30:47,545 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0', '$218build_tuple.9']
2021-10-21 20:30:47,546 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=222, inst=RETURN_VALUE(arg=None, lineno=57)
2021-10-21 20:30:47,546 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$220binary_subscr.10']
2021-10-21 20:30:47,546 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2021-10-21 20:30:47,546 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=66 nstack_initial=2)])
2021-10-21 20:30:47,546 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi66.0', '$phi66.1']
2021-10-21 20:30:47,546 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=66, inst=STORE_FAST(arg=6, lineno=50)
2021-10-21 20:30:47,546 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi66.0', '$phi66.1']
2021-10-21 20:30:47,547 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=68, inst=LOAD_GLOBAL(arg=4, lineno=51)
2021-10-21 20:30:47,547 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi66.0']
2021-10-21 20:30:47,547 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=70, inst=LOAD_FAST(arg=4, lineno=51)
2021-10-21 20:30:47,547 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi66.0', '$68load_global.2']
2021-10-21 20:30:47,547 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=51)
2021-10-21 20:30:47,547 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi66.0', '$68load_global.2', '$l270.3']
2021-10-21 20:30:47,548 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=74, inst=GET_ITER(arg=None, lineno=51)
2021-10-21 20:30:47,548 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi66.0', '$72call_function.4']
2021-10-21 20:30:47,548 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=76, stack=('$phi66.0', '$74get_iter.5'), blockstack=(), npush=0)]
2021-10-21 20:30:47,548 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=76 nstack_initial=2)])
2021-10-21 20:30:47,548 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi76.0', '$phi76.1']
2021-10-21 20:30:47,548 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=76, inst=FOR_ITER(arg=124, lineno=51)
2021-10-21 20:30:47,549 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi76.0', '$phi76.1']
2021-10-21 20:30:47,549 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=202, stack=('$phi76.0',), blockstack=(), npush=0), Edge(pc=78, stack=('$phi76.0', '$phi76.1', '$76for_iter.3'), blockstack=(), npush=0)]
2021-10-21 20:30:47,549 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=202 nstack_initial=1), State(pc_initial=78 nstack_initial=3)])
2021-10-21 20:30:47,549 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi202.0']
2021-10-21 20:30:47,549 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=202, inst=JUMP_ABSOLUTE(arg=64, lineno=54)
2021-10-21 20:30:47,549 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi202.0']
2021-10-21 20:30:47,550 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=64, stack=('$phi202.0',), blockstack=(), npush=0)]
2021-10-21 20:30:47,550 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=78 nstack_initial=3), State(pc_initial=64 nstack_initial=1)])
2021-10-21 20:30:47,550 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi78.0', '$phi78.1', '$phi78.2']
2021-10-21 20:30:47,550 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=78, inst=STORE_FAST(arg=7, lineno=51)
2021-10-21 20:30:47,550 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$phi78.2']
2021-10-21 20:30:47,551 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=80, inst=LOAD_GLOBAL(arg=1, lineno=52)
2021-10-21 20:30:47,551 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1']
2021-10-21 20:30:47,551 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=82, inst=LOAD_METHOD(arg=5, lineno=52)
2021-10-21 20:30:47,551 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$80load_global.3']
2021-10-21 20:30:47,551 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=84, inst=LOAD_FAST(arg=2, lineno=52)
2021-10-21 20:30:47,551 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$82load_method.4']
2021-10-21 20:30:47,551 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=52)
2021-10-21 20:30:47,552 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$82load_method.4', '$mask84.5']
2021-10-21 20:30:47,552 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=88, inst=LOAD_FAST(arg=7, lineno=52)
2021-10-21 20:30:47,552 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$82load_method.4', '$mask84.5', '$i86.6']
2021-10-21 20:30:47,552 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=90, inst=BUILD_TUPLE(arg=2, lineno=52)
2021-10-21 20:30:47,552 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$82load_method.4', '$mask84.5', '$i86.6', '$j88.7']
2021-10-21 20:30:47,552 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=92, inst=BINARY_SUBSCR(arg=None, lineno=52)
2021-10-21 20:30:47,553 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$82load_method.4', '$mask84.5', '$90build_tuple.8']
2021-10-21 20:30:47,553 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=94, inst=CALL_METHOD(arg=1, lineno=52)
2021-10-21 20:30:47,553 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$82load_method.4', '$92binary_subscr.9']
2021-10-21 20:30:47,553 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=76, lineno=52)
2021-10-21 20:30:47,553 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$94call_method.10']
2021-10-21 20:30:47,553 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=98, stack=('$phi78.0', '$phi78.1'), blockstack=(), npush=0), Edge(pc=76, stack=('$phi78.0', '$phi78.1'), blockstack=(), npush=0)]
2021-10-21 20:30:47,553 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=98 nstack_initial=2), State(pc_initial=76 nstack_initial=2)])
2021-10-21 20:30:47,554 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=98 nstack_initial=2), State(pc_initial=76 nstack_initial=2)])
2021-10-21 20:30:47,554 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi98.0', '$phi98.1']
2021-10-21 20:30:47,554 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=98, inst=LOAD_GLOBAL(arg=6, lineno=53)
2021-10-21 20:30:47,554 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1']
2021-10-21 20:30:47,554 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=100, inst=LOAD_FAST(arg=0, lineno=53)
2021-10-21 20:30:47,555 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$98load_global.2']
2021-10-21 20:30:47,555 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=102, inst=LOAD_FAST(arg=6, lineno=53)
2021-10-21 20:30:47,555 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$98load_global.2', '$s1100.3']
2021-10-21 20:30:47,555 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=53)
2021-10-21 20:30:47,555 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$98load_global.2', '$s1100.3', '$i102.4']
2021-10-21 20:30:47,555 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=106, inst=LOAD_FAST(arg=1, lineno=53)
2021-10-21 20:30:47,555 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$98load_global.2', '$104binary_subscr.5']
2021-10-21 20:30:47,556 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=108, inst=LOAD_FAST(arg=7, lineno=53)
2021-10-21 20:30:47,556 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$98load_global.2', '$104binary_subscr.5', '$s2106.6']
2021-10-21 20:30:47,556 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=110, inst=BINARY_SUBSCR(arg=None, lineno=53)
2021-10-21 20:30:47,556 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$98load_global.2', '$104binary_subscr.5', '$s2106.6', '$j108.7']
2021-10-21 20:30:47,556 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=112, inst=CALL_FUNCTION(arg=2, lineno=53)
2021-10-21 20:30:47,556 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$98load_global.2', '$104binary_subscr.5', '$110binary_subscr.8']
2021-10-21 20:30:47,557 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=114, inst=LOAD_FAST(arg=5, lineno=53)
2021-10-21 20:30:47,557 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9']
2021-10-21 20:30:47,557 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=116, inst=LOAD_FAST(arg=6, lineno=53)
2021-10-21 20:30:47,557 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10']
2021-10-21 20:30:47,557 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=118, inst=LOAD_CONST(arg=2, lineno=53)
2021-10-21 20:30:47,557 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10', '$i116.11']
2021-10-21 20:30:47,557 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=120, inst=BINARY_ADD(arg=None, lineno=53)
2021-10-21 20:30:47,558 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10', '$i116.11', '$const118.12']
2021-10-21 20:30:47,558 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=122, inst=LOAD_FAST(arg=7, lineno=53)
2021-10-21 20:30:47,558 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10', '$120binary_add.13']
2021-10-21 20:30:47,559 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=124, inst=LOAD_CONST(arg=2, lineno=53)
2021-10-21 20:30:47,559 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10', '$120binary_add.13', '$j122.14']
2021-10-21 20:30:47,561 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=126, inst=BINARY_ADD(arg=None, lineno=53)
2021-10-21 20:30:47,562 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10', '$120binary_add.13', '$j122.14', '$const124.15']
2021-10-21 20:30:47,564 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=128, inst=BUILD_TUPLE(arg=2, lineno=53)
2021-10-21 20:30:47,565 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10', '$120binary_add.13', '$126binary_add.16']
2021-10-21 20:30:47,566 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=130, inst=STORE_SUBSCR(arg=None, lineno=53)
2021-10-21 20:30:47,566 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10', '$128build_tuple.17']
2021-10-21 20:30:47,566 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=132, inst=LOAD_FAST(arg=5, lineno=54)
2021-10-21 20:30:47,566 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1']
2021-10-21 20:30:47,567 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=134, inst=LOAD_FAST(arg=6, lineno=54)
2021-10-21 20:30:47,567 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18']
2021-10-21 20:30:47,567 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=136, inst=LOAD_CONST(arg=2, lineno=54)
2021-10-21 20:30:47,568 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$i134.19']
2021-10-21 20:30:47,568 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=138, inst=BINARY_ADD(arg=None, lineno=54)
2021-10-21 20:30:47,568 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$i134.19', '$const136.20']
2021-10-21 20:30:47,568 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=140, inst=LOAD_FAST(arg=7, lineno=54)
2021-10-21 20:30:47,569 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$138binary_add.21']
2021-10-21 20:30:47,569 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=142, inst=LOAD_CONST(arg=2, lineno=54)
2021-10-21 20:30:47,569 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$138binary_add.21', '$j140.22']
2021-10-21 20:30:47,569 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=144, inst=BINARY_ADD(arg=None, lineno=54)
2021-10-21 20:30:47,570 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$138binary_add.21', '$j140.22', '$const142.23']
2021-10-21 20:30:47,570 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=146, inst=BUILD_TUPLE(arg=2, lineno=54)
2021-10-21 20:30:47,570 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$138binary_add.21', '$144binary_add.24']
2021-10-21 20:30:47,571 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=148, inst=DUP_TOP_TWO(arg=None, lineno=54)
2021-10-21 20:30:47,571 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25']
2021-10-21 20:30:47,571 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=150, inst=BINARY_SUBSCR(arg=None, lineno=54)
2021-10-21 20:30:47,571 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$148dup_top_two.26', '$148dup_top_two.27']
2021-10-21 20:30:47,571 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=152, inst=LOAD_GLOBAL(arg=7, lineno=54)
2021-10-21 20:30:47,572 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28']
2021-10-21 20:30:47,572 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=154, inst=LOAD_FAST(arg=5, lineno=54)
2021-10-21 20:30:47,572 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29']
2021-10-21 20:30:47,572 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=156, inst=LOAD_FAST(arg=6, lineno=54)
2021-10-21 20:30:47,573 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$cum_sum154.30']
2021-10-21 20:30:47,573 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=158, inst=LOAD_FAST(arg=7, lineno=54)
2021-10-21 20:30:47,573 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$cum_sum154.30', '$i156.31']
2021-10-21 20:30:47,573 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=160, inst=LOAD_CONST(arg=2, lineno=54)
2021-10-21 20:30:47,573 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$cum_sum154.30', '$i156.31', '$j158.32']
2021-10-21 20:30:47,574 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=162, inst=BINARY_ADD(arg=None, lineno=54)
2021-10-21 20:30:47,574 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$cum_sum154.30', '$i156.31', '$j158.32', '$const160.33']
2021-10-21 20:30:47,574 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=164, inst=BUILD_TUPLE(arg=2, lineno=54)
2021-10-21 20:30:47,574 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$cum_sum154.30', '$i156.31', '$162binary_add.34']
2021-10-21 20:30:47,575 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=166, inst=BINARY_SUBSCR(arg=None, lineno=54)
2021-10-21 20:30:47,575 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$cum_sum154.30', '$164build_tuple.35']
2021-10-21 20:30:47,575 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=168, inst=LOAD_FAST(arg=5, lineno=55)
2021-10-21 20:30:47,575 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36']
2021-10-21 20:30:47,576 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=170, inst=LOAD_FAST(arg=6, lineno=55)
2021-10-21 20:30:47,576 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$cum_sum168.37']
2021-10-21 20:30:47,576 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=172, inst=LOAD_CONST(arg=2, lineno=55)
2021-10-21 20:30:47,576 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$cum_sum168.37', '$i170.38']
2021-10-21 20:30:47,576 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=174, inst=BINARY_ADD(arg=None, lineno=55)
2021-10-21 20:30:47,577 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$cum_sum168.37', '$i170.38', '$const172.39']
2021-10-21 20:30:47,577 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=176, inst=LOAD_FAST(arg=7, lineno=55)
2021-10-21 20:30:47,577 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$cum_sum168.37', '$174binary_add.40']
2021-10-21 20:30:47,578 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=178, inst=BUILD_TUPLE(arg=2, lineno=55)
2021-10-21 20:30:47,578 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$cum_sum168.37', '$174binary_add.40', '$j176.41']
2021-10-21 20:30:47,578 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=180, inst=BINARY_SUBSCR(arg=None, lineno=55)
2021-10-21 20:30:47,578 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$cum_sum168.37', '$178build_tuple.42']
2021-10-21 20:30:47,579 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=182, inst=LOAD_FAST(arg=5, lineno=56)
2021-10-21 20:30:47,579 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$180binary_subscr.43']
2021-10-21 20:30:47,579 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=184, inst=LOAD_FAST(arg=6, lineno=56)
2021-10-21 20:30:47,579 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$180binary_subscr.43', '$cum_sum182.44']
2021-10-21 20:30:47,579 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=186, inst=LOAD_FAST(arg=7, lineno=56)
2021-10-21 20:30:47,579 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$180binary_subscr.43', '$cum_sum182.44', '$i184.45']
2021-10-21 20:30:47,580 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=188, inst=BUILD_TUPLE(arg=2, lineno=56)
2021-10-21 20:30:47,580 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$180binary_subscr.43', '$cum_sum182.44', '$i184.45', '$j186.46']
2021-10-21 20:30:47,580 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=190, inst=BINARY_SUBSCR(arg=None, lineno=56)
2021-10-21 20:30:47,580 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$180binary_subscr.43', '$cum_sum182.44', '$188build_tuple.47']
2021-10-21 20:30:47,580 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=192, inst=CALL_FUNCTION(arg=3, lineno=54)
2021-10-21 20:30:47,581 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$180binary_subscr.43', '$190binary_subscr.48']
2021-10-21 20:30:47,581 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=194, inst=INPLACE_ADD(arg=None, lineno=54)
2021-10-21 20:30:47,581 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$192call_function.49']
2021-10-21 20:30:47,581 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=196, inst=ROT_THREE(arg=None, lineno=54)
2021-10-21 20:30:47,581 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$194inplace_add.50']
2021-10-21 20:30:47,581 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=198, inst=STORE_SUBSCR(arg=None, lineno=54)
2021-10-21 20:30:47,582 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$194inplace_add.50', '$cum_sum132.18', '$146build_tuple.25']
2021-10-21 20:30:47,582 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=200, inst=JUMP_ABSOLUTE(arg=76, lineno=54)
2021-10-21 20:30:47,582 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1']
2021-10-21 20:30:47,582 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=76, stack=('$phi98.0', '$phi98.1'), blockstack=(), npush=0)]
2021-10-21 20:30:47,582 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=76 nstack_initial=2), State(pc_initial=76 nstack_initial=2)])
2021-10-21 20:30:47,583 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=76 nstack_initial=2)])
2021-10-21 20:30:47,583 [10148] DEBUG    numba.core.byteflow:163: [JupyterRequire] -------------------------Prune PHIs-------------------------
2021-10-21 20:30:47,583 [10148] DEBUG    numba.core.byteflow:232: [JupyterRequire] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=1): {'$phi64.0'},
             State(pc_initial=66 nstack_initial=2): {'$phi66.1'},
             State(pc_initial=76 nstack_initial=2): {'$phi76.1'},
             State(pc_initial=78 nstack_initial=3): {'$phi78.2'},
             State(pc_initial=98 nstack_initial=2): set(),
             State(pc_initial=202 nstack_initial=1): set(),
             State(pc_initial=204 nstack_initial=0): set()})
2021-10-21 20:30:47,583 [10148] DEBUG    numba.core.byteflow:189: [JupyterRequire] defmap: {'$phi64.0': State(pc_initial=0 nstack_initial=0),
 '$phi66.1': State(pc_initial=64 nstack_initial=1),
 '$phi76.1': State(pc_initial=66 nstack_initial=2),
 '$phi78.2': State(pc_initial=76 nstack_initial=2)}
2021-10-21 20:30:47,583 [10148] DEBUG    numba.core.byteflow:190: [JupyterRequire] phismap: defaultdict(<class 'set'>,
            {'$phi202.0': {('$phi76.0', State(pc_initial=76 nstack_initial=2))},
             '$phi64.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi202.0',
                           State(pc_initial=202 nstack_initial=1))},
             '$phi66.0': {('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi76.0': {('$phi66.0', State(pc_initial=66 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=3)),
                          ('$phi98.0', State(pc_initial=98 nstack_initial=2))},
             '$phi76.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2)),
                          ('$phi78.1', State(pc_initial=78 nstack_initial=3)),
                          ('$phi98.1', State(pc_initial=98 nstack_initial=2))},
             '$phi78.0': {('$phi76.0', State(pc_initial=76 nstack_initial=2))},
             '$phi78.1': {('$phi76.1', State(pc_initial=76 nstack_initial=2))},
             '$phi78.2': {('$76for_iter.3',
                           State(pc_initial=76 nstack_initial=2))},
             '$phi98.0': {('$phi78.0', State(pc_initial=78 nstack_initial=3))},
             '$phi98.1': {('$phi78.1', State(pc_initial=78 nstack_initial=3))}})
2021-10-21 20:30:47,584 [10148] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi202.0': {('$phi66.0', State(pc_initial=66 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=3)),
                           ('$phi98.0', State(pc_initial=98 nstack_initial=2))},
             '$phi64.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=3)),
                          ('$phi98.0', State(pc_initial=98 nstack_initial=2))},
             '$phi66.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=3)),
                          ('$phi98.0', State(pc_initial=98 nstack_initial=2))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi76.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi76.0', State(pc_initial=76 nstack_initial=2))},
             '$phi76.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2)),
                          ('$phi76.1', State(pc_initial=76 nstack_initial=2))},
             '$phi78.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))},
             '$phi78.2': {('$76for_iter.3',
                           State(pc_initial=76 nstack_initial=2))},
             '$phi98.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi98.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))}})
2021-10-21 20:30:47,584 [10148] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi202.0': {('$62get_iter.26',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi64.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi66.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi76.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi76.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))},
             '$phi78.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))},
             '$phi78.2': {('$76for_iter.3',
                           State(pc_initial=76 nstack_initial=2))},
             '$phi98.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi98.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))}})
2021-10-21 20:30:47,585 [10148] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi202.0': {('$62get_iter.26',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi64.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi66.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi76.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi76.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))},
             '$phi78.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))},
             '$phi78.2': {('$76for_iter.3',
                           State(pc_initial=76 nstack_initial=2))},
             '$phi98.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi98.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))}})
2021-10-21 20:30:47,585 [10148] DEBUG    numba.core.byteflow:220: [JupyterRequire] keep phismap: {'$phi64.0': {('$62get_iter.26', State(pc_initial=0 nstack_initial=0))},
 '$phi66.1': {('$64for_iter.2', State(pc_initial=64 nstack_initial=1))},
 '$phi76.1': {('$74get_iter.5', State(pc_initial=66 nstack_initial=2))},
 '$phi78.2': {('$76for_iter.3', State(pc_initial=76 nstack_initial=2))}}
2021-10-21 20:30:47,585 [10148] DEBUG    numba.core.byteflow:226: [JupyterRequire] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi64.0': '$62get_iter.26'},
             State(pc_initial=64 nstack_initial=1): {'$phi66.1': '$64for_iter.2'},
             State(pc_initial=66 nstack_initial=2): {'$phi76.1': '$74get_iter.5'},
             State(pc_initial=76 nstack_initial=2): {'$phi78.2': '$76for_iter.3'}})
2021-10-21 20:30:47,586 [10148] DEBUG    numba.core.byteflow:236: [JupyterRequire] ----------------------DONE Prune PHIs-----------------------
2021-10-21 20:30:47,586 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$s12.0'}), (4, {'item': '$s12.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$4load_attr.1', 'res': '$8binary_subscr.3'}), (10, {'value': '$8binary_subscr.3'}), (12, {'res': '$s212.4'}), (14, {'item': '$s212.4', 'res': '$14load_attr.5'}), (16, {'res': '$const16.6'}), (18, {'index': '$const16.6', 'target': '$14load_attr.5', 'res': '$18binary_subscr.7'}), (20, {'value': '$18binary_subscr.7'}), (22, {'res': '$22load_global.8'}), (24, {'item': '$22load_global.8', 'res': '$24load_method.9'}), (26, {'res': '$l126.10'}), (28, {'res': '$const28.11'}), (30, {'lhs': '$l126.10', 'rhs': '$const28.11', 'res': '$30binary_add.12'}), (32, {'res': '$l232.13'}), (34, {'res': '$const34.14'}), (36, {'lhs': '$l232.13', 'rhs': '$const34.14', 'res': '$36binary_add.15'}), (38, {'items': ['$30binary_add.12', '$36binary_add.15'], 'res': '$38build_tuple.16'}), (40, {'res': '$40load_global.17'}), (42, {'item': '$40load_global.17', 'res': '$42load_attr.18'}), (44, {'func': '$24load_method.9', 'args': ['$38build_tuple.16', '$42load_attr.18'], 'res': '$44call_method.19'}), (46, {'value': '$44call_method.19'}), (48, {'res': '$const48.20'}), (50, {'res': '$cum_sum50.21'}), (52, {'res': '$const52.22'}), (54, {'target': '$cum_sum50.21', 'index': '$const52.22', 'value': '$const48.20'}), (56, {'res': '$56load_global.23'}), (58, {'res': '$l158.24'}), (60, {'func': '$56load_global.23', 'args': ['$l158.24'], 'res': '$60call_function.25'}), (62, {'value': '$60call_function.25', 'res': '$62get_iter.26'})), outgoing_phis={'$phi64.0': '$62get_iter.26'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$62get_iter.26',)})
2021-10-21 20:30:47,586 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'iterator': '$phi64.0', 'pair': '$64for_iter.1', 'indval': '$64for_iter.2', 'pred': '$64for_iter.3'}),), outgoing_phis={'$phi66.1': '$64for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={204: (), 66: ('$phi64.0', '$64for_iter.2')})
2021-10-21 20:30:47,586 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=66 nstack_initial=2):
AdaptBlockInfo(insts=((66, {'value': '$phi66.1'}), (68, {'res': '$68load_global.2'}), (70, {'res': '$l270.3'}), (72, {'func': '$68load_global.2', 'args': ['$l270.3'], 'res': '$72call_function.4'}), (74, {'value': '$72call_function.4', 'res': '$74get_iter.5'})), outgoing_phis={'$phi76.1': '$74get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={76: ('$phi66.0', '$74get_iter.5')})
2021-10-21 20:30:47,586 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=76 nstack_initial=2):
AdaptBlockInfo(insts=((76, {'iterator': '$phi76.1', 'pair': '$76for_iter.2', 'indval': '$76for_iter.3', 'pred': '$76for_iter.4'}),), outgoing_phis={'$phi78.2': '$76for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: ('$phi76.0',), 78: ('$phi76.0', '$phi76.1', '$76for_iter.3')})
2021-10-21 20:30:47,586 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=78 nstack_initial=3):
AdaptBlockInfo(insts=((78, {'value': '$phi78.2'}), (80, {'res': '$80load_global.3'}), (82, {'item': '$80load_global.3', 'res': '$82load_method.4'}), (84, {'res': '$mask84.5'}), (86, {'res': '$i86.6'}), (88, {'res': '$j88.7'}), (90, {'items': ['$i86.6', '$j88.7'], 'res': '$90build_tuple.8'}), (92, {'index': '$90build_tuple.8', 'target': '$mask84.5', 'res': '$92binary_subscr.9'}), (94, {'func': '$82load_method.4', 'args': ['$92binary_subscr.9'], 'res': '$94call_method.10'}), (96, {'pred': '$94call_method.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi78.0', '$phi78.1'), 76: ('$phi78.0', '$phi78.1')})
2021-10-21 20:30:47,587 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=98 nstack_initial=2):
AdaptBlockInfo(insts=((98, {'res': '$98load_global.2'}), (100, {'res': '$s1100.3'}), (102, {'res': '$i102.4'}), (104, {'index': '$i102.4', 'target': '$s1100.3', 'res': '$104binary_subscr.5'}), (106, {'res': '$s2106.6'}), (108, {'res': '$j108.7'}), (110, {'index': '$j108.7', 'target': '$s2106.6', 'res': '$110binary_subscr.8'}), (112, {'func': '$98load_global.2', 'args': ['$104binary_subscr.5', '$110binary_subscr.8'], 'res': '$112call_function.9'}), (114, {'res': '$cum_sum114.10'}), (116, {'res': '$i116.11'}), (118, {'res': '$const118.12'}), (120, {'lhs': '$i116.11', 'rhs': '$const118.12', 'res': '$120binary_add.13'}), (122, {'res': '$j122.14'}), (124, {'res': '$const124.15'}), (126, {'lhs': '$j122.14', 'rhs': '$const124.15', 'res': '$126binary_add.16'}), (128, {'items': ['$120binary_add.13', '$126binary_add.16'], 'res': '$128build_tuple.17'}), (130, {'target': '$cum_sum114.10', 'index': '$128build_tuple.17', 'value': '$112call_function.9'}), (132, {'res': '$cum_sum132.18'}), (134, {'res': '$i134.19'}), (136, {'res': '$const136.20'}), (138, {'lhs': '$i134.19', 'rhs': '$const136.20', 'res': '$138binary_add.21'}), (140, {'res': '$j140.22'}), (142, {'res': '$const142.23'}), (144, {'lhs': '$j140.22', 'rhs': '$const142.23', 'res': '$144binary_add.24'}), (146, {'items': ['$138binary_add.21', '$144binary_add.24'], 'res': '$146build_tuple.25'}), (148, {'orig': ['$cum_sum132.18', '$146build_tuple.25'], 'duped': ['$148dup_top_two.26', '$148dup_top_two.27']}), (150, {'index': '$148dup_top_two.27', 'target': '$148dup_top_two.26', 'res': '$150binary_subscr.28'}), (152, {'res': '$152load_global.29'}), (154, {'res': '$cum_sum154.30'}), (156, {'res': '$i156.31'}), (158, {'res': '$j158.32'}), (160, {'res': '$const160.33'}), (162, {'lhs': '$j158.32', 'rhs': '$const160.33', 'res': '$162binary_add.34'}), (164, {'items': ['$i156.31', '$162binary_add.34'], 'res': '$164build_tuple.35'}), (166, {'index': '$164build_tuple.35', 'target': '$cum_sum154.30', 'res': '$166binary_subscr.36'}), (168, {'res': '$cum_sum168.37'}), (170, {'res': '$i170.38'}), (172, {'res': '$const172.39'}), (174, {'lhs': '$i170.38', 'rhs': '$const172.39', 'res': '$174binary_add.40'}), (176, {'res': '$j176.41'}), (178, {'items': ['$174binary_add.40', '$j176.41'], 'res': '$178build_tuple.42'}), (180, {'index': '$178build_tuple.42', 'target': '$cum_sum168.37', 'res': '$180binary_subscr.43'}), (182, {'res': '$cum_sum182.44'}), (184, {'res': '$i184.45'}), (186, {'res': '$j186.46'}), (188, {'items': ['$i184.45', '$j186.46'], 'res': '$188build_tuple.47'}), (190, {'index': '$188build_tuple.47', 'target': '$cum_sum182.44', 'res': '$190binary_subscr.48'}), (192, {'func': '$152load_global.29', 'args': ['$166binary_subscr.36', '$180binary_subscr.43', '$190binary_subscr.48'], 'res': '$192call_function.49'}), (194, {'lhs': '$150binary_subscr.28', 'rhs': '$192call_function.49', 'res': '$194inplace_add.50'}), (198, {'target': '$cum_sum132.18', 'index': '$146build_tuple.25', 'value': '$194inplace_add.50'}), (200, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={76: ('$phi98.0', '$phi98.1')})
2021-10-21 20:30:47,587 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=202 nstack_initial=1):
AdaptBlockInfo(insts=((202, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$phi202.0',)})
2021-10-21 20:30:47,587 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=204 nstack_initial=0):
AdaptBlockInfo(insts=((204, {'res': '$cum_sum204.0'}), (206, {'res': '$const206.1'}), (208, {'res': '$const208.2'}), (210, {'start': '$const206.1', 'stop': '$const208.2', 'step': None, 'res': '$210build_slice.4', 'slicevar': '$210build_slice.3'}), (212, {'res': '$const212.5'}), (214, {'res': '$const214.6'}), (216, {'start': '$const212.5', 'stop': '$const214.6', 'step': None, 'res': '$216build_slice.8', 'slicevar': '$216build_slice.7'}), (218, {'items': ['$210build_slice.4', '$216build_slice.8'], 'res': '$218build_tuple.9'}), (220, {'index': '$218build_tuple.9', 'target': '$cum_sum204.0', 'res': '$220binary_subscr.10'}), (222, {'retval': '$220binary_subscr.10', 'castval': '$222return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2021-10-21 20:30:47,590 [10148] DEBUG    numba.core.interpreter:149: [JupyterRequire] label 0:
    s1 = arg(0, name=s1)                     ['s1']
    s2 = arg(1, name=s2)                     ['s2']
    mask = arg(2, name=mask)                 ['mask']
    $4load_attr.1 = getattr(value=s1, attr=shape) ['$4load_attr.1', 's1']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = getitem(value=$4load_attr.1, index=$const6.2) ['$4load_attr.1', '$8binary_subscr.3', '$const6.2']
    l1 = $8binary_subscr.3                   ['$8binary_subscr.3', 'l1']
    $14load_attr.5 = getattr(value=s2, attr=shape) ['$14load_attr.5', 's2']
    $const16.6 = const(int, 0)               ['$const16.6']
    $18binary_subscr.7 = getitem(value=$14load_attr.5, index=$const16.6) ['$14load_attr.5', '$18binary_subscr.7', '$const16.6']
    l2 = $18binary_subscr.7                  ['$18binary_subscr.7', 'l2']
    $22load_global.8 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$22load_global.8']
    $24load_method.9 = getattr(value=$22load_global.8, attr=full) ['$22load_global.8', '$24load_method.9']
    $const28.11 = const(int, 1)              ['$const28.11']
    $30binary_add.12 = l1 + $const28.11      ['$30binary_add.12', '$const28.11', 'l1']
    $const34.14 = const(int, 1)              ['$const34.14']
    $36binary_add.15 = l2 + $const34.14      ['$36binary_add.15', '$const34.14', 'l2']
    $38build_tuple.16 = build_tuple(items=[Var($30binary_add.12, dtw_variants.py:47), Var($36binary_add.15, dtw_variants.py:47)]) ['$30binary_add.12', '$36binary_add.15', '$38build_tuple.16']
    $40load_global.17 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$40load_global.17']
    $42load_attr.18 = getattr(value=$40load_global.17, attr=inf) ['$40load_global.17', '$42load_attr.18']
    $44call_method.19 = call $24load_method.9($38build_tuple.16, $42load_attr.18, func=$24load_method.9, args=[Var($38build_tuple.16, dtw_variants.py:47), Var($42load_attr.18, dtw_variants.py:47)], kws=(), vararg=None) ['$24load_method.9', '$38build_tuple.16', '$42load_attr.18', '$44call_method.19']
    cum_sum = $44call_method.19              ['$44call_method.19', 'cum_sum']
    $const48.20 = const(float, 0.0)          ['$const48.20']
    $const_0 = const(int, 0)                 ['$const_0']
    $const_0.1 = const(int, 0)               ['$const_0.1']
    $const52.22 = build_tuple(items=[Var($const_0, dtw_variants.py:48), Var($const_0.1, dtw_variants.py:48)]) ['$const52.22', '$const_0', '$const_0.1']
    cum_sum[$const52.22] = $const48.20       ['$const48.20', '$const52.22', 'cum_sum']
    $56load_global.23 = global(range: <class 'range'>) ['$56load_global.23']
    $60call_function.25 = call $56load_global.23(l1, func=$56load_global.23, args=[Var(l1, dtw_variants.py:45)], kws=(), vararg=None) ['$56load_global.23', '$60call_function.25', 'l1']
    $62get_iter.26 = getiter(value=$60call_function.25) ['$60call_function.25', '$62get_iter.26']
    $phi64.0 = $62get_iter.26                ['$62get_iter.26', '$phi64.0']
    jump 64                                  []
label 64:
    $64for_iter.1 = iternext(value=$phi64.0) ['$64for_iter.1', '$phi64.0']
    $64for_iter.2 = pair_first(value=$64for_iter.1) ['$64for_iter.1', '$64for_iter.2']
    $64for_iter.3 = pair_second(value=$64for_iter.1) ['$64for_iter.1', '$64for_iter.3']
    $phi66.1 = $64for_iter.2                 ['$64for_iter.2', '$phi66.1']
    branch $64for_iter.3, 66, 204            ['$64for_iter.3']
label 66:
    i = $phi66.1                             ['$phi66.1', 'i']
    $68load_global.2 = global(range: <class 'range'>) ['$68load_global.2']
    $72call_function.4 = call $68load_global.2(l2, func=$68load_global.2, args=[Var(l2, dtw_variants.py:46)], kws=(), vararg=None) ['$68load_global.2', '$72call_function.4', 'l2']
    $74get_iter.5 = getiter(value=$72call_function.4) ['$72call_function.4', '$74get_iter.5']
    $phi76.1 = $74get_iter.5                 ['$74get_iter.5', '$phi76.1']
    jump 76                                  []
label 76:
    $76for_iter.2 = iternext(value=$phi76.1) ['$76for_iter.2', '$phi76.1']
    $76for_iter.3 = pair_first(value=$76for_iter.2) ['$76for_iter.2', '$76for_iter.3']
    $76for_iter.4 = pair_second(value=$76for_iter.2) ['$76for_iter.2', '$76for_iter.4']
    $phi78.2 = $76for_iter.3                 ['$76for_iter.3', '$phi78.2']
    branch $76for_iter.4, 78, 202            ['$76for_iter.4']
label 78:
    j = $phi78.2                             ['$phi78.2', 'j']
    $80load_global.3 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$80load_global.3']
    $82load_method.4 = getattr(value=$80load_global.3, attr=isfinite) ['$80load_global.3', '$82load_method.4']
    $90build_tuple.8 = build_tuple(items=[Var(i, dtw_variants.py:50), Var(j, dtw_variants.py:51)]) ['$90build_tuple.8', 'i', 'j']
    $92binary_subscr.9 = getitem(value=mask, index=$90build_tuple.8) ['$90build_tuple.8', '$92binary_subscr.9', 'mask']
    $94call_method.10 = call $82load_method.4($92binary_subscr.9, func=$82load_method.4, args=[Var($92binary_subscr.9, dtw_variants.py:52)], kws=(), vararg=None) ['$82load_method.4', '$92binary_subscr.9', '$94call_method.10']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94call_method.10, func=bool96, args=(Var($94call_method.10, dtw_variants.py:52),), kws=(), vararg=None) ['$94call_method.10', '$96pred', 'bool96']
    branch $96pred, 98, 76                   ['$96pred']
label 98:
    $98load_global.2 = global(_local_squared_dist: CPUDispatcher(<function _local_squared_dist at 0x0000016A52C17670>)) ['$98load_global.2']
    $104binary_subscr.5 = getitem(value=s1, index=i) ['$104binary_subscr.5', 'i', 's1']
    $110binary_subscr.8 = getitem(value=s2, index=j) ['$110binary_subscr.8', 'j', 's2']
    $112call_function.9 = call $98load_global.2($104binary_subscr.5, $110binary_subscr.8, func=$98load_global.2, args=[Var($104binary_subscr.5, dtw_variants.py:53), Var($110binary_subscr.8, dtw_variants.py:53)], kws=(), vararg=None) ['$104binary_subscr.5', '$110binary_subscr.8', '$112call_function.9', '$98load_global.2']
    $const118.12 = const(int, 1)             ['$const118.12']
    $120binary_add.13 = i + $const118.12     ['$120binary_add.13', '$const118.12', 'i']
    $const124.15 = const(int, 1)             ['$const124.15']
    $126binary_add.16 = j + $const124.15     ['$126binary_add.16', '$const124.15', 'j']
    $128build_tuple.17 = build_tuple(items=[Var($120binary_add.13, dtw_variants.py:53), Var($126binary_add.16, dtw_variants.py:53)]) ['$120binary_add.13', '$126binary_add.16', '$128build_tuple.17']
    cum_sum[$128build_tuple.17] = $112call_function.9 ['$112call_function.9', '$128build_tuple.17', 'cum_sum']
    $const136.20 = const(int, 1)             ['$const136.20']
    $138binary_add.21 = i + $const136.20     ['$138binary_add.21', '$const136.20', 'i']
    $const142.23 = const(int, 1)             ['$const142.23']
    $144binary_add.24 = j + $const142.23     ['$144binary_add.24', '$const142.23', 'j']
    $146build_tuple.25 = build_tuple(items=[Var($138binary_add.21, dtw_variants.py:54), Var($144binary_add.24, dtw_variants.py:54)]) ['$138binary_add.21', '$144binary_add.24', '$146build_tuple.25']
    $150binary_subscr.28 = getitem(value=cum_sum, index=$146build_tuple.25) ['$146build_tuple.25', '$150binary_subscr.28', 'cum_sum']
    $152load_global.29 = global(min: <built-in function min>) ['$152load_global.29']
    $const160.33 = const(int, 1)             ['$const160.33']
    $162binary_add.34 = j + $const160.33     ['$162binary_add.34', '$const160.33', 'j']
    $164build_tuple.35 = build_tuple(items=[Var(i, dtw_variants.py:50), Var($162binary_add.34, dtw_variants.py:54)]) ['$162binary_add.34', '$164build_tuple.35', 'i']
    $166binary_subscr.36 = getitem(value=cum_sum, index=$164build_tuple.35) ['$164build_tuple.35', '$166binary_subscr.36', 'cum_sum']
    $const172.39 = const(int, 1)             ['$const172.39']
    $174binary_add.40 = i + $const172.39     ['$174binary_add.40', '$const172.39', 'i']
    $178build_tuple.42 = build_tuple(items=[Var($174binary_add.40, dtw_variants.py:55), Var(j, dtw_variants.py:51)]) ['$174binary_add.40', '$178build_tuple.42', 'j']
    $180binary_subscr.43 = getitem(value=cum_sum, index=$178build_tuple.42) ['$178build_tuple.42', '$180binary_subscr.43', 'cum_sum']
    $188build_tuple.47 = build_tuple(items=[Var(i, dtw_variants.py:50), Var(j, dtw_variants.py:51)]) ['$188build_tuple.47', 'i', 'j']
    $190binary_subscr.48 = getitem(value=cum_sum, index=$188build_tuple.47) ['$188build_tuple.47', '$190binary_subscr.48', 'cum_sum']
    $192call_function.49 = call $152load_global.29($166binary_subscr.36, $180binary_subscr.43, $190binary_subscr.48, func=$152load_global.29, args=[Var($166binary_subscr.36, dtw_variants.py:54), Var($180binary_subscr.43, dtw_variants.py:55), Var($190binary_subscr.48, dtw_variants.py:56)], kws=(), vararg=None) ['$152load_global.29', '$166binary_subscr.36', '$180binary_subscr.43', '$190binary_subscr.48', '$192call_function.49']
    $194inplace_add.50 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.28, rhs=$192call_function.49, static_lhs=Undefined, static_rhs=Undefined) ['$150binary_subscr.28', '$192call_function.49', '$194inplace_add.50']
    cum_sum[$146build_tuple.25] = $194inplace_add.50 ['$146build_tuple.25', '$194inplace_add.50', 'cum_sum']
    jump 76                                  []
label 202:
    jump 64                                  []
label 204:
    $const206.1 = const(int, 1)              ['$const206.1']
    $const208.2 = const(NoneType, None)      ['$const208.2']
    $210build_slice.3 = global(slice: <class 'slice'>) ['$210build_slice.3']
    $210build_slice.4 = call $210build_slice.3($const206.1, $const208.2, func=$210build_slice.3, args=(Var($const206.1, dtw_variants.py:57), Var($const208.2, dtw_variants.py:57)), kws=(), vararg=None) ['$210build_slice.3', '$210build_slice.4', '$const206.1', '$const208.2']
    $const212.5 = const(int, 1)              ['$const212.5']
    $const214.6 = const(NoneType, None)      ['$const214.6']
    $216build_slice.7 = global(slice: <class 'slice'>) ['$216build_slice.7']
    $216build_slice.8 = call $216build_slice.7($const212.5, $const214.6, func=$216build_slice.7, args=(Var($const212.5, dtw_variants.py:57), Var($const214.6, dtw_variants.py:57)), kws=(), vararg=None) ['$216build_slice.7', '$216build_slice.8', '$const212.5', '$const214.6']
    $218build_tuple.9 = build_tuple(items=[Var($210build_slice.4, dtw_variants.py:57), Var($216build_slice.8, dtw_variants.py:57)]) ['$210build_slice.4', '$216build_slice.8', '$218build_tuple.9']
    $220binary_subscr.10 = getitem(value=cum_sum, index=$218build_tuple.9) ['$218build_tuple.9', '$220binary_subscr.10', 'cum_sum']
    $222return_value.11 = cast(value=$220binary_subscr.10) ['$220binary_subscr.10', '$222return_value.11']
    return $222return_value.11               ['$222return_value.11']

2021-10-21 20:30:47,624 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 0
2021-10-21 20:30:47,625 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54C85A30>
2021-10-21 20:30:47,625 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: s1 = arg(0, name=s1)
2021-10-21 20:30:47,625 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: s2 = arg(1, name=s2)
2021-10-21 20:30:47,625 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: mask = arg(2, name=mask)
2021-10-21 20:30:47,625 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=s1, attr=shape)
2021-10-21 20:30:47,625 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2021-10-21 20:30:47,625 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2)
2021-10-21 20:30:47,626 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: l1 = $8binary_subscr.3
2021-10-21 20:30:47,626 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $14load_attr.5 = getattr(value=s2, attr=shape)
2021-10-21 20:30:47,626 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const16.6 = const(int, 0)
2021-10-21 20:30:47,626 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $18binary_subscr.7 = static_getitem(value=$14load_attr.5, index=0, index_var=$const16.6)
2021-10-21 20:30:47,626 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: l2 = $18binary_subscr.7
2021-10-21 20:30:47,626 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_global.8 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:47,626 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24load_method.9 = getattr(value=$22load_global.8, attr=full)
2021-10-21 20:30:47,626 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const28.11 = const(int, 1)
2021-10-21 20:30:47,627 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $30binary_add.12 = l1 + $const28.11
2021-10-21 20:30:47,627 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.14 = const(int, 1)
2021-10-21 20:30:47,627 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $36binary_add.15 = l2 + $const34.14
2021-10-21 20:30:47,627 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $38build_tuple.16 = build_tuple(items=[Var($30binary_add.12, dtw_variants.py:47), Var($36binary_add.15, dtw_variants.py:47)])
2021-10-21 20:30:47,627 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $40load_global.17 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:47,627 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $42load_attr.18 = getattr(value=$40load_global.17, attr=inf)
2021-10-21 20:30:47,627 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44call_method.19 = call $24load_method.9($38build_tuple.16, $42load_attr.18, func=$24load_method.9, args=[Var($38build_tuple.16, dtw_variants.py:47), Var($42load_attr.18, dtw_variants.py:47)], kws=(), vararg=None)
2021-10-21 20:30:47,627 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: cum_sum = $44call_method.19
2021-10-21 20:30:47,628 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const48.20 = const(float, 0.0)
2021-10-21 20:30:47,628 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const_0 = const(int, 0)
2021-10-21 20:30:47,628 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const_0.1 = const(int, 0)
2021-10-21 20:30:47,628 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const52.22 = build_tuple(items=[Var($const_0, dtw_variants.py:48), Var($const_0.1, dtw_variants.py:48)])
2021-10-21 20:30:47,628 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: cum_sum[(0, 0)] = $const48.20
2021-10-21 20:30:47,628 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56load_global.23 = global(range: <class 'range'>)
2021-10-21 20:30:47,628 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $60call_function.25 = call $56load_global.23(l1, func=$56load_global.23, args=[Var(l1, dtw_variants.py:45)], kws=(), vararg=None)
2021-10-21 20:30:47,628 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $62get_iter.26 = getiter(value=$60call_function.25)
2021-10-21 20:30:47,629 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi64.0 = $62get_iter.26
2021-10-21 20:30:47,629 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 64
2021-10-21 20:30:47,629 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 64
2021-10-21 20:30:47,629 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54C85A30>
2021-10-21 20:30:47,629 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64for_iter.1 = iternext(value=$phi64.0)
2021-10-21 20:30:47,629 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64for_iter.2 = pair_first(value=$64for_iter.1)
2021-10-21 20:30:47,629 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64for_iter.3 = pair_second(value=$64for_iter.1)
2021-10-21 20:30:47,629 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi66.1 = $64for_iter.2
2021-10-21 20:30:47,630 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $64for_iter.3, 66, 204
2021-10-21 20:30:47,630 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 66
2021-10-21 20:30:47,630 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54C85A30>
2021-10-21 20:30:47,630 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: i = $phi66.1
2021-10-21 20:30:47,630 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68load_global.2 = global(range: <class 'range'>)
2021-10-21 20:30:47,630 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72call_function.4 = call $68load_global.2(l2, func=$68load_global.2, args=[Var(l2, dtw_variants.py:46)], kws=(), vararg=None)
2021-10-21 20:30:47,630 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74get_iter.5 = getiter(value=$72call_function.4)
2021-10-21 20:30:47,630 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi76.1 = $74get_iter.5
2021-10-21 20:30:47,631 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 76
2021-10-21 20:30:47,631 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 76
2021-10-21 20:30:47,631 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54C85A30>
2021-10-21 20:30:47,631 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $76for_iter.2 = iternext(value=$phi76.1)
2021-10-21 20:30:47,631 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $76for_iter.3 = pair_first(value=$76for_iter.2)
2021-10-21 20:30:47,631 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $76for_iter.4 = pair_second(value=$76for_iter.2)
2021-10-21 20:30:47,631 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi78.2 = $76for_iter.3
2021-10-21 20:30:47,631 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $76for_iter.4, 78, 202
2021-10-21 20:30:47,631 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 78
2021-10-21 20:30:47,632 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54C85A30>
2021-10-21 20:30:47,632 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: j = $phi78.2
2021-10-21 20:30:47,632 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80load_global.3 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:47,632 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $82load_method.4 = getattr(value=$80load_global.3, attr=isfinite)
2021-10-21 20:30:47,632 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $90build_tuple.8 = build_tuple(items=[Var(i, dtw_variants.py:50), Var(j, dtw_variants.py:51)])
2021-10-21 20:30:47,632 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $92binary_subscr.9 = getitem(value=mask, index=$90build_tuple.8)
2021-10-21 20:30:47,632 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94call_method.10 = call $82load_method.4($92binary_subscr.9, func=$82load_method.4, args=[Var($92binary_subscr.9, dtw_variants.py:52)], kws=(), vararg=None)
2021-10-21 20:30:47,632 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2021-10-21 20:30:47,633 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94call_method.10, func=bool96, args=(Var($94call_method.10, dtw_variants.py:52),), kws=(), vararg=None)
2021-10-21 20:30:47,633 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 205
2021-10-21 20:30:47,633 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 98
2021-10-21 20:30:47,633 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54C85A30>
2021-10-21 20:30:47,633 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $98load_global.2 = global(_local_squared_dist: CPUDispatcher(<function _local_squared_dist at 0x0000016A52C17670>))
2021-10-21 20:30:47,633 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $104binary_subscr.5 = getitem(value=s1, index=i)
2021-10-21 20:30:47,633 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110binary_subscr.8 = getitem(value=s2, index=j)
2021-10-21 20:30:47,633 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $112call_function.9 = call $98load_global.2($104binary_subscr.5, $110binary_subscr.8, func=$98load_global.2, args=[Var($104binary_subscr.5, dtw_variants.py:53), Var($110binary_subscr.8, dtw_variants.py:53)], kws=(), vararg=None)
2021-10-21 20:30:47,634 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const118.12 = const(int, 1)
2021-10-21 20:30:47,634 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $120binary_add.13 = i + $const118.12
2021-10-21 20:30:47,634 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const124.15 = const(int, 1)
2021-10-21 20:30:47,634 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $126binary_add.16 = j + $const124.15
2021-10-21 20:30:47,634 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $128build_tuple.17 = build_tuple(items=[Var($120binary_add.13, dtw_variants.py:53), Var($126binary_add.16, dtw_variants.py:53)])
2021-10-21 20:30:47,634 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: cum_sum[$128build_tuple.17] = $112call_function.9
2021-10-21 20:30:47,634 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const136.20 = const(int, 1)
2021-10-21 20:30:47,634 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $138binary_add.21 = i + $const136.20
2021-10-21 20:30:47,635 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const142.23 = const(int, 1)
2021-10-21 20:30:47,635 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $144binary_add.24 = j + $const142.23
2021-10-21 20:30:47,635 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $146build_tuple.25 = build_tuple(items=[Var($138binary_add.21, dtw_variants.py:54), Var($144binary_add.24, dtw_variants.py:54)])
2021-10-21 20:30:47,635 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $150binary_subscr.28 = getitem(value=cum_sum, index=$146build_tuple.25)
2021-10-21 20:30:47,635 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $152load_global.29 = global(min: <built-in function min>)
2021-10-21 20:30:47,635 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const160.33 = const(int, 1)
2021-10-21 20:30:47,635 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $162binary_add.34 = j + $const160.33
2021-10-21 20:30:47,635 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $164build_tuple.35 = build_tuple(items=[Var(i, dtw_variants.py:50), Var($162binary_add.34, dtw_variants.py:54)])
2021-10-21 20:30:47,635 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $166binary_subscr.36 = getitem(value=cum_sum, index=$164build_tuple.35)
2021-10-21 20:30:47,636 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const172.39 = const(int, 1)
2021-10-21 20:30:47,636 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $174binary_add.40 = i + $const172.39
2021-10-21 20:30:47,636 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $178build_tuple.42 = build_tuple(items=[Var($174binary_add.40, dtw_variants.py:55), Var(j, dtw_variants.py:51)])
2021-10-21 20:30:47,636 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $180binary_subscr.43 = getitem(value=cum_sum, index=$178build_tuple.42)
2021-10-21 20:30:47,636 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $188build_tuple.47 = build_tuple(items=[Var(i, dtw_variants.py:50), Var(j, dtw_variants.py:51)])
2021-10-21 20:30:47,636 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $190binary_subscr.48 = getitem(value=cum_sum, index=$188build_tuple.47)
2021-10-21 20:30:47,636 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $192call_function.49 = call $152load_global.29($166binary_subscr.36, $180binary_subscr.43, $190binary_subscr.48, func=$152load_global.29, args=[Var($166binary_subscr.36, dtw_variants.py:54), Var($180binary_subscr.43, dtw_variants.py:55), Var($190binary_subscr.48, dtw_variants.py:56)], kws=(), vararg=None)
2021-10-21 20:30:47,636 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $194inplace_add.50 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.28, rhs=$192call_function.49, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:47,637 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: cum_sum[$146build_tuple.25] = $194inplace_add.50
2021-10-21 20:30:47,637 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 205
2021-10-21 20:30:47,637 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 202
2021-10-21 20:30:47,637 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54C85A30>
2021-10-21 20:30:47,637 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 64
2021-10-21 20:30:47,637 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 204
2021-10-21 20:30:47,637 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54C85A30>
2021-10-21 20:30:47,637 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const206.1 = const(int, 1)
2021-10-21 20:30:47,637 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const208.2 = const(NoneType, None)
2021-10-21 20:30:47,638 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $210build_slice.3 = global(slice: <class 'slice'>)
2021-10-21 20:30:47,638 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $210build_slice.4 = call $210build_slice.3($const206.1, $const208.2, func=$210build_slice.3, args=(Var($const206.1, dtw_variants.py:57), Var($const208.2, dtw_variants.py:57)), kws=(), vararg=None)
2021-10-21 20:30:47,638 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const212.5 = const(int, 1)
2021-10-21 20:30:47,638 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const214.6 = const(NoneType, None)
2021-10-21 20:30:47,638 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $216build_slice.7 = global(slice: <class 'slice'>)
2021-10-21 20:30:47,638 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $216build_slice.8 = call $216build_slice.7($const212.5, $const214.6, func=$216build_slice.7, args=(Var($const212.5, dtw_variants.py:57), Var($const214.6, dtw_variants.py:57)), kws=(), vararg=None)
2021-10-21 20:30:47,638 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $218build_tuple.9 = build_tuple(items=[Var($210build_slice.4, dtw_variants.py:57), Var($216build_slice.8, dtw_variants.py:57)])
2021-10-21 20:30:47,638 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $220binary_subscr.10 = static_getitem(value=cum_sum, index=(slice(1, None, None), slice(1, None, None)), index_var=$218build_tuple.9)
2021-10-21 20:30:47,639 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $222return_value.11 = cast(value=$220binary_subscr.10)
2021-10-21 20:30:47,639 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $222return_value.11
2021-10-21 20:30:47,639 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 205
2021-10-21 20:30:47,639 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54C85A30>
2021-10-21 20:30:47,639 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 76
2021-10-21 20:30:47,640 [10148] DEBUG    numba.core.ssa:141: [JupyterRequire] defs defaultdict(<class 'list'>,
            {'$104binary_subscr.5': [<numba.core.ir.Assign object at 0x0000016A54C6AAC0>],
             '$110binary_subscr.8': [<numba.core.ir.Assign object at 0x0000016A54C6AE80>],
             '$112call_function.9': [<numba.core.ir.Assign object at 0x0000016A54C6C070>],
             '$120binary_add.13': [<numba.core.ir.Assign object at 0x0000016A54C6C5B0>],
             '$126binary_add.16': [<numba.core.ir.Assign object at 0x0000016A54C6C9D0>],
             '$128build_tuple.17': [<numba.core.ir.Assign object at 0x0000016A54C6CB80>],
             '$138binary_add.21': [<numba.core.ir.Assign object at 0x0000016A54C6D190>],
             '$144binary_add.24': [<numba.core.ir.Assign object at 0x0000016A54C6D5B0>],
             '$146build_tuple.25': [<numba.core.ir.Assign object at 0x0000016A54C6D760>],
             '$14load_attr.5': [<numba.core.ir.Assign object at 0x0000016A54C5CF40>],
             '$150binary_subscr.28': [<numba.core.ir.Assign object at 0x0000016A54C6DA90>],
             '$152load_global.29': [<numba.core.ir.Assign object at 0x0000016A54C6DC10>],
             '$162binary_add.34': [<numba.core.ir.Assign object at 0x0000016A54C6F2B0>],
             '$164build_tuple.35': [<numba.core.ir.Assign object at 0x0000016A54C6F460>],
             '$166binary_subscr.36': [<numba.core.ir.Assign object at 0x0000016A54C6F5B0>],
             '$174binary_add.40': [<numba.core.ir.Assign object at 0x0000016A54C6FAF0>],
             '$178build_tuple.42': [<numba.core.ir.Assign object at 0x0000016A54C6FDC0>],
             '$180binary_subscr.43': [<numba.core.ir.Assign object at 0x0000016A54C6FF10>],
             '$188build_tuple.47': [<numba.core.ir.Assign object at 0x0000016A54C71460>],
             '$18binary_subscr.7': [<numba.core.ir.Assign object at 0x0000016A54C87DC0>],
             '$190binary_subscr.48': [<numba.core.ir.Assign object at 0x0000016A54C715B0>],
             '$192call_function.49': [<numba.core.ir.Assign object at 0x0000016A54C71760>],
             '$194inplace_add.50': [<numba.core.ir.Assign object at 0x0000016A54C718B0>],
             '$210build_slice.3': [<numba.core.ir.Assign object at 0x0000016A54C712E0>],
             '$210build_slice.4': [<numba.core.ir.Assign object at 0x0000016A54C71B80>],
             '$216build_slice.7': [<numba.core.ir.Assign object at 0x0000016A54C73040>],
             '$216build_slice.8': [<numba.core.ir.Assign object at 0x0000016A54C73160>],
             '$218build_tuple.9': [<numba.core.ir.Assign object at 0x0000016A54C732E0>],
             '$220binary_subscr.10': [<numba.core.ir.Assign object at 0x0000016A54C73760>],
             '$222return_value.11': [<numba.core.ir.Assign object at 0x0000016A54C735B0>],
             '$22load_global.8': [<numba.core.ir.Assign object at 0x0000016A54C61520>],
             '$24load_method.9': [<numba.core.ir.Assign object at 0x0000016A54C616A0>],
             '$30binary_add.12': [<numba.core.ir.Assign object at 0x0000016A54C61AC0>],
             '$36binary_add.15': [<numba.core.ir.Assign object at 0x0000016A54C61EE0>],
             '$38build_tuple.16': [<numba.core.ir.Assign object at 0x0000016A54C640D0>],
             '$40load_global.17': [<numba.core.ir.Assign object at 0x0000016A54C64220>],
             '$42load_attr.18': [<numba.core.ir.Assign object at 0x0000016A54C643A0>],
             '$44call_method.19': [<numba.core.ir.Assign object at 0x0000016A54C64550>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000016A54C5C880>],
             '$56load_global.23': [<numba.core.ir.Assign object at 0x0000016A54C64EE0>],
             '$60call_function.25': [<numba.core.ir.Assign object at 0x0000016A54C661F0>],
             '$62get_iter.26': [<numba.core.ir.Assign object at 0x0000016A54C66340>],
             '$64for_iter.1': [<numba.core.ir.Assign object at 0x0000016A54C664C0>],
             '$64for_iter.2': [<numba.core.ir.Assign object at 0x0000016A54C665E0>],
             '$64for_iter.3': [<numba.core.ir.Assign object at 0x0000016A54C66700>],
             '$68load_global.2': [<numba.core.ir.Assign object at 0x0000016A54C66B20>],
             '$72call_function.4': [<numba.core.ir.Assign object at 0x0000016A54C66DF0>],
             '$74get_iter.5': [<numba.core.ir.Assign object at 0x0000016A54C66F40>],
             '$76for_iter.2': [<numba.core.ir.Assign object at 0x0000016A54C682E0>],
             '$76for_iter.3': [<numba.core.ir.Assign object at 0x0000016A54C68400>],
             '$76for_iter.4': [<numba.core.ir.Assign object at 0x0000016A54C68520>],
             '$80load_global.3': [<numba.core.ir.Assign object at 0x0000016A54C68940>],
             '$82load_method.4': [<numba.core.ir.Assign object at 0x0000016A54C68AC0>],
             '$8binary_subscr.3': [<numba.core.ir.Assign object at 0x0000016A54C87C40>],
             '$90build_tuple.8': [<numba.core.ir.Assign object at 0x0000016A54C68FD0>],
             '$92binary_subscr.9': [<numba.core.ir.Assign object at 0x0000016A54C6A160>],
             '$94call_method.10': [<numba.core.ir.Assign object at 0x0000016A54C6A310>],
             '$96pred': [<numba.core.ir.Assign object at 0x0000016A54C6A580>],
             '$98load_global.2': [<numba.core.ir.Assign object at 0x0000016A54C6A700>],
             '$const118.12': [<numba.core.ir.Assign object at 0x0000016A54C6C430>],
             '$const124.15': [<numba.core.ir.Assign object at 0x0000016A54C6C850>],
             '$const136.20': [<numba.core.ir.Assign object at 0x0000016A54C6CFD0>],
             '$const142.23': [<numba.core.ir.Assign object at 0x0000016A54C6D430>],
             '$const16.6': [<numba.core.ir.Assign object at 0x0000016A54C61100>],
             '$const160.33': [<numba.core.ir.Assign object at 0x0000016A54C6F130>],
             '$const172.39': [<numba.core.ir.Assign object at 0x0000016A54C6F970>],
             '$const206.1': [<numba.core.ir.Assign object at 0x0000016A54C6DE80>],
             '$const208.2': [<numba.core.ir.Assign object at 0x0000016A54C6FC40>],
             '$const212.5': [<numba.core.ir.Assign object at 0x0000016A54C71CD0>],
             '$const214.6': [<numba.core.ir.Assign object at 0x0000016A54C71E50>],
             '$const28.11': [<numba.core.ir.Assign object at 0x0000016A54C61940>],
             '$const34.14': [<numba.core.ir.Assign object at 0x0000016A54C61D60>],
             '$const48.20': [<numba.core.ir.Assign object at 0x0000016A54C647C0>],
             '$const52.22': [<numba.core.ir.Assign object at 0x0000016A54C64CA0>],
             '$const6.2': [<numba.core.ir.Assign object at 0x0000016A54C5CA00>],
             '$const_0': [<numba.core.ir.Assign object at 0x0000016A54C64A90>],
             '$const_0.1': [<numba.core.ir.Assign object at 0x0000016A54C64BB0>],
             '$phi64.0': [<numba.core.ir.Assign object at 0x0000016A54C61BE0>],
             '$phi66.1': [<numba.core.ir.Assign object at 0x0000016A54C663D0>],
             '$phi76.1': [<numba.core.ir.Assign object at 0x0000016A54C66C70>],
             '$phi78.2': [<numba.core.ir.Assign object at 0x0000016A54C681F0>],
             'bool96': [<numba.core.ir.Assign object at 0x0000016A54C6A460>],
             'cum_sum': [<numba.core.ir.Assign object at 0x0000016A54C64640>],
             'i': [<numba.core.ir.Assign object at 0x0000016A54C669A0>],
             'j': [<numba.core.ir.Assign object at 0x0000016A54C687C0>],
             'l1': [<numba.core.ir.Assign object at 0x0000016A54C5CCA0>],
             'l2': [<numba.core.ir.Assign object at 0x0000016A54C613A0>],
             'mask': [<numba.core.ir.Assign object at 0x0000016A54C5C5E0>],
             's1': [<numba.core.ir.Assign object at 0x0000016A54C5C3A0>],
             's2': [<numba.core.ir.Assign object at 0x0000016A54C5C4C0>]})
2021-10-21 20:30:47,641 [10148] DEBUG    numba.core.ssa:143: [JupyterRequire] SSA violators set()
2021-10-21 20:30:47,661 [10148] DEBUG    numba.core.byteflow:74: [JupyterRequire] bytecode dump:
>          0	NOP(arg=None, lineno=17)
           2	LOAD_CONST(arg=1, lineno=17)
           4	STORE_FAST(arg=2, lineno=17)
           6	LOAD_GLOBAL(arg=0, lineno=18)
           8	LOAD_FAST(arg=0, lineno=18)
          10	LOAD_ATTR(arg=1, lineno=18)
          12	LOAD_CONST(arg=2, lineno=18)
          14	BINARY_SUBSCR(arg=None, lineno=18)
          16	CALL_FUNCTION(arg=1, lineno=18)
          18	GET_ITER(arg=None, lineno=18)
>         20	FOR_ITER(arg=32, lineno=18)
          22	STORE_FAST(arg=3, lineno=18)
          24	LOAD_FAST(arg=0, lineno=19)
          26	LOAD_FAST(arg=3, lineno=19)
          28	BINARY_SUBSCR(arg=None, lineno=19)
          30	LOAD_FAST(arg=1, lineno=19)
          32	LOAD_FAST(arg=3, lineno=19)
          34	BINARY_SUBSCR(arg=None, lineno=19)
          36	BINARY_SUBTRACT(arg=None, lineno=19)
          38	STORE_FAST(arg=4, lineno=19)
          40	LOAD_FAST(arg=2, lineno=20)
          42	LOAD_FAST(arg=4, lineno=20)
          44	LOAD_FAST(arg=4, lineno=20)
          46	BINARY_MULTIPLY(arg=None, lineno=20)
          48	INPLACE_ADD(arg=None, lineno=20)
          50	STORE_FAST(arg=2, lineno=20)
          52	JUMP_ABSOLUTE(arg=20, lineno=20)
>         54	LOAD_FAST(arg=2, lineno=21)
          56	RETURN_VALUE(arg=None, lineno=21)
2021-10-21 20:30:47,661 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=0 nstack_initial=0)])
2021-10-21 20:30:47,661 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:47,661 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=0, inst=NOP(arg=None, lineno=17)
2021-10-21 20:30:47,661 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:47,662 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=17)
2021-10-21 20:30:47,662 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:47,662 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=4, inst=STORE_FAST(arg=2, lineno=17)
2021-10-21 20:30:47,662 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$const2.0']
2021-10-21 20:30:47,662 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=18)
2021-10-21 20:30:47,662 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:47,663 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=18)
2021-10-21 20:30:47,663 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$6load_global.1']
2021-10-21 20:30:47,663 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=10, inst=LOAD_ATTR(arg=1, lineno=18)
2021-10-21 20:30:47,663 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$6load_global.1', '$x8.2']
2021-10-21 20:30:47,663 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=18)
2021-10-21 20:30:47,664 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$6load_global.1', '$10load_attr.3']
2021-10-21 20:30:47,664 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=18)
2021-10-21 20:30:47,664 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$6load_global.1', '$10load_attr.3', '$const12.4']
2021-10-21 20:30:47,664 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=18)
2021-10-21 20:30:47,664 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$6load_global.1', '$14binary_subscr.5']
2021-10-21 20:30:47,665 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=18, inst=GET_ITER(arg=None, lineno=18)
2021-10-21 20:30:47,665 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16call_function.6']
2021-10-21 20:30:47,665 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=20, stack=('$18get_iter.7',), blockstack=(), npush=0)]
2021-10-21 20:30:47,665 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=20 nstack_initial=1)])
2021-10-21 20:30:47,665 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi20.0']
2021-10-21 20:30:47,665 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=20, inst=FOR_ITER(arg=32, lineno=18)
2021-10-21 20:30:47,666 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi20.0']
2021-10-21 20:30:47,666 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=(), npush=0)]
2021-10-21 20:30:47,666 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
2021-10-21 20:30:47,666 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:47,666 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=21)
2021-10-21 20:30:47,667 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:47,667 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=21)
2021-10-21 20:30:47,667 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$dist54.0']
2021-10-21 20:30:47,667 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2021-10-21 20:30:47,667 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=22 nstack_initial=2)])
2021-10-21 20:30:47,668 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi22.0', '$phi22.1']
2021-10-21 20:30:47,668 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=22, inst=STORE_FAST(arg=3, lineno=18)
2021-10-21 20:30:47,668 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$phi22.1']
2021-10-21 20:30:47,668 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=19)
2021-10-21 20:30:47,668 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0']
2021-10-21 20:30:47,669 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=19)
2021-10-21 20:30:47,669 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$x24.2']
2021-10-21 20:30:47,669 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=19)
2021-10-21 20:30:47,669 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$x24.2', '$di26.3']
2021-10-21 20:30:47,669 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=19)
2021-10-21 20:30:47,669 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$28binary_subscr.4']
2021-10-21 20:30:47,670 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=19)
2021-10-21 20:30:47,670 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$28binary_subscr.4', '$y30.5']
2021-10-21 20:30:47,670 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=19)
2021-10-21 20:30:47,670 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$28binary_subscr.4', '$y30.5', '$di32.6']
2021-10-21 20:30:47,670 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=36, inst=BINARY_SUBTRACT(arg=None, lineno=19)
2021-10-21 20:30:47,671 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$28binary_subscr.4', '$34binary_subscr.7']
2021-10-21 20:30:47,671 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=38, inst=STORE_FAST(arg=4, lineno=19)
2021-10-21 20:30:47,671 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$36binary_subtract.8']
2021-10-21 20:30:47,671 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=40, inst=LOAD_FAST(arg=2, lineno=20)
2021-10-21 20:30:47,671 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0']
2021-10-21 20:30:47,671 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=42, inst=LOAD_FAST(arg=4, lineno=20)
2021-10-21 20:30:47,671 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$dist40.9']
2021-10-21 20:30:47,672 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=20)
2021-10-21 20:30:47,672 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$dist40.9', '$diff42.10']
2021-10-21 20:30:47,672 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=46, inst=BINARY_MULTIPLY(arg=None, lineno=20)
2021-10-21 20:30:47,672 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$dist40.9', '$diff42.10', '$diff44.11']
2021-10-21 20:30:47,672 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=20)
2021-10-21 20:30:47,672 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$dist40.9', '$46binary_multiply.12']
2021-10-21 20:30:47,672 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=50, inst=STORE_FAST(arg=2, lineno=20)
2021-10-21 20:30:47,672 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$48inplace_add.13']
2021-10-21 20:30:47,673 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=52, inst=JUMP_ABSOLUTE(arg=20, lineno=20)
2021-10-21 20:30:47,673 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0']
2021-10-21 20:30:47,673 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=20, stack=('$phi22.0',), blockstack=(), npush=0)]
2021-10-21 20:30:47,673 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=20 nstack_initial=1)])
2021-10-21 20:30:47,673 [10148] DEBUG    numba.core.byteflow:163: [JupyterRequire] -------------------------Prune PHIs-------------------------
2021-10-21 20:30:47,673 [10148] DEBUG    numba.core.byteflow:232: [JupyterRequire] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=54 nstack_initial=0): set()})
2021-10-21 20:30:47,673 [10148] DEBUG    numba.core.byteflow:189: [JupyterRequire] defmap: {'$phi20.0': State(pc_initial=0 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
2021-10-21 20:30:47,674 [10148] DEBUG    numba.core.byteflow:190: [JupyterRequire] phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))}})
2021-10-21 20:30:47,674 [10148] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.0': {('$18get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))}})
2021-10-21 20:30:47,675 [10148] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))}})
2021-10-21 20:30:47,675 [10148] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))}})
2021-10-21 20:30:47,675 [10148] DEBUG    numba.core.byteflow:220: [JupyterRequire] keep phismap: {'$phi20.0': {('$18get_iter.7', State(pc_initial=0 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
2021-10-21 20:30:47,676 [10148] DEBUG    numba.core.byteflow:226: [JupyterRequire] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi20.0': '$18get_iter.7'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
2021-10-21 20:30:47,676 [10148] DEBUG    numba.core.byteflow:236: [JupyterRequire] ----------------------DONE Prune PHIs-----------------------
2021-10-21 20:30:47,676 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$6load_global.1'}), (8, {'res': '$x8.2'}), (10, {'item': '$x8.2', 'res': '$10load_attr.3'}), (12, {'res': '$const12.4'}), (14, {'index': '$const12.4', 'target': '$10load_attr.3', 'res': '$14binary_subscr.5'}), (16, {'func': '$6load_global.1', 'args': ['$14binary_subscr.5'], 'res': '$16call_function.6'}), (18, {'value': '$16call_function.6', 'res': '$18get_iter.7'})), outgoing_phis={'$phi20.0': '$18get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.7',)})
2021-10-21 20:30:47,677 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 22: ('$phi20.0', '$20for_iter.2')})
2021-10-21 20:30:47,677 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'value': '$phi22.1'}), (24, {'res': '$x24.2'}), (26, {'res': '$di26.3'}), (28, {'index': '$di26.3', 'target': '$x24.2', 'res': '$28binary_subscr.4'}), (30, {'res': '$y30.5'}), (32, {'res': '$di32.6'}), (34, {'index': '$di32.6', 'target': '$y30.5', 'res': '$34binary_subscr.7'}), (36, {'lhs': '$28binary_subscr.4', 'rhs': '$34binary_subscr.7', 'res': '$36binary_subtract.8'}), (38, {'value': '$36binary_subtract.8'}), (40, {'res': '$dist40.9'}), (42, {'res': '$diff42.10'}), (44, {'res': '$diff44.11'}), (46, {'lhs': '$diff42.10', 'rhs': '$diff44.11', 'res': '$46binary_multiply.12'}), (48, {'lhs': '$dist40.9', 'rhs': '$46binary_multiply.12', 'res': '$48inplace_add.13'}), (50, {'value': '$48inplace_add.13'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$phi22.0',)})
2021-10-21 20:30:47,677 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$dist54.0'}), (56, {'retval': '$dist54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2021-10-21 20:30:47,678 [10148] DEBUG    numba.core.interpreter:149: [JupyterRequire] label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $const2.0 = const(float, 0.0)            ['$const2.0']
    dist = $const2.0                         ['$const2.0', 'dist']
    $6load_global.1 = global(range: <class 'range'>) ['$6load_global.1']
    $10load_attr.3 = getattr(value=x, attr=shape) ['$10load_attr.3', 'x']
    $const12.4 = const(int, 0)               ['$const12.4']
    $14binary_subscr.5 = getitem(value=$10load_attr.3, index=$const12.4) ['$10load_attr.3', '$14binary_subscr.5', '$const12.4']
    $16call_function.6 = call $6load_global.1($14binary_subscr.5, func=$6load_global.1, args=[Var($14binary_subscr.5, dtw_variants.py:18)], kws=(), vararg=None) ['$14binary_subscr.5', '$16call_function.6', '$6load_global.1']
    $18get_iter.7 = getiter(value=$16call_function.6) ['$16call_function.6', '$18get_iter.7']
    $phi20.0 = $18get_iter.7                 ['$18get_iter.7', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 54             ['$20for_iter.3']
label 22:
    di = $phi22.1                            ['$phi22.1', 'di']
    $28binary_subscr.4 = getitem(value=x, index=di) ['$28binary_subscr.4', 'di', 'x']
    $34binary_subscr.7 = getitem(value=y, index=di) ['$34binary_subscr.7', 'di', 'y']
    $36binary_subtract.8 = $28binary_subscr.4 - $34binary_subscr.7 ['$28binary_subscr.4', '$34binary_subscr.7', '$36binary_subtract.8']
    diff = $36binary_subtract.8              ['$36binary_subtract.8', 'diff']
    $46binary_multiply.12 = diff * diff      ['$46binary_multiply.12', 'diff', 'diff']
    $48inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dist, rhs=$46binary_multiply.12, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_multiply.12', '$48inplace_add.13', 'dist']
    dist = $48inplace_add.13                 ['$48inplace_add.13', 'dist']
    jump 20                                  []
label 54:
    $56return_value.1 = cast(value=dist)     ['$56return_value.1', 'dist']
    return $56return_value.1                 ['$56return_value.1']

2021-10-21 20:30:47,685 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 0
2021-10-21 20:30:47,685 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54C872E0>
2021-10-21 20:30:47,685 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: x = arg(0, name=x)
2021-10-21 20:30:47,685 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: y = arg(1, name=y)
2021-10-21 20:30:47,686 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const2.0 = const(float, 0.0)
2021-10-21 20:30:47,686 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: dist = $const2.0
2021-10-21 20:30:47,686 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $6load_global.1 = global(range: <class 'range'>)
2021-10-21 20:30:47,686 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10load_attr.3 = getattr(value=x, attr=shape)
2021-10-21 20:30:47,686 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const12.4 = const(int, 0)
2021-10-21 20:30:47,686 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $14binary_subscr.5 = static_getitem(value=$10load_attr.3, index=0, index_var=$const12.4)
2021-10-21 20:30:47,686 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.6 = call $6load_global.1($14binary_subscr.5, func=$6load_global.1, args=[Var($14binary_subscr.5, dtw_variants.py:18)], kws=(), vararg=None)
2021-10-21 20:30:47,686 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $18get_iter.7 = getiter(value=$16call_function.6)
2021-10-21 20:30:47,687 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi20.0 = $18get_iter.7
2021-10-21 20:30:47,687 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 20
2021-10-21 20:30:47,687 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 20
2021-10-21 20:30:47,687 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54C872E0>
2021-10-21 20:30:47,687 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2021-10-21 20:30:47,687 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2021-10-21 20:30:47,687 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2021-10-21 20:30:47,687 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi22.1 = $20for_iter.2
2021-10-21 20:30:47,688 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $20for_iter.3, 22, 54
2021-10-21 20:30:47,688 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 22
2021-10-21 20:30:47,688 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54C872E0>
2021-10-21 20:30:47,688 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: di = $phi22.1
2021-10-21 20:30:47,688 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $28binary_subscr.4 = getitem(value=x, index=di)
2021-10-21 20:30:47,688 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $34binary_subscr.7 = getitem(value=y, index=di)
2021-10-21 20:30:47,688 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $36binary_subtract.8 = $28binary_subscr.4 - $34binary_subscr.7
2021-10-21 20:30:47,688 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: diff = $36binary_subtract.8
2021-10-21 20:30:47,688 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46binary_multiply.12 = diff * diff
2021-10-21 20:30:47,689 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $48inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dist, rhs=$46binary_multiply.12, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:47,689 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: dist = $48inplace_add.13
2021-10-21 20:30:47,689 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 20
2021-10-21 20:30:47,689 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 54
2021-10-21 20:30:47,689 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54C872E0>
2021-10-21 20:30:47,689 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=dist)
2021-10-21 20:30:47,689 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2021-10-21 20:30:47,690 [10148] DEBUG    numba.core.ssa:141: [JupyterRequire] defs defaultdict(<class 'list'>,
            {'$10load_attr.3': [<numba.core.ir.Assign object at 0x0000016A54CD5BB0>],
             '$14binary_subscr.5': [<numba.core.ir.Assign object at 0x0000016A54CE0550>],
             '$16call_function.6': [<numba.core.ir.Assign object at 0x0000016A54CD30A0>],
             '$18get_iter.7': [<numba.core.ir.Assign object at 0x0000016A54CD31F0>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x0000016A54CD3550>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x0000016A54CD3670>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x0000016A54CD3790>],
             '$28binary_subscr.4': [<numba.core.ir.Assign object at 0x0000016A54CD3DF0>],
             '$34binary_subscr.7': [<numba.core.ir.Assign object at 0x0000016A54CD91F0>],
             '$36binary_subtract.8': [<numba.core.ir.Assign object at 0x0000016A54CD9370>],
             '$46binary_multiply.12': [<numba.core.ir.Assign object at 0x0000016A54CD9970>],
             '$48inplace_add.13': [<numba.core.ir.Assign object at 0x0000016A54CD9AF0>],
             '$56return_value.1': [<numba.core.ir.Assign object at 0x0000016A54CD9D30>],
             '$6load_global.1': [<numba.core.ir.Assign object at 0x0000016A54CD5340>],
             '$const12.4': [<numba.core.ir.Assign object at 0x0000016A54CD5D30>],
             '$const2.0': [<numba.core.ir.Assign object at 0x0000016A54CD5880>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x0000016A54C87520>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x0000016A54CD3460>],
             'di': [<numba.core.ir.Assign object at 0x0000016A54CD3A30>],
             'diff': [<numba.core.ir.Assign object at 0x0000016A54CD9490>],
             'dist': [<numba.core.ir.Assign object at 0x0000016A54CD5640>,
                      <numba.core.ir.Assign object at 0x0000016A54CD9BB0>],
             'x': [<numba.core.ir.Assign object at 0x0000016A54C87580>],
             'y': [<numba.core.ir.Assign object at 0x0000016A54CD5040>]})
2021-10-21 20:30:47,690 [10148] DEBUG    numba.core.ssa:143: [JupyterRequire] SSA violators {'dist'}
2021-10-21 20:30:47,690 [10148] DEBUG    numba.core.ssa:49: [JupyterRequire] Fix SSA violator on var dist
2021-10-21 20:30:47,690 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2021-10-21 20:30:47,691 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54CE0B50>
2021-10-21 20:30:47,691 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: x = arg(0, name=x)
2021-10-21 20:30:47,691 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: y = arg(1, name=y)
2021-10-21 20:30:47,691 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const2.0 = const(float, 0.0)
2021-10-21 20:30:47,692 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: dist = $const2.0
2021-10-21 20:30:47,692 [10148] DEBUG    numba.core.ssa:256: [JupyterRequire] first assign: dist
2021-10-21 20:30:47,692 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: dist = $const2.0
2021-10-21 20:30:47,693 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $6load_global.1 = global(range: <class 'range'>)
2021-10-21 20:30:47,693 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10load_attr.3 = getattr(value=x, attr=shape)
2021-10-21 20:30:47,694 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const12.4 = const(int, 0)
2021-10-21 20:30:47,695 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $14binary_subscr.5 = static_getitem(value=$10load_attr.3, index=0, index_var=$const12.4)
2021-10-21 20:30:47,696 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.6 = call $6load_global.1($14binary_subscr.5, func=$6load_global.1, args=[Var($14binary_subscr.5, dtw_variants.py:18)], kws=(), vararg=None)
2021-10-21 20:30:47,697 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $18get_iter.7 = getiter(value=$16call_function.6)
2021-10-21 20:30:47,698 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi20.0 = $18get_iter.7
2021-10-21 20:30:47,698 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 20
2021-10-21 20:30:47,698 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2021-10-21 20:30:47,698 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54CE0B50>
2021-10-21 20:30:47,699 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2021-10-21 20:30:47,699 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2021-10-21 20:30:47,699 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2021-10-21 20:30:47,699 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi22.1 = $20for_iter.2
2021-10-21 20:30:47,699 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $20for_iter.3, 22, 54
2021-10-21 20:30:47,699 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 22
2021-10-21 20:30:47,700 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54CE0B50>
2021-10-21 20:30:47,700 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: di = $phi22.1
2021-10-21 20:30:47,700 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $28binary_subscr.4 = getitem(value=x, index=di)
2021-10-21 20:30:47,700 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $34binary_subscr.7 = getitem(value=y, index=di)
2021-10-21 20:30:47,700 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $36binary_subtract.8 = $28binary_subscr.4 - $34binary_subscr.7
2021-10-21 20:30:47,701 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: diff = $36binary_subtract.8
2021-10-21 20:30:47,701 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46binary_multiply.12 = diff * diff
2021-10-21 20:30:47,701 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $48inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dist, rhs=$46binary_multiply.12, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:47,701 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: dist = $48inplace_add.13
2021-10-21 20:30:47,701 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: dist.1 = $48inplace_add.13
2021-10-21 20:30:47,702 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 20
2021-10-21 20:30:47,702 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2021-10-21 20:30:47,702 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54CE0B50>
2021-10-21 20:30:47,702 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=dist)
2021-10-21 20:30:47,702 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2021-10-21 20:30:47,702 [10148] DEBUG    numba.core.ssa:55: [JupyterRequire] Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000016A54CE0B20>],
             22: [<numba.core.ir.Assign object at 0x0000016A54CE0DC0>]})
2021-10-21 20:30:47,703 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2021-10-21 20:30:47,703 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54CE0B50>
2021-10-21 20:30:47,703 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: x = arg(0, name=x)
2021-10-21 20:30:47,703 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: y = arg(1, name=y)
2021-10-21 20:30:47,703 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const2.0 = const(float, 0.0)
2021-10-21 20:30:47,703 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: dist = $const2.0
2021-10-21 20:30:47,703 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $6load_global.1 = global(range: <class 'range'>)
2021-10-21 20:30:47,703 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10load_attr.3 = getattr(value=x, attr=shape)
2021-10-21 20:30:47,704 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const12.4 = const(int, 0)
2021-10-21 20:30:47,704 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $14binary_subscr.5 = static_getitem(value=$10load_attr.3, index=0, index_var=$const12.4)
2021-10-21 20:30:47,704 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.6 = call $6load_global.1($14binary_subscr.5, func=$6load_global.1, args=[Var($14binary_subscr.5, dtw_variants.py:18)], kws=(), vararg=None)
2021-10-21 20:30:47,704 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $18get_iter.7 = getiter(value=$16call_function.6)
2021-10-21 20:30:47,704 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi20.0 = $18get_iter.7
2021-10-21 20:30:47,704 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 20
2021-10-21 20:30:47,704 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2021-10-21 20:30:47,704 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54CE0B50>
2021-10-21 20:30:47,705 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2021-10-21 20:30:47,705 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2021-10-21 20:30:47,705 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2021-10-21 20:30:47,705 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi22.1 = $20for_iter.2
2021-10-21 20:30:47,705 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $20for_iter.3, 22, 54
2021-10-21 20:30:47,705 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 22
2021-10-21 20:30:47,705 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54CE0B50>
2021-10-21 20:30:47,705 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: di = $phi22.1
2021-10-21 20:30:47,705 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $28binary_subscr.4 = getitem(value=x, index=di)
2021-10-21 20:30:47,706 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $34binary_subscr.7 = getitem(value=y, index=di)
2021-10-21 20:30:47,706 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $36binary_subtract.8 = $28binary_subscr.4 - $34binary_subscr.7
2021-10-21 20:30:47,706 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: diff = $36binary_subtract.8
2021-10-21 20:30:47,706 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46binary_multiply.12 = diff * diff
2021-10-21 20:30:47,706 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $48inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dist, rhs=$46binary_multiply.12, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:47,706 [10148] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='dist' stmt=$48inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dist, rhs=$46binary_multiply.12, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:47,706 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 22
2021-10-21 20:30:47,706 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 20 from label 22
2021-10-21 20:30:47,707 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 20
2021-10-21 20:30:47,707 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 20
2021-10-21 20:30:47,707 [10148] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node dist.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
2021-10-21 20:30:47,707 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 0
2021-10-21 20:30:47,707 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def dist = $const2.0
2021-10-21 20:30:47,707 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 22
2021-10-21 20:30:47,707 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def dist.1 = $48inplace_add.13
2021-10-21 20:30:47,707 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $48inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dist.2, rhs=$46binary_multiply.12, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:47,708 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: dist.1 = $48inplace_add.13
2021-10-21 20:30:47,708 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 20
2021-10-21 20:30:47,708 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2021-10-21 20:30:47,708 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54CE0B50>
2021-10-21 20:30:47,708 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=dist)
2021-10-21 20:30:47,708 [10148] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='dist' stmt=$56return_value.1 = cast(value=dist)
2021-10-21 20:30:47,708 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 54
2021-10-21 20:30:47,708 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 20 from label 54
2021-10-21 20:30:47,709 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 20
2021-10-21 20:30:47,709 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $56return_value.1 = cast(value=dist.2)
2021-10-21 20:30:47,709 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2021-10-21 20:30:48,220 [10148] DEBUG    numba.core.byteflow:74: [JupyterRequire] bytecode dump:
>          0	NOP(arg=None, lineno=3538)
           2	LOAD_GLOBAL(arg=0, lineno=3538)
           4	LOAD_METHOD(arg=1, lineno=3538)
           6	LOAD_FAST(arg=0, lineno=3538)
           8	LOAD_GLOBAL(arg=2, lineno=3538)
          10	LOAD_FAST(arg=1, lineno=3538)
          12	CALL_FUNCTION(arg=1, lineno=3538)
          14	CALL_METHOD(arg=2, lineno=3538)
          16	STORE_FAST(arg=2, lineno=3538)
          18	LOAD_GLOBAL(arg=0, lineno=3539)
          20	LOAD_METHOD(arg=3, lineno=3539)
          22	LOAD_FAST(arg=2, lineno=3539)
          24	LOAD_ATTR(arg=4, lineno=3539)
          26	CALL_METHOD(arg=1, lineno=3539)
          28	GET_ITER(arg=None, lineno=3539)
>         30	FOR_ITER(arg=12, lineno=3539)
          32	STORE_FAST(arg=3, lineno=3539)
          34	LOAD_FAST(arg=1, lineno=3540)
          36	LOAD_FAST(arg=2, lineno=3540)
          38	LOAD_FAST(arg=3, lineno=3540)
          40	STORE_SUBSCR(arg=None, lineno=3540)
          42	JUMP_ABSOLUTE(arg=30, lineno=3540)
>         44	LOAD_FAST(arg=2, lineno=3541)
          46	RETURN_VALUE(arg=None, lineno=3541)
2021-10-21 20:30:48,220 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=0 nstack_initial=0)])
2021-10-21 20:30:48,220 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:48,221 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=0, inst=NOP(arg=None, lineno=3538)
2021-10-21 20:30:48,221 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:48,221 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3538)
2021-10-21 20:30:48,221 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:48,221 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3538)
2021-10-21 20:30:48,222 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$2load_global.0']
2021-10-21 20:30:48,222 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3538)
2021-10-21 20:30:48,222 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_method.1']
2021-10-21 20:30:48,222 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=8, inst=LOAD_GLOBAL(arg=2, lineno=3538)
2021-10-21 20:30:48,222 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_method.1', '$shape6.2']
2021-10-21 20:30:48,222 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=3538)
2021-10-21 20:30:48,223 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_method.1', '$shape6.2', '$8load_global.3']
2021-10-21 20:30:48,223 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=12, inst=CALL_FUNCTION(arg=1, lineno=3538)
2021-10-21 20:30:48,223 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_method.1', '$shape6.2', '$8load_global.3', '$value10.4']
2021-10-21 20:30:48,223 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=14, inst=CALL_METHOD(arg=2, lineno=3538)
2021-10-21 20:30:48,223 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_method.1', '$shape6.2', '$12call_function.5']
2021-10-21 20:30:48,223 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=16, inst=STORE_FAST(arg=2, lineno=3538)
2021-10-21 20:30:48,223 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$14call_method.6']
2021-10-21 20:30:48,224 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=3539)
2021-10-21 20:30:48,224 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:48,224 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=20, inst=LOAD_METHOD(arg=3, lineno=3539)
2021-10-21 20:30:48,224 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$18load_global.7']
2021-10-21 20:30:48,224 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=3539)
2021-10-21 20:30:48,224 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$20load_method.8']
2021-10-21 20:30:48,224 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=24, inst=LOAD_ATTR(arg=4, lineno=3539)
2021-10-21 20:30:48,225 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$20load_method.8', '$arr22.9']
2021-10-21 20:30:48,225 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=3539)
2021-10-21 20:30:48,225 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$20load_method.8', '$24load_attr.10']
2021-10-21 20:30:48,225 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=28, inst=GET_ITER(arg=None, lineno=3539)
2021-10-21 20:30:48,225 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$26call_method.11']
2021-10-21 20:30:48,225 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=('$28get_iter.12',), blockstack=(), npush=0)]
2021-10-21 20:30:48,226 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=1)])
2021-10-21 20:30:48,226 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi30.0']
2021-10-21 20:30:48,226 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=30, inst=FOR_ITER(arg=12, lineno=3539)
2021-10-21 20:30:48,226 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi30.0']
2021-10-21 20:30:48,226 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=(), npush=0)]
2021-10-21 20:30:48,226 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
2021-10-21 20:30:48,226 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:48,227 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=3541)
2021-10-21 20:30:48,227 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:48,227 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=3541)
2021-10-21 20:30:48,227 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$arr44.0']
2021-10-21 20:30:48,227 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2021-10-21 20:30:48,227 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=32 nstack_initial=2)])
2021-10-21 20:30:48,227 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi32.0', '$phi32.1']
2021-10-21 20:30:48,227 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=32, inst=STORE_FAST(arg=3, lineno=3539)
2021-10-21 20:30:48,227 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi32.0', '$phi32.1']
2021-10-21 20:30:48,228 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=3540)
2021-10-21 20:30:48,228 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi32.0']
2021-10-21 20:30:48,228 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=3540)
2021-10-21 20:30:48,228 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi32.0', '$value34.2']
2021-10-21 20:30:48,228 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=38, inst=LOAD_FAST(arg=3, lineno=3540)
2021-10-21 20:30:48,228 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi32.0', '$value34.2', '$arr36.3']
2021-10-21 20:30:48,228 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=40, inst=STORE_SUBSCR(arg=None, lineno=3540)
2021-10-21 20:30:48,228 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi32.0', '$value34.2', '$arr36.3', '$idx38.4']
2021-10-21 20:30:48,229 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=42, inst=JUMP_ABSOLUTE(arg=30, lineno=3540)
2021-10-21 20:30:48,229 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi32.0']
2021-10-21 20:30:48,229 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=('$phi32.0',), blockstack=(), npush=0)]
2021-10-21 20:30:48,229 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=1)])
2021-10-21 20:30:48,229 [10148] DEBUG    numba.core.byteflow:163: [JupyterRequire] -------------------------Prune PHIs-------------------------
2021-10-21 20:30:48,229 [10148] DEBUG    numba.core.byteflow:232: [JupyterRequire] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=44 nstack_initial=0): set()})
2021-10-21 20:30:48,230 [10148] DEBUG    numba.core.byteflow:189: [JupyterRequire] defmap: {'$phi30.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1)}
2021-10-21 20:30:48,230 [10148] DEBUG    numba.core.byteflow:190: [JupyterRequire] phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.12',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=2))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2021-10-21 20:30:48,230 [10148] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.12',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.0': {('$28get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2021-10-21 20:30:48,230 [10148] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2021-10-21 20:30:48,231 [10148] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2021-10-21 20:30:48,231 [10148] DEBUG    numba.core.byteflow:220: [JupyterRequire] keep phismap: {'$phi30.0': {('$28get_iter.12', State(pc_initial=0 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))}}
2021-10-21 20:30:48,231 [10148] DEBUG    numba.core.byteflow:226: [JupyterRequire] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi30.0': '$28get_iter.12'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'}})
2021-10-21 20:30:48,231 [10148] DEBUG    numba.core.byteflow:236: [JupyterRequire] ----------------------DONE Prune PHIs-----------------------
2021-10-21 20:30:48,232 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$8load_global.3'}), (10, {'res': '$value10.4'}), (12, {'func': '$8load_global.3', 'args': ['$value10.4'], 'res': '$12call_function.5'}), (14, {'func': '$4load_method.1', 'args': ['$shape6.2', '$12call_function.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$18load_global.7'}), (20, {'item': '$18load_global.7', 'res': '$20load_method.8'}), (22, {'res': '$arr22.9'}), (24, {'item': '$arr22.9', 'res': '$24load_attr.10'}), (26, {'func': '$20load_method.8', 'args': ['$24load_attr.10'], 'res': '$26call_method.11'}), (28, {'value': '$26call_method.11', 'res': '$28get_iter.12'})), outgoing_phis={'$phi30.0': '$28get_iter.12'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.12',)})
2021-10-21 20:30:48,232 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 32: ('$phi30.0', '$30for_iter.2')})
2021-10-21 20:30:48,232 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'value': '$phi32.1'}), (34, {'res': '$value34.2'}), (36, {'res': '$arr36.3'}), (38, {'res': '$idx38.4'}), (40, {'target': '$arr36.3', 'index': '$idx38.4', 'value': '$value34.2'}), (42, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi32.0',)})
2021-10-21 20:30:48,232 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$arr44.0'}), (46, {'retval': '$arr44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2021-10-21 20:30:48,233 [10148] DEBUG    numba.core.interpreter:149: [JupyterRequire] label 0:
    shape = arg(0, name=shape)               ['shape']
    value = arg(1, name=value)               ['value']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    $8load_global.3 = global(type: <class 'type'>) ['$8load_global.3']
    $12call_function.5 = call $8load_global.3(value, func=$8load_global.3, args=[Var(value, arrayobj.py:3538)], kws=(), vararg=None) ['$12call_function.5', '$8load_global.3', 'value']
    $14call_method.6 = call $4load_method.1(shape, $12call_function.5, func=$4load_method.1, args=[Var(shape, arrayobj.py:3538), Var($12call_function.5, arrayobj.py:3538)], kws=(), vararg=None) ['$12call_function.5', '$14call_method.6', '$4load_method.1', 'shape']
    arr = $14call_method.6                   ['$14call_method.6', 'arr']
    $18load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$18load_global.7']
    $20load_method.8 = getattr(value=$18load_global.7, attr=ndindex) ['$18load_global.7', '$20load_method.8']
    $24load_attr.10 = getattr(value=arr, attr=shape) ['$24load_attr.10', 'arr']
    $26call_method.11 = call $20load_method.8($24load_attr.10, func=$20load_method.8, args=[Var($24load_attr.10, arrayobj.py:3539)], kws=(), vararg=None) ['$20load_method.8', '$24load_attr.10', '$26call_method.11']
    $28get_iter.12 = getiter(value=$26call_method.11) ['$26call_method.11', '$28get_iter.12']
    $phi30.0 = $28get_iter.12                ['$28get_iter.12', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 44             ['$30for_iter.3']
label 32:
    idx = $phi32.1                           ['$phi32.1', 'idx']
    arr[idx] = value                         ['arr', 'idx', 'value']
    jump 30                                  []
label 44:
    $46return_value.1 = cast(value=arr)      ['$46return_value.1', 'arr']
    return $46return_value.1                 ['$46return_value.1']

2021-10-21 20:30:48,247 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 0
2021-10-21 20:30:48,248 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A544113D0>
2021-10-21 20:30:48,248 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: shape = arg(0, name=shape)
2021-10-21 20:30:48,248 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: value = arg(1, name=value)
2021-10-21 20:30:48,248 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:48,249 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
2021-10-21 20:30:48,249 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8load_global.3 = global(type: <class 'type'>)
2021-10-21 20:30:48,249 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12call_function.5 = call $8load_global.3(value, func=$8load_global.3, args=[Var(value, arrayobj.py:3538)], kws=(), vararg=None)
2021-10-21 20:30:48,249 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $14call_method.6 = call $4load_method.1(shape, $12call_function.5, func=$4load_method.1, args=[Var(shape, arrayobj.py:3538), Var($12call_function.5, arrayobj.py:3538)], kws=(), vararg=None)
2021-10-21 20:30:48,249 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arr = $14call_method.6
2021-10-21 20:30:48,250 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $18load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:48,250 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=ndindex)
2021-10-21 20:30:48,250 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24load_attr.10 = getattr(value=arr, attr=shape)
2021-10-21 20:30:48,250 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26call_method.11 = call $20load_method.8($24load_attr.10, func=$20load_method.8, args=[Var($24load_attr.10, arrayobj.py:3539)], kws=(), vararg=None)
2021-10-21 20:30:48,250 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $28get_iter.12 = getiter(value=$26call_method.11)
2021-10-21 20:30:48,250 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi30.0 = $28get_iter.12
2021-10-21 20:30:48,251 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 30
2021-10-21 20:30:48,251 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 30
2021-10-21 20:30:48,251 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A544113D0>
2021-10-21 20:30:48,251 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $30for_iter.1 = iternext(value=$phi30.0)
2021-10-21 20:30:48,251 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
2021-10-21 20:30:48,251 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
2021-10-21 20:30:48,251 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi32.1 = $30for_iter.2
2021-10-21 20:30:48,252 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $30for_iter.3, 32, 44
2021-10-21 20:30:48,252 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 32
2021-10-21 20:30:48,252 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A544113D0>
2021-10-21 20:30:48,252 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $phi32.1
2021-10-21 20:30:48,252 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arr[idx] = value
2021-10-21 20:30:48,252 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 30
2021-10-21 20:30:48,252 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 44
2021-10-21 20:30:48,252 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A544113D0>
2021-10-21 20:30:48,253 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46return_value.1 = cast(value=arr)
2021-10-21 20:30:48,253 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $46return_value.1
2021-10-21 20:30:48,253 [10148] DEBUG    numba.core.ssa:141: [JupyterRequire] defs defaultdict(<class 'list'>,
            {'$12call_function.5': [<numba.core.ir.Assign object at 0x0000016A5451EC70>],
             '$14call_method.6': [<numba.core.ir.Assign object at 0x0000016A5451E310>],
             '$18load_global.7': [<numba.core.ir.Assign object at 0x0000016A5451EB20>],
             '$20load_method.8': [<numba.core.ir.Assign object at 0x0000016A5440EF40>],
             '$24load_attr.10': [<numba.core.ir.Assign object at 0x0000016A54426FD0>],
             '$26call_method.11': [<numba.core.ir.Assign object at 0x0000016A544268B0>],
             '$28get_iter.12': [<numba.core.ir.Assign object at 0x0000016A54426130>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x0000016A5451E8E0>],
             '$30for_iter.1': [<numba.core.ir.Assign object at 0x0000016A544268E0>],
             '$30for_iter.2': [<numba.core.ir.Assign object at 0x0000016A54426640>],
             '$30for_iter.3': [<numba.core.ir.Assign object at 0x0000016A544264C0>],
             '$46return_value.1': [<numba.core.ir.Assign object at 0x0000016A54417A60>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x0000016A5451EA90>],
             '$8load_global.3': [<numba.core.ir.Assign object at 0x0000016A5451E700>],
             '$phi30.0': [<numba.core.ir.Assign object at 0x0000016A5451EE50>],
             '$phi32.1': [<numba.core.ir.Assign object at 0x0000016A54426B20>],
             'arr': [<numba.core.ir.Assign object at 0x0000016A5451E520>],
             'idx': [<numba.core.ir.Assign object at 0x0000016A54426E20>],
             'shape': [<numba.core.ir.Assign object at 0x0000016A54533D60>],
             'value': [<numba.core.ir.Assign object at 0x0000016A54533340>]})
2021-10-21 20:30:48,253 [10148] DEBUG    numba.core.ssa:143: [JupyterRequire] SSA violators set()
2021-10-21 20:30:49,067 [10148] DEBUG    numba.core.byteflow:74: [JupyterRequire] bytecode dump:
>          0	NOP(arg=None, lineno=87)
           2	LOAD_FAST(arg=0, lineno=87)
           4	LOAD_ATTR(arg=0, lineno=87)
           6	UNPACK_SEQUENCE(arg=2, lineno=87)
           8	STORE_FAST(arg=1, lineno=87)
          10	STORE_FAST(arg=2, lineno=87)
          12	LOAD_FAST(arg=1, lineno=88)
          14	LOAD_CONST(arg=1, lineno=88)
          16	BINARY_SUBTRACT(arg=None, lineno=88)
          18	LOAD_FAST(arg=2, lineno=88)
          20	LOAD_CONST(arg=1, lineno=88)
          22	BINARY_SUBTRACT(arg=None, lineno=88)
          24	BUILD_TUPLE(arg=2, lineno=88)
          26	BUILD_LIST(arg=1, lineno=88)
          28	STORE_FAST(arg=3, lineno=88)
>         30	LOAD_FAST(arg=3, lineno=89)
          32	LOAD_CONST(arg=2, lineno=89)
          34	BINARY_SUBSCR(arg=None, lineno=89)
          36	LOAD_CONST(arg=3, lineno=89)
          38	COMPARE_OP(arg=3, lineno=89)
          40	POP_JUMP_IF_FALSE(arg=256, lineno=89)
          42	LOAD_FAST(arg=3, lineno=90)
          44	LOAD_CONST(arg=2, lineno=90)
          46	BINARY_SUBSCR(arg=None, lineno=90)
          48	UNPACK_SEQUENCE(arg=2, lineno=90)
          50	STORE_FAST(arg=4, lineno=90)
          52	STORE_FAST(arg=5, lineno=90)
          54	LOAD_FAST(arg=4, lineno=91)
          56	LOAD_CONST(arg=4, lineno=91)
          58	COMPARE_OP(arg=2, lineno=91)
          60	POP_JUMP_IF_FALSE(arg=82, lineno=91)
          62	LOAD_FAST(arg=3, lineno=92)
          64	LOAD_METHOD(arg=1, lineno=92)
          66	LOAD_CONST(arg=4, lineno=92)
          68	LOAD_FAST(arg=5, lineno=92)
          70	LOAD_CONST(arg=1, lineno=92)
          72	BINARY_SUBTRACT(arg=None, lineno=92)
          74	BUILD_TUPLE(arg=2, lineno=92)
          76	CALL_METHOD(arg=1, lineno=92)
          78	POP_TOP(arg=None, lineno=92)
          80	JUMP_ABSOLUTE(arg=30, lineno=92)
>         82	LOAD_FAST(arg=5, lineno=93)
          84	LOAD_CONST(arg=4, lineno=93)
          86	COMPARE_OP(arg=2, lineno=93)
          88	POP_JUMP_IF_FALSE(arg=110, lineno=93)
          90	LOAD_FAST(arg=3, lineno=94)
          92	LOAD_METHOD(arg=1, lineno=94)
          94	LOAD_FAST(arg=4, lineno=94)
          96	LOAD_CONST(arg=1, lineno=94)
          98	BINARY_SUBTRACT(arg=None, lineno=94)
         100	LOAD_CONST(arg=4, lineno=94)
         102	BUILD_TUPLE(arg=2, lineno=94)
         104	CALL_METHOD(arg=1, lineno=94)
         106	POP_TOP(arg=None, lineno=94)
         108	JUMP_ABSOLUTE(arg=30, lineno=94)
>        110	LOAD_GLOBAL(arg=2, lineno=96)
         112	LOAD_METHOD(arg=3, lineno=96)
         114	LOAD_FAST(arg=0, lineno=96)
         116	LOAD_FAST(arg=4, lineno=96)
         118	LOAD_CONST(arg=1, lineno=96)
         120	BINARY_SUBTRACT(arg=None, lineno=96)
         122	BINARY_SUBSCR(arg=None, lineno=96)
         124	LOAD_FAST(arg=5, lineno=96)
         126	LOAD_CONST(arg=1, lineno=96)
         128	BINARY_SUBTRACT(arg=None, lineno=96)
         130	BINARY_SUBSCR(arg=None, lineno=96)
         132	LOAD_FAST(arg=0, lineno=97)
         134	LOAD_FAST(arg=4, lineno=97)
         136	LOAD_CONST(arg=1, lineno=97)
         138	BINARY_SUBTRACT(arg=None, lineno=97)
         140	BINARY_SUBSCR(arg=None, lineno=97)
         142	LOAD_FAST(arg=5, lineno=97)
         144	BINARY_SUBSCR(arg=None, lineno=97)
         146	LOAD_FAST(arg=0, lineno=98)
         148	LOAD_FAST(arg=4, lineno=98)
         150	BINARY_SUBSCR(arg=None, lineno=98)
         152	LOAD_FAST(arg=5, lineno=98)
         154	LOAD_CONST(arg=1, lineno=98)
         156	BINARY_SUBTRACT(arg=None, lineno=98)
         158	BINARY_SUBSCR(arg=None, lineno=98)
         160	BUILD_LIST(arg=3, lineno=96)
         162	CALL_METHOD(arg=1, lineno=96)
         164	STORE_FAST(arg=6, lineno=96)
         166	LOAD_GLOBAL(arg=2, lineno=99)
         168	LOAD_METHOD(arg=4, lineno=99)
         170	LOAD_FAST(arg=6, lineno=99)
         172	CALL_METHOD(arg=1, lineno=99)
         174	STORE_FAST(arg=7, lineno=99)
         176	LOAD_FAST(arg=7, lineno=100)
         178	LOAD_CONST(arg=4, lineno=100)
         180	COMPARE_OP(arg=2, lineno=100)
         182	POP_JUMP_IF_FALSE(arg=208, lineno=100)
         184	LOAD_FAST(arg=3, lineno=101)
         186	LOAD_METHOD(arg=1, lineno=101)
         188	LOAD_FAST(arg=4, lineno=101)
         190	LOAD_CONST(arg=1, lineno=101)
         192	BINARY_SUBTRACT(arg=None, lineno=101)
         194	LOAD_FAST(arg=5, lineno=101)
         196	LOAD_CONST(arg=1, lineno=101)
         198	BINARY_SUBTRACT(arg=None, lineno=101)
         200	BUILD_TUPLE(arg=2, lineno=101)
         202	CALL_METHOD(arg=1, lineno=101)
         204	POP_TOP(arg=None, lineno=101)
         206	JUMP_ABSOLUTE(arg=30, lineno=101)
>        208	LOAD_FAST(arg=7, lineno=102)
         210	LOAD_CONST(arg=1, lineno=102)
         212	COMPARE_OP(arg=2, lineno=102)
         214	POP_JUMP_IF_FALSE(arg=236, lineno=102)
         216	LOAD_FAST(arg=3, lineno=103)
         218	LOAD_METHOD(arg=1, lineno=103)
         220	LOAD_FAST(arg=4, lineno=103)
         222	LOAD_CONST(arg=1, lineno=103)
         224	BINARY_SUBTRACT(arg=None, lineno=103)
         226	LOAD_FAST(arg=5, lineno=103)
         228	BUILD_TUPLE(arg=2, lineno=103)
         230	CALL_METHOD(arg=1, lineno=103)
         232	POP_TOP(arg=None, lineno=103)
         234	JUMP_ABSOLUTE(arg=30, lineno=103)
>        236	LOAD_FAST(arg=3, lineno=105)
         238	LOAD_METHOD(arg=1, lineno=105)
         240	LOAD_FAST(arg=4, lineno=105)
         242	LOAD_FAST(arg=5, lineno=105)
         244	LOAD_CONST(arg=1, lineno=105)
         246	BINARY_SUBTRACT(arg=None, lineno=105)
         248	BUILD_TUPLE(arg=2, lineno=105)
         250	CALL_METHOD(arg=1, lineno=105)
         252	POP_TOP(arg=None, lineno=105)
         254	JUMP_ABSOLUTE(arg=30, lineno=105)
>        256	LOAD_FAST(arg=3, lineno=106)
         258	LOAD_CONST(arg=0, lineno=106)
         260	LOAD_CONST(arg=0, lineno=106)
         262	LOAD_CONST(arg=2, lineno=106)
         264	BUILD_SLICE(arg=3, lineno=106)
         266	BINARY_SUBSCR(arg=None, lineno=106)
         268	RETURN_VALUE(arg=None, lineno=106)
2021-10-21 20:30:49,067 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=0 nstack_initial=0)])
2021-10-21 20:30:49,067 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,067 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=0, inst=NOP(arg=None, lineno=87)
2021-10-21 20:30:49,067 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,068 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=87)
2021-10-21 20:30:49,068 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,068 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=87)
2021-10-21 20:30:49,068 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$acc_cost_mat2.0']
2021-10-21 20:30:49,068 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=6, inst=UNPACK_SEQUENCE(arg=2, lineno=87)
2021-10-21 20:30:49,068 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_attr.1']
2021-10-21 20:30:49,068 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=8, inst=STORE_FAST(arg=1, lineno=87)
2021-10-21 20:30:49,069 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$6unpack_sequence.3', '$6unpack_sequence.2']
2021-10-21 20:30:49,069 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=10, inst=STORE_FAST(arg=2, lineno=87)
2021-10-21 20:30:49,069 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$6unpack_sequence.3']
2021-10-21 20:30:49,069 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=88)
2021-10-21 20:30:49,069 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,069 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=88)
2021-10-21 20:30:49,070 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$sz112.5']
2021-10-21 20:30:49,070 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=16, inst=BINARY_SUBTRACT(arg=None, lineno=88)
2021-10-21 20:30:49,070 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$sz112.5', '$const14.6']
2021-10-21 20:30:49,070 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=88)
2021-10-21 20:30:49,070 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16binary_subtract.7']
2021-10-21 20:30:49,070 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=20, inst=LOAD_CONST(arg=1, lineno=88)
2021-10-21 20:30:49,071 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16binary_subtract.7', '$sz218.8']
2021-10-21 20:30:49,071 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=88)
2021-10-21 20:30:49,071 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16binary_subtract.7', '$sz218.8', '$const20.9']
2021-10-21 20:30:49,071 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=24, inst=BUILD_TUPLE(arg=2, lineno=88)
2021-10-21 20:30:49,071 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16binary_subtract.7', '$22binary_subtract.10']
2021-10-21 20:30:49,071 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=26, inst=BUILD_LIST(arg=1, lineno=88)
2021-10-21 20:30:49,071 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24build_tuple.11']
2021-10-21 20:30:49,071 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=28, inst=STORE_FAST(arg=3, lineno=88)
2021-10-21 20:30:49,071 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$26build_list.12']
2021-10-21 20:30:49,072 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2021-10-21 20:30:49,072 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=0)])
2021-10-21 20:30:49,072 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,072 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=89)
2021-10-21 20:30:49,072 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,072 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=89)
2021-10-21 20:30:49,072 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path30.0']
2021-10-21 20:30:49,072 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=89)
2021-10-21 20:30:49,073 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path30.0', '$const32.1']
2021-10-21 20:30:49,073 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=89)
2021-10-21 20:30:49,073 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$34binary_subscr.2']
2021-10-21 20:30:49,073 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=38, inst=COMPARE_OP(arg=3, lineno=89)
2021-10-21 20:30:49,073 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$34binary_subscr.2', '$const36.3']
2021-10-21 20:30:49,073 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=256, lineno=89)
2021-10-21 20:30:49,074 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$38compare_op.4']
2021-10-21 20:30:49,074 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=256, stack=(), blockstack=(), npush=0)]
2021-10-21 20:30:49,074 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=256 nstack_initial=0)])
2021-10-21 20:30:49,074 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,074 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=90)
2021-10-21 20:30:49,075 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,075 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=44, inst=LOAD_CONST(arg=2, lineno=90)
2021-10-21 20:30:49,075 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path42.0']
2021-10-21 20:30:49,077 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=90)
2021-10-21 20:30:49,078 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path42.0', '$const44.1']
2021-10-21 20:30:49,079 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=48, inst=UNPACK_SEQUENCE(arg=2, lineno=90)
2021-10-21 20:30:49,079 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$46binary_subscr.2']
2021-10-21 20:30:49,079 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=50, inst=STORE_FAST(arg=4, lineno=90)
2021-10-21 20:30:49,079 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$48unpack_sequence.4', '$48unpack_sequence.3']
2021-10-21 20:30:49,080 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=52, inst=STORE_FAST(arg=5, lineno=90)
2021-10-21 20:30:49,080 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$48unpack_sequence.4']
2021-10-21 20:30:49,080 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=54, inst=LOAD_FAST(arg=4, lineno=91)
2021-10-21 20:30:49,080 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,080 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=56, inst=LOAD_CONST(arg=4, lineno=91)
2021-10-21 20:30:49,080 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$i54.6']
2021-10-21 20:30:49,081 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=58, inst=COMPARE_OP(arg=2, lineno=91)
2021-10-21 20:30:49,081 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$i54.6', '$const56.7']
2021-10-21 20:30:49,081 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=82, lineno=91)
2021-10-21 20:30:49,081 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$58compare_op.8']
2021-10-21 20:30:49,082 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=(), blockstack=(), npush=0)]
2021-10-21 20:30:49,082 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=256 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=82 nstack_initial=0)])
2021-10-21 20:30:49,082 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,083 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=256, inst=LOAD_FAST(arg=3, lineno=106)
2021-10-21 20:30:49,083 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,083 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=258, inst=LOAD_CONST(arg=0, lineno=106)
2021-10-21 20:30:49,083 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path256.0']
2021-10-21 20:30:49,083 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=260, inst=LOAD_CONST(arg=0, lineno=106)
2021-10-21 20:30:49,083 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path256.0', '$const258.1']
2021-10-21 20:30:49,084 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=262, inst=LOAD_CONST(arg=2, lineno=106)
2021-10-21 20:30:49,084 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path256.0', '$const258.1', '$const260.2']
2021-10-21 20:30:49,084 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=264, inst=BUILD_SLICE(arg=3, lineno=106)
2021-10-21 20:30:49,084 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path256.0', '$const258.1', '$const260.2', '$const262.3']
2021-10-21 20:30:49,084 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=266, inst=BINARY_SUBSCR(arg=None, lineno=106)
2021-10-21 20:30:49,084 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path256.0', '$264build_slice.5']
2021-10-21 20:30:49,084 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=268, inst=RETURN_VALUE(arg=None, lineno=106)
2021-10-21 20:30:49,084 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$266binary_subscr.6']
2021-10-21 20:30:49,085 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2021-10-21 20:30:49,085 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=82 nstack_initial=0)])
2021-10-21 20:30:49,085 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,085 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=62, inst=LOAD_FAST(arg=3, lineno=92)
2021-10-21 20:30:49,085 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,085 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=64, inst=LOAD_METHOD(arg=1, lineno=92)
2021-10-21 20:30:49,085 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path62.0']
2021-10-21 20:30:49,086 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=66, inst=LOAD_CONST(arg=4, lineno=92)
2021-10-21 20:30:49,086 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$64load_method.1']
2021-10-21 20:30:49,086 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=92)
2021-10-21 20:30:49,086 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$64load_method.1', '$const66.2']
2021-10-21 20:30:49,086 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=70, inst=LOAD_CONST(arg=1, lineno=92)
2021-10-21 20:30:49,086 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$64load_method.1', '$const66.2', '$j68.3']
2021-10-21 20:30:49,087 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=72, inst=BINARY_SUBTRACT(arg=None, lineno=92)
2021-10-21 20:30:49,087 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$64load_method.1', '$const66.2', '$j68.3', '$const70.4']
2021-10-21 20:30:49,087 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=74, inst=BUILD_TUPLE(arg=2, lineno=92)
2021-10-21 20:30:49,087 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$64load_method.1', '$const66.2', '$72binary_subtract.5']
2021-10-21 20:30:49,087 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=76, inst=CALL_METHOD(arg=1, lineno=92)
2021-10-21 20:30:49,088 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$64load_method.1', '$74build_tuple.6']
2021-10-21 20:30:49,088 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=78, inst=POP_TOP(arg=None, lineno=92)
2021-10-21 20:30:49,088 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$76call_method.7']
2021-10-21 20:30:49,088 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=80, inst=JUMP_ABSOLUTE(arg=30, lineno=92)
2021-10-21 20:30:49,088 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,088 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2021-10-21 20:30:49,088 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2021-10-21 20:30:49,089 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,089 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=82, inst=LOAD_FAST(arg=5, lineno=93)
2021-10-21 20:30:49,089 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,089 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=84, inst=LOAD_CONST(arg=4, lineno=93)
2021-10-21 20:30:49,089 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$j82.0']
2021-10-21 20:30:49,090 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=86, inst=COMPARE_OP(arg=2, lineno=93)
2021-10-21 20:30:49,091 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$j82.0', '$const84.1']
2021-10-21 20:30:49,093 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=88, inst=POP_JUMP_IF_FALSE(arg=110, lineno=93)
2021-10-21 20:30:49,096 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$86compare_op.2']
2021-10-21 20:30:49,098 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=110, stack=(), blockstack=(), npush=0)]
2021-10-21 20:30:49,099 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=90 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2021-10-21 20:30:49,100 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2021-10-21 20:30:49,101 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,101 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=90, inst=LOAD_FAST(arg=3, lineno=94)
2021-10-21 20:30:49,101 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,102 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=94)
2021-10-21 20:30:49,102 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path90.0']
2021-10-21 20:30:49,102 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=94)
2021-10-21 20:30:49,102 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$92load_method.1']
2021-10-21 20:30:49,102 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=96, inst=LOAD_CONST(arg=1, lineno=94)
2021-10-21 20:30:49,103 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$92load_method.1', '$i94.2']
2021-10-21 20:30:49,103 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=98, inst=BINARY_SUBTRACT(arg=None, lineno=94)
2021-10-21 20:30:49,103 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$92load_method.1', '$i94.2', '$const96.3']
2021-10-21 20:30:49,103 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=100, inst=LOAD_CONST(arg=4, lineno=94)
2021-10-21 20:30:49,103 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$92load_method.1', '$98binary_subtract.4']
2021-10-21 20:30:49,103 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=102, inst=BUILD_TUPLE(arg=2, lineno=94)
2021-10-21 20:30:49,103 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$92load_method.1', '$98binary_subtract.4', '$const100.5']
2021-10-21 20:30:49,104 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=104, inst=CALL_METHOD(arg=1, lineno=94)
2021-10-21 20:30:49,104 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$92load_method.1', '$102build_tuple.6']
2021-10-21 20:30:49,104 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=106, inst=POP_TOP(arg=None, lineno=94)
2021-10-21 20:30:49,104 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$104call_method.7']
2021-10-21 20:30:49,104 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=108, inst=JUMP_ABSOLUTE(arg=30, lineno=94)
2021-10-21 20:30:49,104 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,104 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2021-10-21 20:30:49,105 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=110 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2021-10-21 20:30:49,105 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,105 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=110, inst=LOAD_GLOBAL(arg=2, lineno=96)
2021-10-21 20:30:49,105 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,105 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=112, inst=LOAD_METHOD(arg=3, lineno=96)
2021-10-21 20:30:49,105 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$110load_global.0']
2021-10-21 20:30:49,106 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=114, inst=LOAD_FAST(arg=0, lineno=96)
2021-10-21 20:30:49,106 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1']
2021-10-21 20:30:49,106 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=116, inst=LOAD_FAST(arg=4, lineno=96)
2021-10-21 20:30:49,106 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$acc_cost_mat114.2']
2021-10-21 20:30:49,106 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=118, inst=LOAD_CONST(arg=1, lineno=96)
2021-10-21 20:30:49,106 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$acc_cost_mat114.2', '$i116.3']
2021-10-21 20:30:49,106 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=120, inst=BINARY_SUBTRACT(arg=None, lineno=96)
2021-10-21 20:30:49,107 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$acc_cost_mat114.2', '$i116.3', '$const118.4']
2021-10-21 20:30:49,107 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=122, inst=BINARY_SUBSCR(arg=None, lineno=96)
2021-10-21 20:30:49,107 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$acc_cost_mat114.2', '$120binary_subtract.5']
2021-10-21 20:30:49,107 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=96)
2021-10-21 20:30:49,108 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$122binary_subscr.6']
2021-10-21 20:30:49,108 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=96)
2021-10-21 20:30:49,108 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$122binary_subscr.6', '$j124.7']
2021-10-21 20:30:49,108 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=128, inst=BINARY_SUBTRACT(arg=None, lineno=96)
2021-10-21 20:30:49,108 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$122binary_subscr.6', '$j124.7', '$const126.8']
2021-10-21 20:30:49,108 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=96)
2021-10-21 20:30:49,108 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$122binary_subscr.6', '$128binary_subtract.9']
2021-10-21 20:30:49,108 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=132, inst=LOAD_FAST(arg=0, lineno=97)
2021-10-21 20:30:49,109 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10']
2021-10-21 20:30:49,109 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=134, inst=LOAD_FAST(arg=4, lineno=97)
2021-10-21 20:30:49,109 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$acc_cost_mat132.11']
2021-10-21 20:30:49,109 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=136, inst=LOAD_CONST(arg=1, lineno=97)
2021-10-21 20:30:49,109 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$acc_cost_mat132.11', '$i134.12']
2021-10-21 20:30:49,109 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=138, inst=BINARY_SUBTRACT(arg=None, lineno=97)
2021-10-21 20:30:49,109 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$acc_cost_mat132.11', '$i134.12', '$const136.13']
2021-10-21 20:30:49,109 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=140, inst=BINARY_SUBSCR(arg=None, lineno=97)
2021-10-21 20:30:49,110 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$acc_cost_mat132.11', '$138binary_subtract.14']
2021-10-21 20:30:49,110 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=142, inst=LOAD_FAST(arg=5, lineno=97)
2021-10-21 20:30:49,110 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$140binary_subscr.15']
2021-10-21 20:30:49,110 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=144, inst=BINARY_SUBSCR(arg=None, lineno=97)
2021-10-21 20:30:49,110 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$140binary_subscr.15', '$j142.16']
2021-10-21 20:30:49,110 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=146, inst=LOAD_FAST(arg=0, lineno=98)
2021-10-21 20:30:49,110 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17']
2021-10-21 20:30:49,110 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=148, inst=LOAD_FAST(arg=4, lineno=98)
2021-10-21 20:30:49,111 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17', '$acc_cost_mat146.18']
2021-10-21 20:30:49,111 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=150, inst=BINARY_SUBSCR(arg=None, lineno=98)
2021-10-21 20:30:49,111 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17', '$acc_cost_mat146.18', '$i148.19']
2021-10-21 20:30:49,111 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=152, inst=LOAD_FAST(arg=5, lineno=98)
2021-10-21 20:30:49,111 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17', '$150binary_subscr.20']
2021-10-21 20:30:49,111 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=154, inst=LOAD_CONST(arg=1, lineno=98)
2021-10-21 20:30:49,111 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17', '$150binary_subscr.20', '$j152.21']
2021-10-21 20:30:49,112 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=156, inst=BINARY_SUBTRACT(arg=None, lineno=98)
2021-10-21 20:30:49,112 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17', '$150binary_subscr.20', '$j152.21', '$const154.22']
2021-10-21 20:30:49,112 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=158, inst=BINARY_SUBSCR(arg=None, lineno=98)
2021-10-21 20:30:49,112 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17', '$150binary_subscr.20', '$156binary_subtract.23']
2021-10-21 20:30:49,112 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=160, inst=BUILD_LIST(arg=3, lineno=96)
2021-10-21 20:30:49,112 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17', '$158binary_subscr.24']
2021-10-21 20:30:49,112 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=162, inst=CALL_METHOD(arg=1, lineno=96)
2021-10-21 20:30:49,112 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$160build_list.25']
2021-10-21 20:30:49,112 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=164, inst=STORE_FAST(arg=6, lineno=96)
2021-10-21 20:30:49,113 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$162call_method.26']
2021-10-21 20:30:49,113 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=166, inst=LOAD_GLOBAL(arg=2, lineno=99)
2021-10-21 20:30:49,113 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,113 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=168, inst=LOAD_METHOD(arg=4, lineno=99)
2021-10-21 20:30:49,113 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$166load_global.27']
2021-10-21 20:30:49,113 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=170, inst=LOAD_FAST(arg=6, lineno=99)
2021-10-21 20:30:49,113 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$168load_method.28']
2021-10-21 20:30:49,113 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=172, inst=CALL_METHOD(arg=1, lineno=99)
2021-10-21 20:30:49,114 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$168load_method.28', '$arr170.29']
2021-10-21 20:30:49,114 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=174, inst=STORE_FAST(arg=7, lineno=99)
2021-10-21 20:30:49,114 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$172call_method.30']
2021-10-21 20:30:49,114 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=176, inst=LOAD_FAST(arg=7, lineno=100)
2021-10-21 20:30:49,114 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,114 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=178, inst=LOAD_CONST(arg=4, lineno=100)
2021-10-21 20:30:49,114 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$argmin176.31']
2021-10-21 20:30:49,114 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=180, inst=COMPARE_OP(arg=2, lineno=100)
2021-10-21 20:30:49,115 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$argmin176.31', '$const178.32']
2021-10-21 20:30:49,115 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=182, inst=POP_JUMP_IF_FALSE(arg=208, lineno=100)
2021-10-21 20:30:49,115 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$180compare_op.33']
2021-10-21 20:30:49,115 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=184, stack=(), blockstack=(), npush=0), Edge(pc=208, stack=(), blockstack=(), npush=0)]
2021-10-21 20:30:49,115 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=208 nstack_initial=0)])
2021-10-21 20:30:49,115 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=208 nstack_initial=0)])
2021-10-21 20:30:49,115 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,115 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=184, inst=LOAD_FAST(arg=3, lineno=101)
2021-10-21 20:30:49,115 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,116 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=186, inst=LOAD_METHOD(arg=1, lineno=101)
2021-10-21 20:30:49,116 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path184.0']
2021-10-21 20:30:49,116 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=188, inst=LOAD_FAST(arg=4, lineno=101)
2021-10-21 20:30:49,116 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1']
2021-10-21 20:30:49,116 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=190, inst=LOAD_CONST(arg=1, lineno=101)
2021-10-21 20:30:49,116 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1', '$i188.2']
2021-10-21 20:30:49,116 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=192, inst=BINARY_SUBTRACT(arg=None, lineno=101)
2021-10-21 20:30:49,116 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1', '$i188.2', '$const190.3']
2021-10-21 20:30:49,117 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=194, inst=LOAD_FAST(arg=5, lineno=101)
2021-10-21 20:30:49,117 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1', '$192binary_subtract.4']
2021-10-21 20:30:49,117 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=196, inst=LOAD_CONST(arg=1, lineno=101)
2021-10-21 20:30:49,117 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1', '$192binary_subtract.4', '$j194.5']
2021-10-21 20:30:49,117 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=198, inst=BINARY_SUBTRACT(arg=None, lineno=101)
2021-10-21 20:30:49,117 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1', '$192binary_subtract.4', '$j194.5', '$const196.6']
2021-10-21 20:30:49,117 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=200, inst=BUILD_TUPLE(arg=2, lineno=101)
2021-10-21 20:30:49,117 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1', '$192binary_subtract.4', '$198binary_subtract.7']
2021-10-21 20:30:49,118 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=202, inst=CALL_METHOD(arg=1, lineno=101)
2021-10-21 20:30:49,118 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1', '$200build_tuple.8']
2021-10-21 20:30:49,118 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=204, inst=POP_TOP(arg=None, lineno=101)
2021-10-21 20:30:49,118 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$202call_method.9']
2021-10-21 20:30:49,118 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=206, inst=JUMP_ABSOLUTE(arg=30, lineno=101)
2021-10-21 20:30:49,118 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,118 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2021-10-21 20:30:49,118 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=208 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2021-10-21 20:30:49,119 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,119 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=208, inst=LOAD_FAST(arg=7, lineno=102)
2021-10-21 20:30:49,119 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,119 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=210, inst=LOAD_CONST(arg=1, lineno=102)
2021-10-21 20:30:49,119 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$argmin208.0']
2021-10-21 20:30:49,119 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=212, inst=COMPARE_OP(arg=2, lineno=102)
2021-10-21 20:30:49,119 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$argmin208.0', '$const210.1']
2021-10-21 20:30:49,119 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=214, inst=POP_JUMP_IF_FALSE(arg=236, lineno=102)
2021-10-21 20:30:49,119 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$212compare_op.2']
2021-10-21 20:30:49,120 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=216, stack=(), blockstack=(), npush=0), Edge(pc=236, stack=(), blockstack=(), npush=0)]
2021-10-21 20:30:49,120 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=216 nstack_initial=0), State(pc_initial=236 nstack_initial=0)])
2021-10-21 20:30:49,120 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=216 nstack_initial=0), State(pc_initial=236 nstack_initial=0)])
2021-10-21 20:30:49,120 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,121 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=216, inst=LOAD_FAST(arg=3, lineno=103)
2021-10-21 20:30:49,121 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,121 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=218, inst=LOAD_METHOD(arg=1, lineno=103)
2021-10-21 20:30:49,121 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path216.0']
2021-10-21 20:30:49,121 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=220, inst=LOAD_FAST(arg=4, lineno=103)
2021-10-21 20:30:49,121 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$218load_method.1']
2021-10-21 20:30:49,122 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=222, inst=LOAD_CONST(arg=1, lineno=103)
2021-10-21 20:30:49,122 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$218load_method.1', '$i220.2']
2021-10-21 20:30:49,122 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=224, inst=BINARY_SUBTRACT(arg=None, lineno=103)
2021-10-21 20:30:49,122 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$218load_method.1', '$i220.2', '$const222.3']
2021-10-21 20:30:49,122 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=226, inst=LOAD_FAST(arg=5, lineno=103)
2021-10-21 20:30:49,123 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$218load_method.1', '$224binary_subtract.4']
2021-10-21 20:30:49,123 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=228, inst=BUILD_TUPLE(arg=2, lineno=103)
2021-10-21 20:30:49,123 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$218load_method.1', '$224binary_subtract.4', '$j226.5']
2021-10-21 20:30:49,123 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=230, inst=CALL_METHOD(arg=1, lineno=103)
2021-10-21 20:30:49,124 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$218load_method.1', '$228build_tuple.6']
2021-10-21 20:30:49,124 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=232, inst=POP_TOP(arg=None, lineno=103)
2021-10-21 20:30:49,124 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$230call_method.7']
2021-10-21 20:30:49,125 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=234, inst=JUMP_ABSOLUTE(arg=30, lineno=103)
2021-10-21 20:30:49,125 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,126 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2021-10-21 20:30:49,128 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=236 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2021-10-21 20:30:49,128 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,129 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=236, inst=LOAD_FAST(arg=3, lineno=105)
2021-10-21 20:30:49,131 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,132 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=238, inst=LOAD_METHOD(arg=1, lineno=105)
2021-10-21 20:30:49,132 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path236.0']
2021-10-21 20:30:49,132 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=240, inst=LOAD_FAST(arg=4, lineno=105)
2021-10-21 20:30:49,132 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$238load_method.1']
2021-10-21 20:30:49,133 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=242, inst=LOAD_FAST(arg=5, lineno=105)
2021-10-21 20:30:49,133 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$238load_method.1', '$i240.2']
2021-10-21 20:30:49,133 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=244, inst=LOAD_CONST(arg=1, lineno=105)
2021-10-21 20:30:49,133 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$238load_method.1', '$i240.2', '$j242.3']
2021-10-21 20:30:49,133 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=246, inst=BINARY_SUBTRACT(arg=None, lineno=105)
2021-10-21 20:30:49,134 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$238load_method.1', '$i240.2', '$j242.3', '$const244.4']
2021-10-21 20:30:49,134 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=248, inst=BUILD_TUPLE(arg=2, lineno=105)
2021-10-21 20:30:49,134 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$238load_method.1', '$i240.2', '$246binary_subtract.5']
2021-10-21 20:30:49,134 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=250, inst=CALL_METHOD(arg=1, lineno=105)
2021-10-21 20:30:49,134 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$238load_method.1', '$248build_tuple.6']
2021-10-21 20:30:49,134 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=252, inst=POP_TOP(arg=None, lineno=105)
2021-10-21 20:30:49,135 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$250call_method.7']
2021-10-21 20:30:49,135 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=254, inst=JUMP_ABSOLUTE(arg=30, lineno=105)
2021-10-21 20:30:49,135 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,135 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2021-10-21 20:30:49,135 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2021-10-21 20:30:49,135 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=0)])
2021-10-21 20:30:49,136 [10148] DEBUG    numba.core.byteflow:163: [JupyterRequire] -------------------------Prune PHIs-------------------------
2021-10-21 20:30:49,136 [10148] DEBUG    numba.core.byteflow:232: [JupyterRequire] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=90 nstack_initial=0): set(),
             State(pc_initial=110 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set(),
             State(pc_initial=208 nstack_initial=0): set(),
             State(pc_initial=216 nstack_initial=0): set(),
             State(pc_initial=236 nstack_initial=0): set(),
             State(pc_initial=256 nstack_initial=0): set()})
2021-10-21 20:30:49,137 [10148] DEBUG    numba.core.byteflow:189: [JupyterRequire] defmap: {}
2021-10-21 20:30:49,137 [10148] DEBUG    numba.core.byteflow:190: [JupyterRequire] phismap: defaultdict(<class 'set'>, {})
2021-10-21 20:30:49,137 [10148] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>, {})
2021-10-21 20:30:49,137 [10148] DEBUG    numba.core.byteflow:220: [JupyterRequire] keep phismap: {}
2021-10-21 20:30:49,138 [10148] DEBUG    numba.core.byteflow:226: [JupyterRequire] new_out: defaultdict(<class 'dict'>, {})
2021-10-21 20:30:49,138 [10148] DEBUG    numba.core.byteflow:236: [JupyterRequire] ----------------------DONE Prune PHIs-----------------------
2021-10-21 20:30:49,138 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$acc_cost_mat2.0'}), (4, {'item': '$acc_cost_mat2.0', 'res': '$4load_attr.1'}), (6, {'iterable': '$4load_attr.1', 'stores': ['$6unpack_sequence.2', '$6unpack_sequence.3'], 'tupleobj': '$6unpack_sequence.4'}), (8, {'value': '$6unpack_sequence.2'}), (10, {'value': '$6unpack_sequence.3'}), (12, {'res': '$sz112.5'}), (14, {'res': '$const14.6'}), (16, {'lhs': '$sz112.5', 'rhs': '$const14.6', 'res': '$16binary_subtract.7'}), (18, {'res': '$sz218.8'}), (20, {'res': '$const20.9'}), (22, {'lhs': '$sz218.8', 'rhs': '$const20.9', 'res': '$22binary_subtract.10'}), (24, {'items': ['$16binary_subtract.7', '$22binary_subtract.10'], 'res': '$24build_tuple.11'}), (26, {'items': ['$24build_tuple.11'], 'res': '$26build_list.12'}), (28, {'value': '$26build_list.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
2021-10-21 20:30:49,138 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$path30.0'}), (32, {'res': '$const32.1'}), (34, {'index': '$const32.1', 'target': '$path30.0', 'res': '$34binary_subscr.2'}), (36, {'res': '$const36.3'}), (38, {'lhs': '$34binary_subscr.2', 'rhs': '$const36.3', 'res': '$38compare_op.4'}), (40, {'pred': '$38compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 256: ()})
2021-10-21 20:30:49,139 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$path42.0'}), (44, {'res': '$const44.1'}), (46, {'index': '$const44.1', 'target': '$path42.0', 'res': '$46binary_subscr.2'}), (48, {'iterable': '$46binary_subscr.2', 'stores': ['$48unpack_sequence.3', '$48unpack_sequence.4'], 'tupleobj': '$48unpack_sequence.5'}), (50, {'value': '$48unpack_sequence.3'}), (52, {'value': '$48unpack_sequence.4'}), (54, {'res': '$i54.6'}), (56, {'res': '$const56.7'}), (58, {'lhs': '$i54.6', 'rhs': '$const56.7', 'res': '$58compare_op.8'}), (60, {'pred': '$58compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 82: ()})
2021-10-21 20:30:49,139 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$path62.0'}), (64, {'item': '$path62.0', 'res': '$64load_method.1'}), (66, {'res': '$const66.2'}), (68, {'res': '$j68.3'}), (70, {'res': '$const70.4'}), (72, {'lhs': '$j68.3', 'rhs': '$const70.4', 'res': '$72binary_subtract.5'}), (74, {'items': ['$const66.2', '$72binary_subtract.5'], 'res': '$74build_tuple.6'}), (76, {'func': '$64load_method.1', 'args': ['$74build_tuple.6'], 'res': '$76call_method.7'}), (80, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
2021-10-21 20:30:49,139 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$j82.0'}), (84, {'res': '$const84.1'}), (86, {'lhs': '$j82.0', 'rhs': '$const84.1', 'res': '$86compare_op.2'}), (88, {'pred': '$86compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 110: ()})
2021-10-21 20:30:49,139 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$path90.0'}), (92, {'item': '$path90.0', 'res': '$92load_method.1'}), (94, {'res': '$i94.2'}), (96, {'res': '$const96.3'}), (98, {'lhs': '$i94.2', 'rhs': '$const96.3', 'res': '$98binary_subtract.4'}), (100, {'res': '$const100.5'}), (102, {'items': ['$98binary_subtract.4', '$const100.5'], 'res': '$102build_tuple.6'}), (104, {'func': '$92load_method.1', 'args': ['$102build_tuple.6'], 'res': '$104call_method.7'}), (108, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
2021-10-21 20:30:49,139 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=110 nstack_initial=0):
AdaptBlockInfo(insts=((110, {'res': '$110load_global.0'}), (112, {'item': '$110load_global.0', 'res': '$112load_method.1'}), (114, {'res': '$acc_cost_mat114.2'}), (116, {'res': '$i116.3'}), (118, {'res': '$const118.4'}), (120, {'lhs': '$i116.3', 'rhs': '$const118.4', 'res': '$120binary_subtract.5'}), (122, {'index': '$120binary_subtract.5', 'target': '$acc_cost_mat114.2', 'res': '$122binary_subscr.6'}), (124, {'res': '$j124.7'}), (126, {'res': '$const126.8'}), (128, {'lhs': '$j124.7', 'rhs': '$const126.8', 'res': '$128binary_subtract.9'}), (130, {'index': '$128binary_subtract.9', 'target': '$122binary_subscr.6', 'res': '$130binary_subscr.10'}), (132, {'res': '$acc_cost_mat132.11'}), (134, {'res': '$i134.12'}), (136, {'res': '$const136.13'}), (138, {'lhs': '$i134.12', 'rhs': '$const136.13', 'res': '$138binary_subtract.14'}), (140, {'index': '$138binary_subtract.14', 'target': '$acc_cost_mat132.11', 'res': '$140binary_subscr.15'}), (142, {'res': '$j142.16'}), (144, {'index': '$j142.16', 'target': '$140binary_subscr.15', 'res': '$144binary_subscr.17'}), (146, {'res': '$acc_cost_mat146.18'}), (148, {'res': '$i148.19'}), (150, {'index': '$i148.19', 'target': '$acc_cost_mat146.18', 'res': '$150binary_subscr.20'}), (152, {'res': '$j152.21'}), (154, {'res': '$const154.22'}), (156, {'lhs': '$j152.21', 'rhs': '$const154.22', 'res': '$156binary_subtract.23'}), (158, {'index': '$156binary_subtract.23', 'target': '$150binary_subscr.20', 'res': '$158binary_subscr.24'}), (160, {'items': ['$130binary_subscr.10', '$144binary_subscr.17', '$158binary_subscr.24'], 'res': '$160build_list.25'}), (162, {'func': '$112load_method.1', 'args': ['$160build_list.25'], 'res': '$162call_method.26'}), (164, {'value': '$162call_method.26'}), (166, {'res': '$166load_global.27'}), (168, {'item': '$166load_global.27', 'res': '$168load_method.28'}), (170, {'res': '$arr170.29'}), (172, {'func': '$168load_method.28', 'args': ['$arr170.29'], 'res': '$172call_method.30'}), (174, {'value': '$172call_method.30'}), (176, {'res': '$argmin176.31'}), (178, {'res': '$const178.32'}), (180, {'lhs': '$argmin176.31', 'rhs': '$const178.32', 'res': '$180compare_op.33'}), (182, {'pred': '$180compare_op.33'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={184: (), 208: ()})
2021-10-21 20:30:49,139 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$path184.0'}), (186, {'item': '$path184.0', 'res': '$186load_method.1'}), (188, {'res': '$i188.2'}), (190, {'res': '$const190.3'}), (192, {'lhs': '$i188.2', 'rhs': '$const190.3', 'res': '$192binary_subtract.4'}), (194, {'res': '$j194.5'}), (196, {'res': '$const196.6'}), (198, {'lhs': '$j194.5', 'rhs': '$const196.6', 'res': '$198binary_subtract.7'}), (200, {'items': ['$192binary_subtract.4', '$198binary_subtract.7'], 'res': '$200build_tuple.8'}), (202, {'func': '$186load_method.1', 'args': ['$200build_tuple.8'], 'res': '$202call_method.9'}), (206, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
2021-10-21 20:30:49,140 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=208 nstack_initial=0):
AdaptBlockInfo(insts=((208, {'res': '$argmin208.0'}), (210, {'res': '$const210.1'}), (212, {'lhs': '$argmin208.0', 'rhs': '$const210.1', 'res': '$212compare_op.2'}), (214, {'pred': '$212compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={216: (), 236: ()})
2021-10-21 20:30:49,140 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=216 nstack_initial=0):
AdaptBlockInfo(insts=((216, {'res': '$path216.0'}), (218, {'item': '$path216.0', 'res': '$218load_method.1'}), (220, {'res': '$i220.2'}), (222, {'res': '$const222.3'}), (224, {'lhs': '$i220.2', 'rhs': '$const222.3', 'res': '$224binary_subtract.4'}), (226, {'res': '$j226.5'}), (228, {'items': ['$224binary_subtract.4', '$j226.5'], 'res': '$228build_tuple.6'}), (230, {'func': '$218load_method.1', 'args': ['$228build_tuple.6'], 'res': '$230call_method.7'}), (234, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
2021-10-21 20:30:49,140 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=236 nstack_initial=0):
AdaptBlockInfo(insts=((236, {'res': '$path236.0'}), (238, {'item': '$path236.0', 'res': '$238load_method.1'}), (240, {'res': '$i240.2'}), (242, {'res': '$j242.3'}), (244, {'res': '$const244.4'}), (246, {'lhs': '$j242.3', 'rhs': '$const244.4', 'res': '$246binary_subtract.5'}), (248, {'items': ['$i240.2', '$246binary_subtract.5'], 'res': '$248build_tuple.6'}), (250, {'func': '$238load_method.1', 'args': ['$248build_tuple.6'], 'res': '$250call_method.7'}), (254, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
2021-10-21 20:30:49,140 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=256 nstack_initial=0):
AdaptBlockInfo(insts=((256, {'res': '$path256.0'}), (258, {'res': '$const258.1'}), (260, {'res': '$const260.2'}), (262, {'res': '$const262.3'}), (264, {'start': '$const258.1', 'stop': '$const260.2', 'step': '$const262.3', 'res': '$264build_slice.5', 'slicevar': '$264build_slice.4'}), (266, {'index': '$264build_slice.5', 'target': '$path256.0', 'res': '$266binary_subscr.6'}), (268, {'retval': '$266binary_subscr.6', 'castval': '$268return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2021-10-21 20:30:49,145 [10148] DEBUG    numba.core.interpreter:149: [JupyterRequire] label 0:
    acc_cost_mat = arg(0, name=acc_cost_mat) ['acc_cost_mat']
    $4load_attr.1 = getattr(value=acc_cost_mat, attr=shape) ['$4load_attr.1', 'acc_cost_mat']
    $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2) ['$4load_attr.1', '$6unpack_sequence.4']
    $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None) ['$6unpack_sequence.2', '$6unpack_sequence.4']
    $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None) ['$6unpack_sequence.3', '$6unpack_sequence.4']
    sz1 = $6unpack_sequence.2                ['$6unpack_sequence.2', 'sz1']
    sz2 = $6unpack_sequence.3                ['$6unpack_sequence.3', 'sz2']
    $const14.6 = const(int, 1)               ['$const14.6']
    $16binary_subtract.7 = sz1 - $const14.6  ['$16binary_subtract.7', '$const14.6', 'sz1']
    $const20.9 = const(int, 1)               ['$const20.9']
    $22binary_subtract.10 = sz2 - $const20.9 ['$22binary_subtract.10', '$const20.9', 'sz2']
    $24build_tuple.11 = build_tuple(items=[Var($16binary_subtract.7, dtw_variants.py:88), Var($22binary_subtract.10, dtw_variants.py:88)]) ['$16binary_subtract.7', '$22binary_subtract.10', '$24build_tuple.11']
    $26build_list.12 = build_list(items=[Var($24build_tuple.11, dtw_variants.py:88)]) ['$24build_tuple.11', '$26build_list.12']
    path = $26build_list.12                  ['$26build_list.12', 'path']
    jump 30                                  []
label 30:
    $const32.1 = const(int, -1)              ['$const32.1']
    $34binary_subscr.2 = getitem(value=path, index=$const32.1) ['$34binary_subscr.2', '$const32.1', 'path']
    $const_0 = const(int, 0)                 ['$const_0']
    $const_0.1 = const(int, 0)               ['$const_0.1']
    $const36.3 = build_tuple(items=[Var($const_0, dtw_variants.py:89), Var($const_0.1, dtw_variants.py:89)]) ['$const36.3', '$const_0', '$const_0.1']
    $38compare_op.4 = $34binary_subscr.2 != $const36.3 ['$34binary_subscr.2', '$38compare_op.4', '$const36.3']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($38compare_op.4, func=bool40, args=(Var($38compare_op.4, dtw_variants.py:89),), kws=(), vararg=None) ['$38compare_op.4', '$40pred', 'bool40']
    branch $40pred, 42, 256                  ['$40pred']
label 42:
    $const44.1 = const(int, -1)              ['$const44.1']
    $46binary_subscr.2 = getitem(value=path, index=$const44.1) ['$46binary_subscr.2', '$const44.1', 'path']
    $48unpack_sequence.5 = exhaust_iter(value=$46binary_subscr.2, count=2) ['$46binary_subscr.2', '$48unpack_sequence.5']
    $48unpack_sequence.3 = static_getitem(value=$48unpack_sequence.5, index=0, index_var=None) ['$48unpack_sequence.3', '$48unpack_sequence.5']
    $48unpack_sequence.4 = static_getitem(value=$48unpack_sequence.5, index=1, index_var=None) ['$48unpack_sequence.4', '$48unpack_sequence.5']
    i = $48unpack_sequence.3                 ['$48unpack_sequence.3', 'i']
    j = $48unpack_sequence.4                 ['$48unpack_sequence.4', 'j']
    $const56.7 = const(int, 0)               ['$const56.7']
    $58compare_op.8 = i == $const56.7        ['$58compare_op.8', '$const56.7', 'i']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.8, func=bool60, args=(Var($58compare_op.8, dtw_variants.py:91),), kws=(), vararg=None) ['$58compare_op.8', '$60pred', 'bool60']
    branch $60pred, 62, 82                   ['$60pred']
label 62:
    $64load_method.1 = getattr(value=path, attr=append) ['$64load_method.1', 'path']
    $const66.2 = const(int, 0)               ['$const66.2']
    $const70.4 = const(int, 1)               ['$const70.4']
    $72binary_subtract.5 = j - $const70.4    ['$72binary_subtract.5', '$const70.4', 'j']
    $74build_tuple.6 = build_tuple(items=[Var($const66.2, dtw_variants.py:92), Var($72binary_subtract.5, dtw_variants.py:92)]) ['$72binary_subtract.5', '$74build_tuple.6', '$const66.2']
    $76call_method.7 = call $64load_method.1($74build_tuple.6, func=$64load_method.1, args=[Var($74build_tuple.6, dtw_variants.py:92)], kws=(), vararg=None) ['$64load_method.1', '$74build_tuple.6', '$76call_method.7']
    jump 30                                  []
label 82:
    $const84.1 = const(int, 0)               ['$const84.1']
    $86compare_op.2 = j == $const84.1        ['$86compare_op.2', '$const84.1', 'j']
    bool88 = global(bool: <class 'bool'>)    ['bool88']
    $88pred = call bool88($86compare_op.2, func=bool88, args=(Var($86compare_op.2, dtw_variants.py:93),), kws=(), vararg=None) ['$86compare_op.2', '$88pred', 'bool88']
    branch $88pred, 90, 110                  ['$88pred']
label 90:
    $92load_method.1 = getattr(value=path, attr=append) ['$92load_method.1', 'path']
    $const96.3 = const(int, 1)               ['$const96.3']
    $98binary_subtract.4 = i - $const96.3    ['$98binary_subtract.4', '$const96.3', 'i']
    $const100.5 = const(int, 0)              ['$const100.5']
    $102build_tuple.6 = build_tuple(items=[Var($98binary_subtract.4, dtw_variants.py:94), Var($const100.5, dtw_variants.py:94)]) ['$102build_tuple.6', '$98binary_subtract.4', '$const100.5']
    $104call_method.7 = call $92load_method.1($102build_tuple.6, func=$92load_method.1, args=[Var($102build_tuple.6, dtw_variants.py:94)], kws=(), vararg=None) ['$102build_tuple.6', '$104call_method.7', '$92load_method.1']
    jump 30                                  []
label 110:
    $110load_global.0 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.0']
    $112load_method.1 = getattr(value=$110load_global.0, attr=array) ['$110load_global.0', '$112load_method.1']
    $const118.4 = const(int, 1)              ['$const118.4']
    $120binary_subtract.5 = i - $const118.4  ['$120binary_subtract.5', '$const118.4', 'i']
    $122binary_subscr.6 = getitem(value=acc_cost_mat, index=$120binary_subtract.5) ['$120binary_subtract.5', '$122binary_subscr.6', 'acc_cost_mat']
    $const126.8 = const(int, 1)              ['$const126.8']
    $128binary_subtract.9 = j - $const126.8  ['$128binary_subtract.9', '$const126.8', 'j']
    $130binary_subscr.10 = getitem(value=$122binary_subscr.6, index=$128binary_subtract.9) ['$122binary_subscr.6', '$128binary_subtract.9', '$130binary_subscr.10']
    $const136.13 = const(int, 1)             ['$const136.13']
    $138binary_subtract.14 = i - $const136.13 ['$138binary_subtract.14', '$const136.13', 'i']
    $140binary_subscr.15 = getitem(value=acc_cost_mat, index=$138binary_subtract.14) ['$138binary_subtract.14', '$140binary_subscr.15', 'acc_cost_mat']
    $144binary_subscr.17 = getitem(value=$140binary_subscr.15, index=j) ['$140binary_subscr.15', '$144binary_subscr.17', 'j']
    $150binary_subscr.20 = getitem(value=acc_cost_mat, index=i) ['$150binary_subscr.20', 'acc_cost_mat', 'i']
    $const154.22 = const(int, 1)             ['$const154.22']
    $156binary_subtract.23 = j - $const154.22 ['$156binary_subtract.23', '$const154.22', 'j']
    $158binary_subscr.24 = getitem(value=$150binary_subscr.20, index=$156binary_subtract.23) ['$150binary_subscr.20', '$156binary_subtract.23', '$158binary_subscr.24']
    $160build_list.25 = build_list(items=[Var($130binary_subscr.10, dtw_variants.py:96), Var($144binary_subscr.17, dtw_variants.py:97), Var($158binary_subscr.24, dtw_variants.py:98)]) ['$130binary_subscr.10', '$144binary_subscr.17', '$158binary_subscr.24', '$160build_list.25']
    $162call_method.26 = call $112load_method.1($160build_list.25, func=$112load_method.1, args=[Var($160build_list.25, dtw_variants.py:96)], kws=(), vararg=None) ['$112load_method.1', '$160build_list.25', '$162call_method.26']
    arr = $162call_method.26                 ['$162call_method.26', 'arr']
    $166load_global.27 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$166load_global.27']
    $168load_method.28 = getattr(value=$166load_global.27, attr=argmin) ['$166load_global.27', '$168load_method.28']
    $172call_method.30 = call $168load_method.28(arr, func=$168load_method.28, args=[Var(arr, dtw_variants.py:96)], kws=(), vararg=None) ['$168load_method.28', '$172call_method.30', 'arr']
    argmin = $172call_method.30              ['$172call_method.30', 'argmin']
    $const178.32 = const(int, 0)             ['$const178.32']
    $180compare_op.33 = argmin == $const178.32 ['$180compare_op.33', '$const178.32', 'argmin']
    bool182 = global(bool: <class 'bool'>)   ['bool182']
    $182pred = call bool182($180compare_op.33, func=bool182, args=(Var($180compare_op.33, dtw_variants.py:100),), kws=(), vararg=None) ['$180compare_op.33', '$182pred', 'bool182']
    branch $182pred, 184, 208                ['$182pred']
label 184:
    $186load_method.1 = getattr(value=path, attr=append) ['$186load_method.1', 'path']
    $const190.3 = const(int, 1)              ['$const190.3']
    $192binary_subtract.4 = i - $const190.3  ['$192binary_subtract.4', '$const190.3', 'i']
    $const196.6 = const(int, 1)              ['$const196.6']
    $198binary_subtract.7 = j - $const196.6  ['$198binary_subtract.7', '$const196.6', 'j']
    $200build_tuple.8 = build_tuple(items=[Var($192binary_subtract.4, dtw_variants.py:101), Var($198binary_subtract.7, dtw_variants.py:101)]) ['$192binary_subtract.4', '$198binary_subtract.7', '$200build_tuple.8']
    $202call_method.9 = call $186load_method.1($200build_tuple.8, func=$186load_method.1, args=[Var($200build_tuple.8, dtw_variants.py:101)], kws=(), vararg=None) ['$186load_method.1', '$200build_tuple.8', '$202call_method.9']
    jump 30                                  []
label 208:
    $const210.1 = const(int, 1)              ['$const210.1']
    $212compare_op.2 = argmin == $const210.1 ['$212compare_op.2', '$const210.1', 'argmin']
    bool214 = global(bool: <class 'bool'>)   ['bool214']
    $214pred = call bool214($212compare_op.2, func=bool214, args=(Var($212compare_op.2, dtw_variants.py:102),), kws=(), vararg=None) ['$212compare_op.2', '$214pred', 'bool214']
    branch $214pred, 216, 236                ['$214pred']
label 216:
    $218load_method.1 = getattr(value=path, attr=append) ['$218load_method.1', 'path']
    $const222.3 = const(int, 1)              ['$const222.3']
    $224binary_subtract.4 = i - $const222.3  ['$224binary_subtract.4', '$const222.3', 'i']
    $228build_tuple.6 = build_tuple(items=[Var($224binary_subtract.4, dtw_variants.py:103), Var(j, dtw_variants.py:90)]) ['$224binary_subtract.4', '$228build_tuple.6', 'j']
    $230call_method.7 = call $218load_method.1($228build_tuple.6, func=$218load_method.1, args=[Var($228build_tuple.6, dtw_variants.py:103)], kws=(), vararg=None) ['$218load_method.1', '$228build_tuple.6', '$230call_method.7']
    jump 30                                  []
label 236:
    $238load_method.1 = getattr(value=path, attr=append) ['$238load_method.1', 'path']
    $const244.4 = const(int, 1)              ['$const244.4']
    $246binary_subtract.5 = j - $const244.4  ['$246binary_subtract.5', '$const244.4', 'j']
    $248build_tuple.6 = build_tuple(items=[Var(i, dtw_variants.py:90), Var($246binary_subtract.5, dtw_variants.py:105)]) ['$246binary_subtract.5', '$248build_tuple.6', 'i']
    $250call_method.7 = call $238load_method.1($248build_tuple.6, func=$238load_method.1, args=[Var($248build_tuple.6, dtw_variants.py:105)], kws=(), vararg=None) ['$238load_method.1', '$248build_tuple.6', '$250call_method.7']
    jump 30                                  []
label 256:
    $const258.1 = const(NoneType, None)      ['$const258.1']
    $const260.2 = const(NoneType, None)      ['$const260.2']
    $const262.3 = const(int, -1)             ['$const262.3']
    $264build_slice.4 = global(slice: <class 'slice'>) ['$264build_slice.4']
    $264build_slice.5 = call $264build_slice.4($const258.1, $const260.2, $const262.3, func=$264build_slice.4, args=(Var($const258.1, dtw_variants.py:106), Var($const260.2, dtw_variants.py:106), Var($const262.3, dtw_variants.py:106)), kws=(), vararg=None) ['$264build_slice.4', '$264build_slice.5', '$const258.1', '$const260.2', '$const262.3']
    $266binary_subscr.6 = getitem(value=path, index=$264build_slice.5) ['$264build_slice.5', '$266binary_subscr.6', 'path']
    $268return_value.7 = cast(value=$266binary_subscr.6) ['$266binary_subscr.6', '$268return_value.7']
    return $268return_value.7                ['$268return_value.7']

2021-10-21 20:30:49,183 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 0
2021-10-21 20:30:49,183 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54DEB7F0>
2021-10-21 20:30:49,184 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: acc_cost_mat = arg(0, name=acc_cost_mat)
2021-10-21 20:30:49,184 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=acc_cost_mat, attr=shape)
2021-10-21 20:30:49,184 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2)
2021-10-21 20:30:49,184 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None)
2021-10-21 20:30:49,184 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None)
2021-10-21 20:30:49,184 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: sz1 = $6unpack_sequence.2
2021-10-21 20:30:49,184 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: sz2 = $6unpack_sequence.3
2021-10-21 20:30:49,185 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.6 = const(int, 1)
2021-10-21 20:30:49,185 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16binary_subtract.7 = sz1 - $const14.6
2021-10-21 20:30:49,185 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const20.9 = const(int, 1)
2021-10-21 20:30:49,185 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22binary_subtract.10 = sz2 - $const20.9
2021-10-21 20:30:49,185 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24build_tuple.11 = build_tuple(items=[Var($16binary_subtract.7, dtw_variants.py:88), Var($22binary_subtract.10, dtw_variants.py:88)])
2021-10-21 20:30:49,185 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26build_list.12 = build_list(items=[Var($24build_tuple.11, dtw_variants.py:88)])
2021-10-21 20:30:49,185 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: path = $26build_list.12
2021-10-21 20:30:49,185 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 30
2021-10-21 20:30:49,186 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 30
2021-10-21 20:30:49,186 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54DEB7F0>
2021-10-21 20:30:49,186 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const32.1 = const(int, -1)
2021-10-21 20:30:49,186 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $34binary_subscr.2 = static_getitem(value=path, index=-1, index_var=$const32.1)
2021-10-21 20:30:49,186 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const_0 = const(int, 0)
2021-10-21 20:30:49,186 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const_0.1 = const(int, 0)
2021-10-21 20:30:49,186 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const36.3 = build_tuple(items=[Var($const_0, dtw_variants.py:89), Var($const_0.1, dtw_variants.py:89)])
2021-10-21 20:30:49,186 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $38compare_op.4 = $34binary_subscr.2 != $const36.3
2021-10-21 20:30:49,187 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool40 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,187 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $40pred = call bool40($38compare_op.4, func=bool40, args=(Var($38compare_op.4, dtw_variants.py:89),), kws=(), vararg=None)
2021-10-21 20:30:49,187 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $40pred, 42, 256
2021-10-21 20:30:49,187 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 42
2021-10-21 20:30:49,187 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54DEB7F0>
2021-10-21 20:30:49,187 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const44.1 = const(int, -1)
2021-10-21 20:30:49,187 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46binary_subscr.2 = static_getitem(value=path, index=-1, index_var=$const44.1)
2021-10-21 20:30:49,187 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $48unpack_sequence.5 = exhaust_iter(value=$46binary_subscr.2, count=2)
2021-10-21 20:30:49,188 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $48unpack_sequence.3 = static_getitem(value=$48unpack_sequence.5, index=0, index_var=None)
2021-10-21 20:30:49,188 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $48unpack_sequence.4 = static_getitem(value=$48unpack_sequence.5, index=1, index_var=None)
2021-10-21 20:30:49,188 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: i = $48unpack_sequence.3
2021-10-21 20:30:49,188 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: j = $48unpack_sequence.4
2021-10-21 20:30:49,188 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const56.7 = const(int, 0)
2021-10-21 20:30:49,188 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $58compare_op.8 = i == $const56.7
2021-10-21 20:30:49,188 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool60 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,188 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $60pred = call bool60($58compare_op.8, func=bool60, args=(Var($58compare_op.8, dtw_variants.py:91),), kws=(), vararg=None)
2021-10-21 20:30:49,189 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $60pred, 62, 82
2021-10-21 20:30:49,189 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 62
2021-10-21 20:30:49,189 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54DEB7F0>
2021-10-21 20:30:49,189 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_method.1 = getattr(value=path, attr=append)
2021-10-21 20:30:49,189 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const66.2 = const(int, 0)
2021-10-21 20:30:49,189 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const70.4 = const(int, 1)
2021-10-21 20:30:49,189 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72binary_subtract.5 = j - $const70.4
2021-10-21 20:30:49,190 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74build_tuple.6 = build_tuple(items=[Var($const66.2, dtw_variants.py:92), Var($72binary_subtract.5, dtw_variants.py:92)])
2021-10-21 20:30:49,190 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $76call_method.7 = call $64load_method.1($74build_tuple.6, func=$64load_method.1, args=[Var($74build_tuple.6, dtw_variants.py:92)], kws=(), vararg=None)
2021-10-21 20:30:49,190 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 257
2021-10-21 20:30:49,190 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 82
2021-10-21 20:30:49,191 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54DEB7F0>
2021-10-21 20:30:49,191 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const84.1 = const(int, 0)
2021-10-21 20:30:49,191 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $86compare_op.2 = j == $const84.1
2021-10-21 20:30:49,192 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool88 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,192 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88pred = call bool88($86compare_op.2, func=bool88, args=(Var($86compare_op.2, dtw_variants.py:93),), kws=(), vararg=None)
2021-10-21 20:30:49,192 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $88pred, 90, 110
2021-10-21 20:30:49,192 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 90
2021-10-21 20:30:49,192 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54DEB7F0>
2021-10-21 20:30:49,193 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $92load_method.1 = getattr(value=path, attr=append)
2021-10-21 20:30:49,193 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const96.3 = const(int, 1)
2021-10-21 20:30:49,193 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $98binary_subtract.4 = i - $const96.3
2021-10-21 20:30:49,193 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const100.5 = const(int, 0)
2021-10-21 20:30:49,193 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $102build_tuple.6 = build_tuple(items=[Var($98binary_subtract.4, dtw_variants.py:94), Var($const100.5, dtw_variants.py:94)])
2021-10-21 20:30:49,194 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $104call_method.7 = call $92load_method.1($102build_tuple.6, func=$92load_method.1, args=[Var($102build_tuple.6, dtw_variants.py:94)], kws=(), vararg=None)
2021-10-21 20:30:49,194 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 257
2021-10-21 20:30:49,194 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 110
2021-10-21 20:30:49,194 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54DEB7F0>
2021-10-21 20:30:49,194 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110load_global.0 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,195 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $112load_method.1 = getattr(value=$110load_global.0, attr=array)
2021-10-21 20:30:49,195 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const118.4 = const(int, 1)
2021-10-21 20:30:49,195 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $120binary_subtract.5 = i - $const118.4
2021-10-21 20:30:49,195 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $122binary_subscr.6 = getitem(value=acc_cost_mat, index=$120binary_subtract.5)
2021-10-21 20:30:49,195 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const126.8 = const(int, 1)
2021-10-21 20:30:49,195 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $128binary_subtract.9 = j - $const126.8
2021-10-21 20:30:49,195 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $130binary_subscr.10 = getitem(value=$122binary_subscr.6, index=$128binary_subtract.9)
2021-10-21 20:30:49,195 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const136.13 = const(int, 1)
2021-10-21 20:30:49,196 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $138binary_subtract.14 = i - $const136.13
2021-10-21 20:30:49,196 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $140binary_subscr.15 = getitem(value=acc_cost_mat, index=$138binary_subtract.14)
2021-10-21 20:30:49,196 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $144binary_subscr.17 = getitem(value=$140binary_subscr.15, index=j)
2021-10-21 20:30:49,196 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $150binary_subscr.20 = getitem(value=acc_cost_mat, index=i)
2021-10-21 20:30:49,196 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const154.22 = const(int, 1)
2021-10-21 20:30:49,196 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $156binary_subtract.23 = j - $const154.22
2021-10-21 20:30:49,196 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $158binary_subscr.24 = getitem(value=$150binary_subscr.20, index=$156binary_subtract.23)
2021-10-21 20:30:49,196 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $160build_list.25 = build_list(items=[Var($130binary_subscr.10, dtw_variants.py:96), Var($144binary_subscr.17, dtw_variants.py:97), Var($158binary_subscr.24, dtw_variants.py:98)])
2021-10-21 20:30:49,196 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $162call_method.26 = call $112load_method.1($160build_list.25, func=$112load_method.1, args=[Var($160build_list.25, dtw_variants.py:96)], kws=(), vararg=None)
2021-10-21 20:30:49,197 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arr = $162call_method.26
2021-10-21 20:30:49,197 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $166load_global.27 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,197 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $168load_method.28 = getattr(value=$166load_global.27, attr=argmin)
2021-10-21 20:30:49,197 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $172call_method.30 = call $168load_method.28(arr, func=$168load_method.28, args=[Var(arr, dtw_variants.py:96)], kws=(), vararg=None)
2021-10-21 20:30:49,197 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: argmin = $172call_method.30
2021-10-21 20:30:49,197 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const178.32 = const(int, 0)
2021-10-21 20:30:49,197 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $180compare_op.33 = argmin == $const178.32
2021-10-21 20:30:49,198 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool182 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,198 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $182pred = call bool182($180compare_op.33, func=bool182, args=(Var($180compare_op.33, dtw_variants.py:100),), kws=(), vararg=None)
2021-10-21 20:30:49,199 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $182pred, 184, 208
2021-10-21 20:30:49,201 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 184
2021-10-21 20:30:49,201 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54DEB7F0>
2021-10-21 20:30:49,201 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $186load_method.1 = getattr(value=path, attr=append)
2021-10-21 20:30:49,202 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const190.3 = const(int, 1)
2021-10-21 20:30:49,202 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $192binary_subtract.4 = i - $const190.3
2021-10-21 20:30:49,202 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const196.6 = const(int, 1)
2021-10-21 20:30:49,202 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $198binary_subtract.7 = j - $const196.6
2021-10-21 20:30:49,203 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $200build_tuple.8 = build_tuple(items=[Var($192binary_subtract.4, dtw_variants.py:101), Var($198binary_subtract.7, dtw_variants.py:101)])
2021-10-21 20:30:49,203 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $202call_method.9 = call $186load_method.1($200build_tuple.8, func=$186load_method.1, args=[Var($200build_tuple.8, dtw_variants.py:101)], kws=(), vararg=None)
2021-10-21 20:30:49,203 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 257
2021-10-21 20:30:49,203 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 208
2021-10-21 20:30:49,204 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54DEB7F0>
2021-10-21 20:30:49,204 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const210.1 = const(int, 1)
2021-10-21 20:30:49,204 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $212compare_op.2 = argmin == $const210.1
2021-10-21 20:30:49,204 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool214 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,204 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $214pred = call bool214($212compare_op.2, func=bool214, args=(Var($212compare_op.2, dtw_variants.py:102),), kws=(), vararg=None)
2021-10-21 20:30:49,205 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $214pred, 216, 236
2021-10-21 20:30:49,205 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 216
2021-10-21 20:30:49,205 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54DEB7F0>
2021-10-21 20:30:49,205 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $218load_method.1 = getattr(value=path, attr=append)
2021-10-21 20:30:49,205 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const222.3 = const(int, 1)
2021-10-21 20:30:49,206 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $224binary_subtract.4 = i - $const222.3
2021-10-21 20:30:49,206 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $228build_tuple.6 = build_tuple(items=[Var($224binary_subtract.4, dtw_variants.py:103), Var(j, dtw_variants.py:90)])
2021-10-21 20:30:49,206 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $230call_method.7 = call $218load_method.1($228build_tuple.6, func=$218load_method.1, args=[Var($228build_tuple.6, dtw_variants.py:103)], kws=(), vararg=None)
2021-10-21 20:30:49,206 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 257
2021-10-21 20:30:49,206 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 236
2021-10-21 20:30:49,207 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54DEB7F0>
2021-10-21 20:30:49,207 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $238load_method.1 = getattr(value=path, attr=append)
2021-10-21 20:30:49,207 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const244.4 = const(int, 1)
2021-10-21 20:30:49,207 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $246binary_subtract.5 = j - $const244.4
2021-10-21 20:30:49,208 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $248build_tuple.6 = build_tuple(items=[Var(i, dtw_variants.py:90), Var($246binary_subtract.5, dtw_variants.py:105)])
2021-10-21 20:30:49,208 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $250call_method.7 = call $238load_method.1($248build_tuple.6, func=$238load_method.1, args=[Var($248build_tuple.6, dtw_variants.py:105)], kws=(), vararg=None)
2021-10-21 20:30:49,209 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 257
2021-10-21 20:30:49,210 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 256
2021-10-21 20:30:49,210 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54DEB7F0>
2021-10-21 20:30:49,212 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const258.1 = const(NoneType, None)
2021-10-21 20:30:49,212 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const260.2 = const(NoneType, None)
2021-10-21 20:30:49,212 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const262.3 = const(int, -1)
2021-10-21 20:30:49,212 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $264build_slice.4 = global(slice: <class 'slice'>)
2021-10-21 20:30:49,213 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $264build_slice.5 = call $264build_slice.4($const258.1, $const260.2, $const262.3, func=$264build_slice.4, args=(Var($const258.1, dtw_variants.py:106), Var($const260.2, dtw_variants.py:106), Var($const262.3, dtw_variants.py:106)), kws=(), vararg=None)
2021-10-21 20:30:49,213 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $266binary_subscr.6 = static_getitem(value=path, index=slice(None, None, -1), index_var=$264build_slice.5)
2021-10-21 20:30:49,213 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $268return_value.7 = cast(value=$266binary_subscr.6)
2021-10-21 20:30:49,213 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $268return_value.7
2021-10-21 20:30:49,213 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 257
2021-10-21 20:30:49,213 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54DEB7F0>
2021-10-21 20:30:49,213 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 30
2021-10-21 20:30:49,215 [10148] DEBUG    numba.core.ssa:141: [JupyterRequire] defs defaultdict(<class 'list'>,
            {'$102build_tuple.6': [<numba.core.ir.Assign object at 0x0000016A54DF86D0>],
             '$104call_method.7': [<numba.core.ir.Assign object at 0x0000016A54DF8850>],
             '$110load_global.0': [<numba.core.ir.Assign object at 0x0000016A54DF8A60>],
             '$112load_method.1': [<numba.core.ir.Assign object at 0x0000016A54DF8BE0>],
             '$120binary_subtract.5': [<numba.core.ir.Assign object at 0x0000016A54DDBFA0>],
             '$122binary_subscr.6': [<numba.core.ir.Assign object at 0x0000016A54DDBD90>],
             '$128binary_subtract.9': [<numba.core.ir.Assign object at 0x0000016A54DDB910>],
             '$130binary_subscr.10': [<numba.core.ir.Assign object at 0x0000016A54DDBA00>],
             '$138binary_subtract.14': [<numba.core.ir.Assign object at 0x0000016A54DDB3A0>],
             '$140binary_subscr.15': [<numba.core.ir.Assign object at 0x0000016A54DDB400>],
             '$144binary_subscr.17': [<numba.core.ir.Assign object at 0x0000016A54DF4220>],
             '$150binary_subscr.20': [<numba.core.ir.Assign object at 0x0000016A54DF45E0>],
             '$156binary_subtract.23': [<numba.core.ir.Assign object at 0x0000016A54DF4A00>],
             '$158binary_subscr.24': [<numba.core.ir.Assign object at 0x0000016A54DF4B80>],
             '$160build_list.25': [<numba.core.ir.Assign object at 0x0000016A54DF4D30>],
             '$162call_method.26': [<numba.core.ir.Assign object at 0x0000016A54DF4EB0>],
             '$166load_global.27': [<numba.core.ir.Assign object at 0x0000016A54DEAEB0>],
             '$168load_method.28': [<numba.core.ir.Assign object at 0x0000016A54DEAD60>],
             '$16binary_subtract.7': [<numba.core.ir.Assign object at 0x0000016A54E1DC40>],
             '$172call_method.30': [<numba.core.ir.Assign object at 0x0000016A54DEA160>],
             '$180compare_op.33': [<numba.core.ir.Assign object at 0x0000016A54DEA6A0>],
             '$182pred': [<numba.core.ir.Assign object at 0x0000016A54DEA430>],
             '$186load_method.1': [<numba.core.ir.Assign object at 0x0000016A54DF4730>],
             '$192binary_subtract.4': [<numba.core.ir.Assign object at 0x0000016A54DF1160>],
             '$198binary_subtract.7': [<numba.core.ir.Assign object at 0x0000016A54DF1580>],
             '$200build_tuple.8': [<numba.core.ir.Assign object at 0x0000016A54DF1730>],
             '$202call_method.9': [<numba.core.ir.Assign object at 0x0000016A54DF18B0>],
             '$212compare_op.2': [<numba.core.ir.Assign object at 0x0000016A54DF1D00>],
             '$214pred': [<numba.core.ir.Assign object at 0x0000016A54DF1FA0>],
             '$218load_method.1': [<numba.core.ir.Assign object at 0x0000016A54DEF340>],
             '$224binary_subtract.4': [<numba.core.ir.Assign object at 0x0000016A54DEF760>],
             '$228build_tuple.6': [<numba.core.ir.Assign object at 0x0000016A54DEFA30>],
             '$22binary_subtract.10': [<numba.core.ir.Assign object at 0x0000016A54E1DB80>],
             '$230call_method.7': [<numba.core.ir.Assign object at 0x0000016A54DEFBB0>],
             '$238load_method.1': [<numba.core.ir.Assign object at 0x0000016A54DEFE80>],
             '$246binary_subtract.5': [<numba.core.ir.Assign object at 0x0000016A54E0D400>],
             '$248build_tuple.6': [<numba.core.ir.Assign object at 0x0000016A54E0D5B0>],
             '$24build_tuple.11': [<numba.core.ir.Assign object at 0x0000016A54E1D730>],
             '$250call_method.7': [<numba.core.ir.Assign object at 0x0000016A54E0D730>],
             '$264build_slice.4': [<numba.core.ir.Assign object at 0x0000016A54E0DEB0>],
             '$264build_slice.5': [<numba.core.ir.Assign object at 0x0000016A54E0DFD0>],
             '$266binary_subscr.6': [<numba.core.ir.Assign object at 0x0000016A54DEB4C0>],
             '$268return_value.7': [<numba.core.ir.Assign object at 0x0000016A54DEB2E0>],
             '$26build_list.12': [<numba.core.ir.Assign object at 0x0000016A54E1DE20>],
             '$34binary_subscr.2': [<numba.core.ir.Assign object at 0x0000016A54E9E490>],
             '$38compare_op.4': [<numba.core.ir.Assign object at 0x0000016A54658B80>],
             '$40pred': [<numba.core.ir.Assign object at 0x0000016A54658D60>],
             '$46binary_subscr.2': [<numba.core.ir.Assign object at 0x0000016A54E9E3A0>],
             '$48unpack_sequence.3': [<numba.core.ir.Assign object at 0x0000016A5449A310>],
             '$48unpack_sequence.4': [<numba.core.ir.Assign object at 0x0000016A5449A100>],
             '$48unpack_sequence.5': [<numba.core.ir.Assign object at 0x0000016A54C06490>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000016A54648F40>],
             '$58compare_op.8': [<numba.core.ir.Assign object at 0x0000016A54E015E0>],
             '$60pred': [<numba.core.ir.Assign object at 0x0000016A54E01880>],
             '$64load_method.1': [<numba.core.ir.Assign object at 0x0000016A54E01B80>],
             '$6unpack_sequence.2': [<numba.core.ir.Assign object at 0x0000016A54624C70>],
             '$6unpack_sequence.3': [<numba.core.ir.Assign object at 0x0000016A54624B50>],
             '$6unpack_sequence.4': [<numba.core.ir.Assign object at 0x0000016A546242B0>],
             '$72binary_subtract.5': [<numba.core.ir.Assign object at 0x0000016A54DFF160>],
             '$74build_tuple.6': [<numba.core.ir.Assign object at 0x0000016A54DFF310>],
             '$76call_method.7': [<numba.core.ir.Assign object at 0x0000016A54DFF490>],
             '$86compare_op.2': [<numba.core.ir.Assign object at 0x0000016A54DFF940>],
             '$88pred': [<numba.core.ir.Assign object at 0x0000016A54DFFBE0>],
             '$92load_method.1': [<numba.core.ir.Assign object at 0x0000016A54DFFF40>],
             '$98binary_subtract.4': [<numba.core.ir.Assign object at 0x0000016A54DF83A0>],
             '$const100.5': [<numba.core.ir.Assign object at 0x0000016A54DF8520>],
             '$const118.4': [<numba.core.ir.Assign object at 0x0000016A54DF8FA0>],
             '$const126.8': [<numba.core.ir.Assign object at 0x0000016A54DDBAC0>],
             '$const136.13': [<numba.core.ir.Assign object at 0x0000016A54DDB070>],
             '$const14.6': [<numba.core.ir.Assign object at 0x0000016A54BC1760>],
             '$const154.22': [<numba.core.ir.Assign object at 0x0000016A54DF4880>],
             '$const178.32': [<numba.core.ir.Assign object at 0x0000016A54DEA460>],
             '$const190.3': [<numba.core.ir.Assign object at 0x0000016A54DEAF40>],
             '$const196.6': [<numba.core.ir.Assign object at 0x0000016A54DF1400>],
             '$const20.9': [<numba.core.ir.Assign object at 0x0000016A54E1D7F0>],
             '$const210.1': [<numba.core.ir.Assign object at 0x0000016A54DF1B80>],
             '$const222.3': [<numba.core.ir.Assign object at 0x0000016A54DEF5E0>],
             '$const244.4': [<numba.core.ir.Assign object at 0x0000016A54E0D280>],
             '$const258.1': [<numba.core.ir.Assign object at 0x0000016A54E0DA00>],
             '$const260.2': [<numba.core.ir.Assign object at 0x0000016A54E0DB80>],
             '$const262.3': [<numba.core.ir.Assign object at 0x0000016A54E0DD00>],
             '$const32.1': [<numba.core.ir.Assign object at 0x0000016A546589D0>],
             '$const36.3': [<numba.core.ir.Assign object at 0x0000016A54658B50>],
             '$const44.1': [<numba.core.ir.Assign object at 0x0000016A54658C40>],
             '$const56.7': [<numba.core.ir.Assign object at 0x0000016A54E01460>],
             '$const66.2': [<numba.core.ir.Assign object at 0x0000016A54E01D00>],
             '$const70.4': [<numba.core.ir.Assign object at 0x0000016A54E01FA0>],
             '$const84.1': [<numba.core.ir.Assign object at 0x0000016A54DFF7C0>],
             '$const96.3': [<numba.core.ir.Assign object at 0x0000016A54DF8220>],
             '$const_0': [<numba.core.ir.Assign object at 0x0000016A54658D00>],
             '$const_0.1': [<numba.core.ir.Assign object at 0x0000016A54658850>],
             'acc_cost_mat': [<numba.core.ir.Assign object at 0x0000016A546489D0>],
             'argmin': [<numba.core.ir.Assign object at 0x0000016A54DEA850>],
             'arr': [<numba.core.ir.Assign object at 0x0000016A54DF4FA0>],
             'bool182': [<numba.core.ir.Assign object at 0x0000016A54DEA130>],
             'bool214': [<numba.core.ir.Assign object at 0x0000016A54DF1E80>],
             'bool40': [<numba.core.ir.Assign object at 0x0000016A546585B0>],
             'bool60': [<numba.core.ir.Assign object at 0x0000016A54E01760>],
             'bool88': [<numba.core.ir.Assign object at 0x0000016A54DFFAC0>],
             'i': [<numba.core.ir.Assign object at 0x0000016A54E010A0>],
             'j': [<numba.core.ir.Assign object at 0x0000016A54E011C0>],
             'path': [<numba.core.ir.Assign object at 0x0000016A54E1DBB0>],
             'sz1': [<numba.core.ir.Assign object at 0x0000016A54624730>],
             'sz2': [<numba.core.ir.Assign object at 0x0000016A546243A0>]})
2021-10-21 20:30:49,216 [10148] DEBUG    numba.core.ssa:143: [JupyterRequire] SSA violators set()
2021-10-21 20:30:49,366 [10148] DEBUG    numba.core.byteflow:74: [JupyterRequire] bytecode dump:
>          0	NOP(arg=None, lineno=664)
           2	LOAD_FAST(arg=0, lineno=664)
           4	LOAD_ATTR(arg=0, lineno=664)
           6	LOAD_CONST(arg=1, lineno=664)
           8	COMPARE_OP(arg=2, lineno=664)
          10	POP_JUMP_IF_FALSE(arg=20, lineno=664)
          12	LOAD_GLOBAL(arg=1, lineno=665)
          14	LOAD_CONST(arg=2, lineno=665)
          16	CALL_FUNCTION(arg=1, lineno=665)
          18	RAISE_VARARGS(arg=1, lineno=665)
>         20	LOAD_FAST(arg=0, lineno=666)
          22	LOAD_ATTR(arg=2, lineno=666)
          24	GET_ITER(arg=None, lineno=666)
>         26	FOR_ITER(arg=16, lineno=666)
          28	STORE_FAST(arg=1, lineno=666)
          30	LOAD_FAST(arg=1, lineno=667)
          32	STORE_FAST(arg=2, lineno=667)
          34	LOAD_CONST(arg=1, lineno=668)
          36	STORE_FAST(arg=3, lineno=668)
          38	POP_TOP(arg=None, lineno=669)
          40	JUMP_ABSOLUTE(arg=44, lineno=669)
          42	JUMP_ABSOLUTE(arg=26, lineno=669)
>         44	LOAD_GLOBAL(arg=3, lineno=670)
          46	LOAD_METHOD(arg=4, lineno=670)
          48	LOAD_FAST(arg=2, lineno=670)
          50	CALL_METHOD(arg=1, lineno=670)
          52	POP_JUMP_IF_FALSE(arg=58, lineno=670)
          54	LOAD_FAST(arg=3, lineno=671)
          56	RETURN_VALUE(arg=None, lineno=671)
>         58	LOAD_CONST(arg=1, lineno=673)
          60	STORE_FAST(arg=4, lineno=673)
          62	LOAD_FAST(arg=0, lineno=674)
          64	LOAD_ATTR(arg=2, lineno=674)
          66	GET_ITER(arg=None, lineno=674)
>         68	FOR_ITER(arg=46, lineno=674)
          70	STORE_FAST(arg=1, lineno=674)
          72	LOAD_GLOBAL(arg=3, lineno=675)
          74	LOAD_METHOD(arg=4, lineno=675)
          76	LOAD_FAST(arg=1, lineno=675)
          78	CALL_METHOD(arg=1, lineno=675)
          80	POP_JUMP_IF_FALSE(arg=90, lineno=675)
          82	LOAD_FAST(arg=4, lineno=676)
          84	ROT_TWO(arg=None, lineno=676)
          86	POP_TOP(arg=None, lineno=676)
          88	RETURN_VALUE(arg=None, lineno=676)
>         90	LOAD_FAST(arg=1, lineno=677)
          92	LOAD_FAST(arg=2, lineno=677)
          94	COMPARE_OP(arg=0, lineno=677)
          96	POP_JUMP_IF_FALSE(arg=106, lineno=677)
          98	LOAD_FAST(arg=1, lineno=678)
         100	STORE_FAST(arg=2, lineno=678)
         102	LOAD_FAST(arg=4, lineno=679)
         104	STORE_FAST(arg=3, lineno=679)
>        106	LOAD_FAST(arg=4, lineno=680)
         108	LOAD_CONST(arg=3, lineno=680)
         110	INPLACE_ADD(arg=None, lineno=680)
         112	STORE_FAST(arg=4, lineno=680)
         114	JUMP_ABSOLUTE(arg=68, lineno=680)
>        116	LOAD_FAST(arg=3, lineno=681)
         118	RETURN_VALUE(arg=None, lineno=681)
2021-10-21 20:30:49,367 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=0 nstack_initial=0)])
2021-10-21 20:30:49,367 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,367 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=0, inst=NOP(arg=None, lineno=664)
2021-10-21 20:30:49,367 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,367 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=664)
2021-10-21 20:30:49,367 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,367 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=664)
2021-10-21 20:30:49,368 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$arry2.0']
2021-10-21 20:30:49,368 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=664)
2021-10-21 20:30:49,368 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_attr.1']
2021-10-21 20:30:49,368 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=664)
2021-10-21 20:30:49,368 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_attr.1', '$const6.2']
2021-10-21 20:30:49,368 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=20, lineno=664)
2021-10-21 20:30:49,368 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$8compare_op.3']
2021-10-21 20:30:49,369 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
2021-10-21 20:30:49,369 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
2021-10-21 20:30:49,369 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,369 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=665)
2021-10-21 20:30:49,369 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,369 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=665)
2021-10-21 20:30:49,369 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$12load_global.0']
2021-10-21 20:30:49,369 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=665)
2021-10-21 20:30:49,370 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$12load_global.0', '$const14.1']
2021-10-21 20:30:49,370 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=18, inst=RAISE_VARARGS(arg=1, lineno=665)
2021-10-21 20:30:49,370 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16call_function.2']
2021-10-21 20:30:49,370 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2021-10-21 20:30:49,370 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=20 nstack_initial=0)])
2021-10-21 20:30:49,370 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,370 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=666)
2021-10-21 20:30:49,371 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,371 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=666)
2021-10-21 20:30:49,371 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$arry20.0']
2021-10-21 20:30:49,371 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=24, inst=GET_ITER(arg=None, lineno=666)
2021-10-21 20:30:49,371 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$22load_attr.1']
2021-10-21 20:30:49,371 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=26, stack=('$24get_iter.2',), blockstack=(), npush=0)]
2021-10-21 20:30:49,371 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=26 nstack_initial=1)])
2021-10-21 20:30:49,371 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi26.0']
2021-10-21 20:30:49,372 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=26, inst=FOR_ITER(arg=16, lineno=666)
2021-10-21 20:30:49,372 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi26.0']
2021-10-21 20:30:49,372 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=('$phi26.0', '$26for_iter.2'), blockstack=(), npush=0)]
2021-10-21 20:30:49,372 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=28 nstack_initial=2)])
2021-10-21 20:30:49,372 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,372 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=44, inst=LOAD_GLOBAL(arg=3, lineno=670)
2021-10-21 20:30:49,372 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,372 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=46, inst=LOAD_METHOD(arg=4, lineno=670)
2021-10-21 20:30:49,373 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$44load_global.0']
2021-10-21 20:30:49,373 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=670)
2021-10-21 20:30:49,373 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$46load_method.1']
2021-10-21 20:30:49,373 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=50, inst=CALL_METHOD(arg=1, lineno=670)
2021-10-21 20:30:49,373 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$46load_method.1', '$min_value48.2']
2021-10-21 20:30:49,373 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=58, lineno=670)
2021-10-21 20:30:49,373 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$50call_method.3']
2021-10-21 20:30:49,374 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
2021-10-21 20:30:49,374 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=28 nstack_initial=2), State(pc_initial=54 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
2021-10-21 20:30:49,374 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi28.0', '$phi28.1']
2021-10-21 20:30:49,374 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=28, inst=STORE_FAST(arg=1, lineno=666)
2021-10-21 20:30:49,374 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi28.0', '$phi28.1']
2021-10-21 20:30:49,374 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=667)
2021-10-21 20:30:49,375 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi28.0']
2021-10-21 20:30:49,376 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=32, inst=STORE_FAST(arg=2, lineno=667)
2021-10-21 20:30:49,377 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi28.0', '$v30.2']
2021-10-21 20:30:49,377 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=668)
2021-10-21 20:30:49,378 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi28.0']
2021-10-21 20:30:49,378 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=36, inst=STORE_FAST(arg=3, lineno=668)
2021-10-21 20:30:49,378 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi28.0', '$const34.3']
2021-10-21 20:30:49,378 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=38, inst=POP_TOP(arg=None, lineno=669)
2021-10-21 20:30:49,379 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi28.0']
2021-10-21 20:30:49,379 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=40, inst=JUMP_ABSOLUTE(arg=44, lineno=669)
2021-10-21 20:30:49,379 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,379 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2021-10-21 20:30:49,379 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2021-10-21 20:30:49,380 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,380 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=54, inst=LOAD_FAST(arg=3, lineno=671)
2021-10-21 20:30:49,380 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,381 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=671)
2021-10-21 20:30:49,381 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$min_idx54.0']
2021-10-21 20:30:49,381 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2021-10-21 20:30:49,381 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2021-10-21 20:30:49,381 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,381 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=58, inst=LOAD_CONST(arg=1, lineno=673)
2021-10-21 20:30:49,382 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,382 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=60, inst=STORE_FAST(arg=4, lineno=673)
2021-10-21 20:30:49,382 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$const58.0']
2021-10-21 20:30:49,382 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=674)
2021-10-21 20:30:49,382 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,382 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=64, inst=LOAD_ATTR(arg=2, lineno=674)
2021-10-21 20:30:49,382 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$arry62.1']
2021-10-21 20:30:49,382 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=66, inst=GET_ITER(arg=None, lineno=674)
2021-10-21 20:30:49,383 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$64load_attr.2']
2021-10-21 20:30:49,383 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=68, stack=('$66get_iter.3',), blockstack=(), npush=0)]
2021-10-21 20:30:49,383 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=68 nstack_initial=1)])
2021-10-21 20:30:49,383 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=68 nstack_initial=1)])
2021-10-21 20:30:49,383 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi68.0']
2021-10-21 20:30:49,384 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=68, inst=FOR_ITER(arg=46, lineno=674)
2021-10-21 20:30:49,384 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi68.0']
2021-10-21 20:30:49,384 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=116, stack=(), blockstack=(), npush=0), Edge(pc=70, stack=('$phi68.0', '$68for_iter.2'), blockstack=(), npush=0)]
2021-10-21 20:30:49,384 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=70 nstack_initial=2)])
2021-10-21 20:30:49,385 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2021-10-21 20:30:49,385 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=116, inst=LOAD_FAST(arg=3, lineno=681)
2021-10-21 20:30:49,385 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2021-10-21 20:30:49,385 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=118, inst=RETURN_VALUE(arg=None, lineno=681)
2021-10-21 20:30:49,385 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$min_idx116.0']
2021-10-21 20:30:49,385 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2021-10-21 20:30:49,385 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=70 nstack_initial=2)])
2021-10-21 20:30:49,386 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi70.0', '$phi70.1']
2021-10-21 20:30:49,386 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=70, inst=STORE_FAST(arg=1, lineno=674)
2021-10-21 20:30:49,386 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi70.0', '$phi70.1']
2021-10-21 20:30:49,386 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=72, inst=LOAD_GLOBAL(arg=3, lineno=675)
2021-10-21 20:30:49,386 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi70.0']
2021-10-21 20:30:49,386 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=74, inst=LOAD_METHOD(arg=4, lineno=675)
2021-10-21 20:30:49,386 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi70.0', '$72load_global.2']
2021-10-21 20:30:49,386 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=76, inst=LOAD_FAST(arg=1, lineno=675)
2021-10-21 20:30:49,387 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi70.0', '$74load_method.3']
2021-10-21 20:30:49,387 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=78, inst=CALL_METHOD(arg=1, lineno=675)
2021-10-21 20:30:49,387 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi70.0', '$74load_method.3', '$v76.4']
2021-10-21 20:30:49,387 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=90, lineno=675)
2021-10-21 20:30:49,387 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi70.0', '$78call_method.5']
2021-10-21 20:30:49,387 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=82, stack=('$phi70.0',), blockstack=(), npush=0), Edge(pc=90, stack=('$phi70.0',), blockstack=(), npush=0)]
2021-10-21 20:30:49,388 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=82 nstack_initial=1), State(pc_initial=90 nstack_initial=1)])
2021-10-21 20:30:49,388 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi82.0']
2021-10-21 20:30:49,388 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=82, inst=LOAD_FAST(arg=4, lineno=676)
2021-10-21 20:30:49,388 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi82.0']
2021-10-21 20:30:49,388 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=84, inst=ROT_TWO(arg=None, lineno=676)
2021-10-21 20:30:49,388 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi82.0', '$idx82.1']
2021-10-21 20:30:49,388 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=86, inst=POP_TOP(arg=None, lineno=676)
2021-10-21 20:30:49,388 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$idx82.1', '$phi82.0']
2021-10-21 20:30:49,389 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=88, inst=RETURN_VALUE(arg=None, lineno=676)
2021-10-21 20:30:49,389 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$idx82.1']
2021-10-21 20:30:49,389 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2021-10-21 20:30:49,389 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=90 nstack_initial=1)])
2021-10-21 20:30:49,389 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi90.0']
2021-10-21 20:30:49,389 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=90, inst=LOAD_FAST(arg=1, lineno=677)
2021-10-21 20:30:49,389 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi90.0']
2021-10-21 20:30:49,390 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=677)
2021-10-21 20:30:49,390 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi90.0', '$v90.1']
2021-10-21 20:30:49,390 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=94, inst=COMPARE_OP(arg=0, lineno=677)
2021-10-21 20:30:49,390 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi90.0', '$v90.1', '$min_value92.2']
2021-10-21 20:30:49,390 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=106, lineno=677)
2021-10-21 20:30:49,391 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi90.0', '$94compare_op.3']
2021-10-21 20:30:49,391 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=98, stack=('$phi90.0',), blockstack=(), npush=0), Edge(pc=106, stack=('$phi90.0',), blockstack=(), npush=0)]
2021-10-21 20:30:49,391 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=98 nstack_initial=1), State(pc_initial=106 nstack_initial=1)])
2021-10-21 20:30:49,392 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi98.0']
2021-10-21 20:30:49,392 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=98, inst=LOAD_FAST(arg=1, lineno=678)
2021-10-21 20:30:49,392 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0']
2021-10-21 20:30:49,392 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=100, inst=STORE_FAST(arg=2, lineno=678)
2021-10-21 20:30:49,393 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$v98.1']
2021-10-21 20:30:49,393 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=679)
2021-10-21 20:30:49,393 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0']
2021-10-21 20:30:49,393 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=104, inst=STORE_FAST(arg=3, lineno=679)
2021-10-21 20:30:49,393 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$idx102.2']
2021-10-21 20:30:49,393 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=106, stack=('$phi98.0',), blockstack=(), npush=0)]
2021-10-21 20:30:49,393 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=106 nstack_initial=1), State(pc_initial=106 nstack_initial=1)])
2021-10-21 20:30:49,394 [10148] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi106.0']
2021-10-21 20:30:49,394 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=680)
2021-10-21 20:30:49,394 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi106.0']
2021-10-21 20:30:49,394 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=108, inst=LOAD_CONST(arg=3, lineno=680)
2021-10-21 20:30:49,394 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi106.0', '$idx106.1']
2021-10-21 20:30:49,394 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=110, inst=INPLACE_ADD(arg=None, lineno=680)
2021-10-21 20:30:49,394 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi106.0', '$idx106.1', '$const108.2']
2021-10-21 20:30:49,394 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=112, inst=STORE_FAST(arg=4, lineno=680)
2021-10-21 20:30:49,395 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi106.0', '$110inplace_add.3']
2021-10-21 20:30:49,395 [10148] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=114, inst=JUMP_ABSOLUTE(arg=68, lineno=680)
2021-10-21 20:30:49,395 [10148] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi106.0']
2021-10-21 20:30:49,395 [10148] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=68, stack=('$phi106.0',), blockstack=(), npush=0)]
2021-10-21 20:30:49,395 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=106 nstack_initial=1), State(pc_initial=68 nstack_initial=1)])
2021-10-21 20:30:49,395 [10148] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=68 nstack_initial=1)])
2021-10-21 20:30:49,395 [10148] DEBUG    numba.core.byteflow:163: [JupyterRequire] -------------------------Prune PHIs-------------------------
2021-10-21 20:30:49,396 [10148] DEBUG    numba.core.byteflow:232: [JupyterRequire] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=1): {'$phi26.0'},
             State(pc_initial=28 nstack_initial=2): {'$phi28.1'},
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=1): {'$phi68.0'},
             State(pc_initial=70 nstack_initial=2): {'$phi70.1'},
             State(pc_initial=82 nstack_initial=1): set(),
             State(pc_initial=90 nstack_initial=1): set(),
             State(pc_initial=98 nstack_initial=1): set(),
             State(pc_initial=106 nstack_initial=1): set(),
             State(pc_initial=116 nstack_initial=0): set()})
2021-10-21 20:30:49,396 [10148] DEBUG    numba.core.byteflow:189: [JupyterRequire] defmap: {'$phi26.0': State(pc_initial=20 nstack_initial=0),
 '$phi28.1': State(pc_initial=26 nstack_initial=1),
 '$phi68.0': State(pc_initial=58 nstack_initial=0),
 '$phi70.1': State(pc_initial=68 nstack_initial=1)}
2021-10-21 20:30:49,396 [10148] DEBUG    numba.core.byteflow:190: [JupyterRequire] phismap: defaultdict(<class 'set'>,
            {'$phi106.0': {('$phi90.0', State(pc_initial=90 nstack_initial=1)),
                           ('$phi98.0', State(pc_initial=98 nstack_initial=1))},
             '$phi26.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.0': {('$phi26.0', State(pc_initial=26 nstack_initial=1))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))},
             '$phi68.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0)),
                          ('$phi106.0',
                           State(pc_initial=106 nstack_initial=1))},
             '$phi70.0': {('$phi68.0', State(pc_initial=68 nstack_initial=1))},
             '$phi70.1': {('$68for_iter.2',
                           State(pc_initial=68 nstack_initial=1))},
             '$phi82.0': {('$phi70.0', State(pc_initial=70 nstack_initial=2))},
             '$phi90.0': {('$phi70.0', State(pc_initial=70 nstack_initial=2))},
             '$phi98.0': {('$phi90.0', State(pc_initial=90 nstack_initial=1))}})
2021-10-21 20:30:49,396 [10148] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi106.0': {('$phi70.0', State(pc_initial=70 nstack_initial=2))},
             '$phi26.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))},
             '$phi68.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0)),
                          ('$phi70.0', State(pc_initial=70 nstack_initial=2))},
             '$phi70.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0)),
                          ('$phi70.0', State(pc_initial=70 nstack_initial=2))},
             '$phi70.1': {('$68for_iter.2',
                           State(pc_initial=68 nstack_initial=1))},
             '$phi82.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi90.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi98.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))}})
2021-10-21 20:30:49,397 [10148] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi106.0': {('$66get_iter.3',
                            State(pc_initial=58 nstack_initial=0))},
             '$phi26.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))},
             '$phi68.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi70.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi70.1': {('$68for_iter.2',
                           State(pc_initial=68 nstack_initial=1))},
             '$phi82.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi90.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi98.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))}})
2021-10-21 20:30:49,397 [10148] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi106.0': {('$66get_iter.3',
                            State(pc_initial=58 nstack_initial=0))},
             '$phi26.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))},
             '$phi68.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi70.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi70.1': {('$68for_iter.2',
                           State(pc_initial=68 nstack_initial=1))},
             '$phi82.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi90.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi98.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))}})
2021-10-21 20:30:49,398 [10148] DEBUG    numba.core.byteflow:220: [JupyterRequire] keep phismap: {'$phi26.0': {('$24get_iter.2', State(pc_initial=20 nstack_initial=0))},
 '$phi28.1': {('$26for_iter.2', State(pc_initial=26 nstack_initial=1))},
 '$phi68.0': {('$66get_iter.3', State(pc_initial=58 nstack_initial=0))},
 '$phi70.1': {('$68for_iter.2', State(pc_initial=68 nstack_initial=1))}}
2021-10-21 20:30:49,398 [10148] DEBUG    numba.core.byteflow:226: [JupyterRequire] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=20 nstack_initial=0): {'$phi26.0': '$24get_iter.2'},
             State(pc_initial=26 nstack_initial=1): {'$phi28.1': '$26for_iter.2'},
             State(pc_initial=58 nstack_initial=0): {'$phi68.0': '$66get_iter.3'},
             State(pc_initial=68 nstack_initial=1): {'$phi70.1': '$68for_iter.2'}})
2021-10-21 20:30:49,398 [10148] DEBUG    numba.core.byteflow:236: [JupyterRequire] ----------------------DONE Prune PHIs-----------------------
2021-10-21 20:30:49,398 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arry2.0'}), (4, {'item': '$arry2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
2021-10-21 20:30:49,398 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$const14.1'}), (16, {'func': '$12load_global.0', 'args': ['$const14.1'], 'res': '$16call_function.2'}), (18, {'exc': '$16call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2021-10-21 20:30:49,399 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$arry20.0'}), (22, {'item': '$arry20.0', 'res': '$22load_attr.1'}), (24, {'value': '$22load_attr.1', 'res': '$24get_iter.2'})), outgoing_phis={'$phi26.0': '$24get_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ('$24get_iter.2',)})
2021-10-21 20:30:49,399 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=26 nstack_initial=1):
AdaptBlockInfo(insts=((26, {'iterator': '$phi26.0', 'pair': '$26for_iter.1', 'indval': '$26for_iter.2', 'pred': '$26for_iter.3'}),), outgoing_phis={'$phi28.1': '$26for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 28: ('$phi26.0', '$26for_iter.2')})
2021-10-21 20:30:49,399 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=28 nstack_initial=2):
AdaptBlockInfo(insts=((28, {'value': '$phi28.1'}), (30, {'res': '$v30.2'}), (32, {'value': '$v30.2'}), (34, {'res': '$const34.3'}), (36, {'value': '$const34.3'}), (40, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2021-10-21 20:30:49,399 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'item': '$44load_global.0', 'res': '$46load_method.1'}), (48, {'res': '$min_value48.2'}), (50, {'func': '$46load_method.1', 'args': ['$min_value48.2'], 'res': '$50call_method.3'}), (52, {'pred': '$50call_method.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 58: ()})
2021-10-21 20:30:49,399 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$min_idx54.0'}), (56, {'retval': '$min_idx54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2021-10-21 20:30:49,399 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$const58.0'}), (60, {'value': '$const58.0'}), (62, {'res': '$arry62.1'}), (64, {'item': '$arry62.1', 'res': '$64load_attr.2'}), (66, {'value': '$64load_attr.2', 'res': '$66get_iter.3'})), outgoing_phis={'$phi68.0': '$66get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: ('$66get_iter.3',)})
2021-10-21 20:30:49,399 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=68 nstack_initial=1):
AdaptBlockInfo(insts=((68, {'iterator': '$phi68.0', 'pair': '$68for_iter.1', 'indval': '$68for_iter.2', 'pred': '$68for_iter.3'}),), outgoing_phis={'$phi70.1': '$68for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={116: (), 70: ('$phi68.0', '$68for_iter.2')})
2021-10-21 20:30:49,399 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=70 nstack_initial=2):
AdaptBlockInfo(insts=((70, {'value': '$phi70.1'}), (72, {'res': '$72load_global.2'}), (74, {'item': '$72load_global.2', 'res': '$74load_method.3'}), (76, {'res': '$v76.4'}), (78, {'func': '$74load_method.3', 'args': ['$v76.4'], 'res': '$78call_method.5'}), (80, {'pred': '$78call_method.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: ('$phi70.0',), 90: ('$phi70.0',)})
2021-10-21 20:30:49,400 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=82 nstack_initial=1):
AdaptBlockInfo(insts=((82, {'res': '$idx82.1'}), (88, {'retval': '$idx82.1', 'castval': '$88return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2021-10-21 20:30:49,400 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=90 nstack_initial=1):
AdaptBlockInfo(insts=((90, {'res': '$v90.1'}), (92, {'res': '$min_value92.2'}), (94, {'lhs': '$v90.1', 'rhs': '$min_value92.2', 'res': '$94compare_op.3'}), (96, {'pred': '$94compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi90.0',), 106: ('$phi90.0',)})
2021-10-21 20:30:49,400 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=98 nstack_initial=1):
AdaptBlockInfo(insts=((98, {'res': '$v98.1'}), (100, {'value': '$v98.1'}), (102, {'res': '$idx102.2'}), (104, {'value': '$idx102.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ('$phi98.0',)})
2021-10-21 20:30:49,400 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=106 nstack_initial=1):
AdaptBlockInfo(insts=((106, {'res': '$idx106.1'}), (108, {'res': '$const108.2'}), (110, {'lhs': '$idx106.1', 'rhs': '$const108.2', 'res': '$110inplace_add.3'}), (112, {'value': '$110inplace_add.3'}), (114, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: ('$phi106.0',)})
2021-10-21 20:30:49,400 [10148] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'res': '$min_idx116.0'}), (118, {'retval': '$min_idx116.0', 'castval': '$118return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2021-10-21 20:30:49,402 [10148] DEBUG    numba.core.interpreter:149: [JupyterRequire] label 0:
    arry = arg(0, name=arry)                 ['arry']
    $4load_attr.1 = getattr(value=arry, attr=size) ['$4load_attr.1', 'arry']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_global.0 = global(ValueError: <class 'ValueError'>) ['$12load_global.0']
    $const14.1 = const(str, attempt to get argmin of an empty sequence) ['$const14.1']
    $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', '$const14.1']
    raise $16call_function.2                 ['$16call_function.2']
label 20:
    $22load_attr.1 = getattr(value=arry, attr=flat) ['$22load_attr.1', 'arry']
    $24get_iter.2 = getiter(value=$22load_attr.1) ['$22load_attr.1', '$24get_iter.2']
    $phi26.0 = $24get_iter.2                 ['$24get_iter.2', '$phi26.0']
    jump 26                                  []
label 26:
    $26for_iter.1 = iternext(value=$phi26.0) ['$26for_iter.1', '$phi26.0']
    $26for_iter.2 = pair_first(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.2']
    $26for_iter.3 = pair_second(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.3']
    $phi28.1 = $26for_iter.2                 ['$26for_iter.2', '$phi28.1']
    branch $26for_iter.3, 28, 44             ['$26for_iter.3']
label 28:
    v = $phi28.1                             ['$phi28.1', 'v']
    min_value = v                            ['min_value', 'v']
    $const34.3 = const(int, 0)               ['$const34.3']
    min_idx = $const34.3                     ['$const34.3', 'min_idx']
    jump 44                                  []
label 44:
    $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$44load_global.0']
    $46load_method.1 = getattr(value=$44load_global.0, attr=isnan) ['$44load_global.0', '$46load_method.1']
    $50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None) ['$46load_method.1', '$50call_method.3', 'min_value']
    bool52 = global(bool: <class 'bool'>)    ['bool52']
    $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None) ['$50call_method.3', '$52pred', 'bool52']
    branch $52pred, 54, 58                   ['$52pred']
label 54:
    $56return_value.1 = cast(value=min_idx)  ['$56return_value.1', 'min_idx']
    return $56return_value.1                 ['$56return_value.1']
label 58:
    $const58.0 = const(int, 0)               ['$const58.0']
    idx = $const58.0                         ['$const58.0', 'idx']
    $64load_attr.2 = getattr(value=arry, attr=flat) ['$64load_attr.2', 'arry']
    $66get_iter.3 = getiter(value=$64load_attr.2) ['$64load_attr.2', '$66get_iter.3']
    $phi68.0 = $66get_iter.3                 ['$66get_iter.3', '$phi68.0']
    jump 68                                  []
label 68:
    $68for_iter.1 = iternext(value=$phi68.0) ['$68for_iter.1', '$phi68.0']
    $68for_iter.2 = pair_first(value=$68for_iter.1) ['$68for_iter.1', '$68for_iter.2']
    $68for_iter.3 = pair_second(value=$68for_iter.1) ['$68for_iter.1', '$68for_iter.3']
    $phi70.1 = $68for_iter.2                 ['$68for_iter.2', '$phi70.1']
    branch $68for_iter.3, 70, 116            ['$68for_iter.3']
label 70:
    v = $phi70.1                             ['$phi70.1', 'v']
    $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$72load_global.2']
    $74load_method.3 = getattr(value=$72load_global.2, attr=isnan) ['$72load_global.2', '$74load_method.3']
    $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None) ['$74load_method.3', '$78call_method.5', 'v']
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None) ['$78call_method.5', '$80pred', 'bool80']
    branch $80pred, 82, 90                   ['$80pred']
label 82:
    $88return_value.2 = cast(value=idx)      ['$88return_value.2', 'idx']
    return $88return_value.2                 ['$88return_value.2']
label 90:
    $94compare_op.3 = v < min_value          ['$94compare_op.3', 'min_value', 'v']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None) ['$94compare_op.3', '$96pred', 'bool96']
    branch $96pred, 98, 106                  ['$96pred']
label 98:
    min_value = v                            ['min_value', 'v']
    min_idx = idx                            ['idx', 'min_idx']
    jump 106                                 []
label 106:
    $const108.2 = const(int, 1)              ['$const108.2']
    $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined) ['$110inplace_add.3', '$const108.2', 'idx']
    idx = $110inplace_add.3                  ['$110inplace_add.3', 'idx']
    jump 68                                  []
label 116:
    $118return_value.1 = cast(value=min_idx) ['$118return_value.1', 'min_idx']
    return $118return_value.1                ['$118return_value.1']

2021-10-21 20:30:49,568 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 0
2021-10-21 20:30:49,569 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,569 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2021-10-21 20:30:49,569 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2021-10-21 20:30:49,569 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2021-10-21 20:30:49,569 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2021-10-21 20:30:49,569 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,569 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2021-10-21 20:30:49,570 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2021-10-21 20:30:49,570 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 12
2021-10-21 20:30:49,570 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,570 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2021-10-21 20:30:49,571 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2021-10-21 20:30:49,571 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2021-10-21 20:30:49,571 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2021-10-21 20:30:49,571 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 20
2021-10-21 20:30:49,572 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,572 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,573 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2021-10-21 20:30:49,574 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2021-10-21 20:30:49,577 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2021-10-21 20:30:49,586 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 26
2021-10-21 20:30:49,586 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,587 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2021-10-21 20:30:49,587 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2021-10-21 20:30:49,588 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2021-10-21 20:30:49,588 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2021-10-21 20:30:49,589 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2021-10-21 20:30:49,589 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 28
2021-10-21 20:30:49,589 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,590 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2021-10-21 20:30:49,590 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2021-10-21 20:30:49,590 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2021-10-21 20:30:49,591 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2021-10-21 20:30:49,592 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2021-10-21 20:30:49,592 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 44
2021-10-21 20:30:49,592 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,593 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,594 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2021-10-21 20:30:49,595 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None)
2021-10-21 20:30:49,596 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,599 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2021-10-21 20:30:49,601 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2021-10-21 20:30:49,603 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 54
2021-10-21 20:30:49,604 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,604 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx)
2021-10-21 20:30:49,605 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2021-10-21 20:30:49,605 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 58
2021-10-21 20:30:49,606 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,606 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2021-10-21 20:30:49,607 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2021-10-21 20:30:49,607 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,607 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2021-10-21 20:30:49,607 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2021-10-21 20:30:49,608 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,608 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 68
2021-10-21 20:30:49,609 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,610 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2021-10-21 20:30:49,613 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2021-10-21 20:30:49,615 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2021-10-21 20:30:49,616 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2021-10-21 20:30:49,616 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2021-10-21 20:30:49,617 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 70
2021-10-21 20:30:49,617 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,617 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi70.1
2021-10-21 20:30:49,617 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,617 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2021-10-21 20:30:49,618 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2021-10-21 20:30:49,618 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,618 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2021-10-21 20:30:49,618 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2021-10-21 20:30:49,619 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 82
2021-10-21 20:30:49,619 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,619 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx)
2021-10-21 20:30:49,619 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2021-10-21 20:30:49,620 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 90
2021-10-21 20:30:49,620 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,620 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v < min_value
2021-10-21 20:30:49,620 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,621 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2021-10-21 20:30:49,621 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2021-10-21 20:30:49,621 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 98
2021-10-21 20:30:49,622 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,622 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2021-10-21 20:30:49,623 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = idx
2021-10-21 20:30:49,624 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2021-10-21 20:30:49,625 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 106
2021-10-21 20:30:49,627 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,628 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2021-10-21 20:30:49,628 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:49,629 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $110inplace_add.3
2021-10-21 20:30:49,629 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,629 [10148] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 116
2021-10-21 20:30:49,629 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,630 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx)
2021-10-21 20:30:49,630 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2021-10-21 20:30:49,631 [10148] DEBUG    numba.core.ssa:141: [JupyterRequire] defs defaultdict(<class 'list'>,
            {'$10pred': [<numba.core.ir.Assign object at 0x0000016A54FD7100>],
             '$110inplace_add.3': [<numba.core.ir.Assign object at 0x0000016A54FE61C0>],
             '$118return_value.1': [<numba.core.ir.Assign object at 0x0000016A54FE6640>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x0000016A54FD7340>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x0000016A54FD7670>],
             '$22load_attr.1': [<numba.core.ir.Assign object at 0x0000016A54FD7A60>],
             '$24get_iter.2': [<numba.core.ir.Assign object at 0x0000016A54FD7BE0>],
             '$26for_iter.1': [<numba.core.ir.Assign object at 0x0000016A54FD7F40>],
             '$26for_iter.2': [<numba.core.ir.Assign object at 0x0000016A54FDE0A0>],
             '$26for_iter.3': [<numba.core.ir.Assign object at 0x0000016A54FDE1C0>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x0000016A54FDEBE0>],
             '$46load_method.1': [<numba.core.ir.Assign object at 0x0000016A54FDED60>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x0000016A54FC9190>],
             '$50call_method.3': [<numba.core.ir.Assign object at 0x0000016A54FE0070>],
             '$52pred': [<numba.core.ir.Assign object at 0x0000016A54FE02E0>],
             '$56return_value.1': [<numba.core.ir.Assign object at 0x0000016A54FE0640>],
             '$64load_attr.2': [<numba.core.ir.Assign object at 0x0000016A54FE0C40>],
             '$66get_iter.3': [<numba.core.ir.Assign object at 0x0000016A54FE0DC0>],
             '$68for_iter.1': [<numba.core.ir.Assign object at 0x0000016A54FE2160>],
             '$68for_iter.2': [<numba.core.ir.Assign object at 0x0000016A54FE2280>],
             '$68for_iter.3': [<numba.core.ir.Assign object at 0x0000016A54FE23A0>],
             '$72load_global.2': [<numba.core.ir.Assign object at 0x0000016A54FE2760>],
             '$74load_method.3': [<numba.core.ir.Assign object at 0x0000016A54FE28E0>],
             '$78call_method.5': [<numba.core.ir.Assign object at 0x0000016A54FE2BB0>],
             '$80pred': [<numba.core.ir.Assign object at 0x0000016A54FE2E20>],
             '$88return_value.2': [<numba.core.ir.Assign object at 0x0000016A54FE41C0>],
             '$8compare_op.3': [<numba.core.ir.Assign object at 0x0000016A54FC9E20>],
             '$94compare_op.3': [<numba.core.ir.Assign object at 0x0000016A54FE4640>],
             '$96pred': [<numba.core.ir.Assign object at 0x0000016A54FE48E0>],
             '$const108.2': [<numba.core.ir.Assign object at 0x0000016A54FE6040>],
             '$const14.1': [<numba.core.ir.Assign object at 0x0000016A54FD74C0>],
             '$const34.3': [<numba.core.ir.Assign object at 0x0000016A54FDE820>],
             '$const58.0': [<numba.core.ir.Assign object at 0x0000016A54FE0880>],
             '$const6.2': [<numba.core.ir.Assign object at 0x0000016A54FC9CA0>],
             '$phi26.0': [<numba.core.ir.Assign object at 0x0000016A54FD71F0>],
             '$phi28.1': [<numba.core.ir.Assign object at 0x0000016A54FD7E50>],
             '$phi68.0': [<numba.core.ir.Assign object at 0x0000016A54FE03D0>],
             '$phi70.1': [<numba.core.ir.Assign object at 0x0000016A54FE2070>],
             'arry': [<numba.core.ir.Assign object at 0x0000016A54FC9B20>],
             'bool10': [<numba.core.ir.Assign object at 0x0000016A54FC9FA0>],
             'bool52': [<numba.core.ir.Assign object at 0x0000016A54FE01C0>],
             'bool80': [<numba.core.ir.Assign object at 0x0000016A54FE2D00>],
             'bool96': [<numba.core.ir.Assign object at 0x0000016A54FE47C0>],
             'idx': [<numba.core.ir.Assign object at 0x0000016A54FE09A0>,
                     <numba.core.ir.Assign object at 0x0000016A54FE6280>],
             'min_idx': [<numba.core.ir.Assign object at 0x0000016A54FDE940>,
                         <numba.core.ir.Assign object at 0x0000016A54FE4D00>],
             'min_value': [<numba.core.ir.Assign object at 0x0000016A54FDE6A0>,
                           <numba.core.ir.Assign object at 0x0000016A54FE4B20>],
             'v': [<numba.core.ir.Assign object at 0x0000016A54FDE460>,
                   <numba.core.ir.Assign object at 0x0000016A54FE25E0>]})
2021-10-21 20:30:49,631 [10148] DEBUG    numba.core.ssa:143: [JupyterRequire] SSA violators {'min_value', 'min_idx', 'v', 'idx'}
2021-10-21 20:30:49,631 [10148] DEBUG    numba.core.ssa:49: [JupyterRequire] Fix SSA violator on var min_value
2021-10-21 20:30:49,632 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2021-10-21 20:30:49,632 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,632 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2021-10-21 20:30:49,632 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2021-10-21 20:30:49,632 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2021-10-21 20:30:49,632 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2021-10-21 20:30:49,633 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,633 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2021-10-21 20:30:49,633 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2021-10-21 20:30:49,634 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2021-10-21 20:30:49,634 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,634 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2021-10-21 20:30:49,634 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2021-10-21 20:30:49,634 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2021-10-21 20:30:49,635 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2021-10-21 20:30:49,635 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2021-10-21 20:30:49,635 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,635 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,635 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2021-10-21 20:30:49,636 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2021-10-21 20:30:49,636 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2021-10-21 20:30:49,636 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2021-10-21 20:30:49,636 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,636 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2021-10-21 20:30:49,636 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2021-10-21 20:30:49,637 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2021-10-21 20:30:49,637 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2021-10-21 20:30:49,637 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2021-10-21 20:30:49,637 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2021-10-21 20:30:49,637 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,637 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2021-10-21 20:30:49,638 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2021-10-21 20:30:49,638 [10148] DEBUG    numba.core.ssa:256: [JupyterRequire] first assign: min_value
2021-10-21 20:30:49,638 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: min_value = v
2021-10-21 20:30:49,638 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2021-10-21 20:30:49,638 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2021-10-21 20:30:49,638 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2021-10-21 20:30:49,639 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2021-10-21 20:30:49,639 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,639 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,640 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2021-10-21 20:30:49,640 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None)
2021-10-21 20:30:49,641 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,641 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2021-10-21 20:30:49,641 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2021-10-21 20:30:49,642 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2021-10-21 20:30:49,642 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,642 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx)
2021-10-21 20:30:49,643 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2021-10-21 20:30:49,643 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2021-10-21 20:30:49,643 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,644 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2021-10-21 20:30:49,645 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2021-10-21 20:30:49,646 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,647 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2021-10-21 20:30:49,650 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2021-10-21 20:30:49,653 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,664 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2021-10-21 20:30:49,667 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,668 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2021-10-21 20:30:49,668 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2021-10-21 20:30:49,668 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2021-10-21 20:30:49,668 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2021-10-21 20:30:49,669 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2021-10-21 20:30:49,669 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2021-10-21 20:30:49,669 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,669 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi70.1
2021-10-21 20:30:49,670 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,670 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2021-10-21 20:30:49,670 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2021-10-21 20:30:49,671 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,672 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2021-10-21 20:30:49,674 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2021-10-21 20:30:49,674 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2021-10-21 20:30:49,675 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,677 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx)
2021-10-21 20:30:49,678 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2021-10-21 20:30:49,680 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2021-10-21 20:30:49,681 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,682 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v < min_value
2021-10-21 20:30:49,682 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,682 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2021-10-21 20:30:49,682 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2021-10-21 20:30:49,683 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2021-10-21 20:30:49,683 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,683 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2021-10-21 20:30:49,683 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: min_value.1 = v
2021-10-21 20:30:49,683 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = idx
2021-10-21 20:30:49,683 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2021-10-21 20:30:49,684 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2021-10-21 20:30:49,684 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,684 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2021-10-21 20:30:49,684 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:49,684 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $110inplace_add.3
2021-10-21 20:30:49,684 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,685 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2021-10-21 20:30:49,685 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6AF0>
2021-10-21 20:30:49,685 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx)
2021-10-21 20:30:49,685 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2021-10-21 20:30:49,685 [10148] DEBUG    numba.core.ssa:55: [JupyterRequire] Replaced assignments: defaultdict(<class 'list'>,
            {28: [<numba.core.ir.Assign object at 0x0000016A54FE6E20>],
             98: [<numba.core.ir.Assign object at 0x0000016A5502B340>]})
2021-10-21 20:30:49,686 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2021-10-21 20:30:49,686 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,686 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2021-10-21 20:30:49,686 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2021-10-21 20:30:49,687 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2021-10-21 20:30:49,687 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2021-10-21 20:30:49,687 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,687 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2021-10-21 20:30:49,687 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2021-10-21 20:30:49,688 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2021-10-21 20:30:49,688 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,688 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2021-10-21 20:30:49,688 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2021-10-21 20:30:49,688 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2021-10-21 20:30:49,688 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2021-10-21 20:30:49,689 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2021-10-21 20:30:49,689 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,689 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,690 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2021-10-21 20:30:49,692 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2021-10-21 20:30:49,695 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2021-10-21 20:30:49,708 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2021-10-21 20:30:49,709 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,709 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2021-10-21 20:30:49,710 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2021-10-21 20:30:49,710 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2021-10-21 20:30:49,710 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2021-10-21 20:30:49,711 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2021-10-21 20:30:49,711 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2021-10-21 20:30:49,711 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,711 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2021-10-21 20:30:49,711 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2021-10-21 20:30:49,711 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2021-10-21 20:30:49,712 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2021-10-21 20:30:49,712 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2021-10-21 20:30:49,712 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2021-10-21 20:30:49,713 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,713 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,713 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2021-10-21 20:30:49,713 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None)
2021-10-21 20:30:49,714 [10148] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='min_value' stmt=$50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None)
2021-10-21 20:30:49,715 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 44
2021-10-21 20:30:49,716 [10148] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node min_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 44
2021-10-21 20:30:49,716 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 26
2021-10-21 20:30:49,716 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 26
2021-10-21 20:30:49,716 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 20 from label 26
2021-10-21 20:30:49,716 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 20
2021-10-21 20:30:49,717 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 20
2021-10-21 20:30:49,717 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 0 from label 20
2021-10-21 20:30:49,717 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 0
2021-10-21 20:30:49,717 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 0
2021-10-21 20:30:49,717 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def <class 'numba.core.ssa.UndefinedVariable'>
2021-10-21 20:30:49,717 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 28
2021-10-21 20:30:49,717 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_value = v
2021-10-21 20:30:49,718 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $50call_method.3 = call $46load_method.1(min_value.2, func=$46load_method.1, args=[Var(min_value.2, arraymath.py:670)], kws=(), vararg=None)
2021-10-21 20:30:49,718 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,718 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2021-10-21 20:30:49,718 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2021-10-21 20:30:49,718 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2021-10-21 20:30:49,718 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,718 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx)
2021-10-21 20:30:49,718 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2021-10-21 20:30:49,719 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2021-10-21 20:30:49,719 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,719 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2021-10-21 20:30:49,719 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2021-10-21 20:30:49,719 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,719 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2021-10-21 20:30:49,719 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2021-10-21 20:30:49,719 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,720 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2021-10-21 20:30:49,720 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,720 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2021-10-21 20:30:49,720 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2021-10-21 20:30:49,720 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2021-10-21 20:30:49,720 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2021-10-21 20:30:49,720 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2021-10-21 20:30:49,720 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2021-10-21 20:30:49,721 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,721 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi70.1
2021-10-21 20:30:49,721 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,721 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2021-10-21 20:30:49,722 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2021-10-21 20:30:49,722 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,722 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2021-10-21 20:30:49,722 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2021-10-21 20:30:49,723 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2021-10-21 20:30:49,723 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,723 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx)
2021-10-21 20:30:49,723 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2021-10-21 20:30:49,723 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2021-10-21 20:30:49,724 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,724 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v < min_value
2021-10-21 20:30:49,724 [10148] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='min_value' stmt=$94compare_op.3 = v < min_value
2021-10-21 20:30:49,732 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 90
2021-10-21 20:30:49,732 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 90
2021-10-21 20:30:49,733 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2021-10-21 20:30:49,733 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 70
2021-10-21 20:30:49,733 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 68 from label 70
2021-10-21 20:30:49,733 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 68
2021-10-21 20:30:49,734 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 68
2021-10-21 20:30:49,734 [10148] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node min_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 68
2021-10-21 20:30:49,734 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 58
2021-10-21 20:30:49,734 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 58
2021-10-21 20:30:49,735 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 44 from label 58
2021-10-21 20:30:49,735 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 44
2021-10-21 20:30:49,735 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_value.2 = phi(incoming_values=[Undefined, Var(min_value, arraymath.py:667)], incoming_blocks=[26, 28])
2021-10-21 20:30:49,735 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 106
2021-10-21 20:30:49,735 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 106
2021-10-21 20:30:49,735 [10148] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node min_value.4 = phi(incoming_values=[], incoming_blocks=[]) at 106
2021-10-21 20:30:49,735 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 90
2021-10-21 20:30:49,735 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 90
2021-10-21 20:30:49,736 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 90
2021-10-21 20:30:49,736 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2021-10-21 20:30:49,736 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 70
2021-10-21 20:30:49,736 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 68 from label 70
2021-10-21 20:30:49,736 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 68
2021-10-21 20:30:49,736 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_value.3 = phi(incoming_values=[Var(min_value.2, arraymath.py:670)], incoming_blocks=[58])
2021-10-21 20:30:49,736 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 98
2021-10-21 20:30:49,736 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_value.1 = v
2021-10-21 20:30:49,737 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_value.4 = phi(incoming_values=[Var(min_value.3, arraymath.py:677), Var(min_value.1, arraymath.py:678)], incoming_blocks=[90, 98])
2021-10-21 20:30:49,737 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $94compare_op.3 = v < min_value.3
2021-10-21 20:30:49,737 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,737 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2021-10-21 20:30:49,737 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2021-10-21 20:30:49,737 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2021-10-21 20:30:49,737 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,737 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.1 = v
2021-10-21 20:30:49,738 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = idx
2021-10-21 20:30:49,738 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2021-10-21 20:30:49,738 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2021-10-21 20:30:49,738 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,738 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2021-10-21 20:30:49,738 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:49,738 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $110inplace_add.3
2021-10-21 20:30:49,738 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,739 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2021-10-21 20:30:49,739 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B130>
2021-10-21 20:30:49,739 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx)
2021-10-21 20:30:49,739 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2021-10-21 20:30:49,739 [10148] DEBUG    numba.core.ssa:49: [JupyterRequire] Fix SSA violator on var min_idx
2021-10-21 20:30:49,739 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2021-10-21 20:30:49,739 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,739 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2021-10-21 20:30:49,739 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2021-10-21 20:30:49,740 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2021-10-21 20:30:49,740 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2021-10-21 20:30:49,740 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,740 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2021-10-21 20:30:49,740 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2021-10-21 20:30:49,740 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2021-10-21 20:30:49,740 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,740 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2021-10-21 20:30:49,741 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2021-10-21 20:30:49,741 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2021-10-21 20:30:49,741 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2021-10-21 20:30:49,741 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2021-10-21 20:30:49,741 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,742 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,742 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2021-10-21 20:30:49,742 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2021-10-21 20:30:49,742 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2021-10-21 20:30:49,742 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2021-10-21 20:30:49,743 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,743 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2021-10-21 20:30:49,744 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2021-10-21 20:30:49,744 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2021-10-21 20:30:49,744 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2021-10-21 20:30:49,745 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2021-10-21 20:30:49,745 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2021-10-21 20:30:49,745 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,745 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2021-10-21 20:30:49,746 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2021-10-21 20:30:49,746 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2021-10-21 20:30:49,746 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2021-10-21 20:30:49,746 [10148] DEBUG    numba.core.ssa:256: [JupyterRequire] first assign: min_idx
2021-10-21 20:30:49,746 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: min_idx = $const34.3
2021-10-21 20:30:49,746 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2021-10-21 20:30:49,746 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2021-10-21 20:30:49,746 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,746 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.2 = phi(incoming_values=[Undefined, Var(min_value, arraymath.py:667)], incoming_blocks=[26, 28])
2021-10-21 20:30:49,747 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,747 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2021-10-21 20:30:49,747 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value.2, func=$46load_method.1, args=[Var(min_value.2, arraymath.py:670)], kws=(), vararg=None)
2021-10-21 20:30:49,747 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,747 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2021-10-21 20:30:49,747 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2021-10-21 20:30:49,748 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2021-10-21 20:30:49,748 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,748 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx)
2021-10-21 20:30:49,748 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2021-10-21 20:30:49,748 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2021-10-21 20:30:49,748 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,748 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2021-10-21 20:30:49,748 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2021-10-21 20:30:49,749 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,749 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2021-10-21 20:30:49,749 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2021-10-21 20:30:49,749 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,749 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2021-10-21 20:30:49,749 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,749 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.3 = phi(incoming_values=[Var(min_value.2, arraymath.py:670), Var(min_value.4, arraymath.py:677)], incoming_blocks=[58, 106])
2021-10-21 20:30:49,749 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2021-10-21 20:30:49,750 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2021-10-21 20:30:49,750 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2021-10-21 20:30:49,750 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2021-10-21 20:30:49,750 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2021-10-21 20:30:49,750 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2021-10-21 20:30:49,750 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,751 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi70.1
2021-10-21 20:30:49,751 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,751 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2021-10-21 20:30:49,751 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2021-10-21 20:30:49,751 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,751 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2021-10-21 20:30:49,752 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2021-10-21 20:30:49,752 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2021-10-21 20:30:49,752 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,752 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx)
2021-10-21 20:30:49,752 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2021-10-21 20:30:49,752 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2021-10-21 20:30:49,752 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,753 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v < min_value.3
2021-10-21 20:30:49,753 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,753 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2021-10-21 20:30:49,753 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2021-10-21 20:30:49,753 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2021-10-21 20:30:49,753 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,753 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.1 = v
2021-10-21 20:30:49,754 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = idx
2021-10-21 20:30:49,754 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: min_idx.1 = idx
2021-10-21 20:30:49,754 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2021-10-21 20:30:49,754 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2021-10-21 20:30:49,754 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,754 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.4 = phi(incoming_values=[Var(min_value.3, arraymath.py:677), Var(min_value.1, arraymath.py:678)], incoming_blocks=[90, 98])
2021-10-21 20:30:49,754 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2021-10-21 20:30:49,754 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:49,754 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $110inplace_add.3
2021-10-21 20:30:49,755 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,755 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2021-10-21 20:30:49,755 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A5502B7F0>
2021-10-21 20:30:49,755 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx)
2021-10-21 20:30:49,755 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2021-10-21 20:30:49,755 [10148] DEBUG    numba.core.ssa:55: [JupyterRequire] Replaced assignments: defaultdict(<class 'list'>,
            {28: [<numba.core.ir.Assign object at 0x0000016A54FE6E50>],
             98: [<numba.core.ir.Assign object at 0x0000016A54FC3F40>]})
2021-10-21 20:30:49,756 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2021-10-21 20:30:49,756 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,756 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2021-10-21 20:30:49,756 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2021-10-21 20:30:49,756 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2021-10-21 20:30:49,756 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2021-10-21 20:30:49,756 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,757 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2021-10-21 20:30:49,757 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2021-10-21 20:30:49,757 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2021-10-21 20:30:49,757 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,757 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2021-10-21 20:30:49,757 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2021-10-21 20:30:49,757 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2021-10-21 20:30:49,758 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2021-10-21 20:30:49,758 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2021-10-21 20:30:49,758 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,758 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,758 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2021-10-21 20:30:49,758 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2021-10-21 20:30:49,758 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2021-10-21 20:30:49,759 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2021-10-21 20:30:49,759 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,759 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2021-10-21 20:30:49,759 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2021-10-21 20:30:49,759 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2021-10-21 20:30:49,759 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2021-10-21 20:30:49,759 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2021-10-21 20:30:49,760 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2021-10-21 20:30:49,760 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,760 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2021-10-21 20:30:49,760 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2021-10-21 20:30:49,760 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2021-10-21 20:30:49,760 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2021-10-21 20:30:49,760 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2021-10-21 20:30:49,760 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2021-10-21 20:30:49,761 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,761 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.2 = phi(incoming_values=[Undefined, Var(min_value, arraymath.py:667)], incoming_blocks=[26, 28])
2021-10-21 20:30:49,761 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,761 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2021-10-21 20:30:49,761 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value.2, func=$46load_method.1, args=[Var(min_value.2, arraymath.py:670)], kws=(), vararg=None)
2021-10-21 20:30:49,761 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,762 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2021-10-21 20:30:49,762 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2021-10-21 20:30:49,762 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2021-10-21 20:30:49,762 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,762 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx)
2021-10-21 20:30:49,762 [10148] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='min_idx' stmt=$56return_value.1 = cast(value=min_idx)
2021-10-21 20:30:49,762 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 54
2021-10-21 20:30:49,762 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 44 from label 54
2021-10-21 20:30:49,763 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 44
2021-10-21 20:30:49,763 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 44
2021-10-21 20:30:49,763 [10148] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node min_idx.2 = phi(incoming_values=[], incoming_blocks=[]) at 44
2021-10-21 20:30:49,763 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 26
2021-10-21 20:30:49,763 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 26
2021-10-21 20:30:49,763 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 20 from label 26
2021-10-21 20:30:49,763 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 20
2021-10-21 20:30:49,763 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 20
2021-10-21 20:30:49,763 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 0 from label 20
2021-10-21 20:30:49,764 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 0
2021-10-21 20:30:49,764 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 0
2021-10-21 20:30:49,764 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def <class 'numba.core.ssa.UndefinedVariable'>
2021-10-21 20:30:49,764 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 28
2021-10-21 20:30:49,764 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_idx = $const34.3
2021-10-21 20:30:49,764 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $56return_value.1 = cast(value=min_idx.2)
2021-10-21 20:30:49,764 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2021-10-21 20:30:49,764 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2021-10-21 20:30:49,764 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,765 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2021-10-21 20:30:49,765 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2021-10-21 20:30:49,765 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,765 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2021-10-21 20:30:49,765 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2021-10-21 20:30:49,765 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,765 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2021-10-21 20:30:49,765 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,766 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.3 = phi(incoming_values=[Var(min_value.2, arraymath.py:670), Var(min_value.4, arraymath.py:677)], incoming_blocks=[58, 106])
2021-10-21 20:30:49,766 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2021-10-21 20:30:49,766 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2021-10-21 20:30:49,766 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2021-10-21 20:30:49,766 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2021-10-21 20:30:49,766 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2021-10-21 20:30:49,766 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2021-10-21 20:30:49,766 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,766 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi70.1
2021-10-21 20:30:49,767 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,767 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2021-10-21 20:30:49,767 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2021-10-21 20:30:49,767 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,767 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2021-10-21 20:30:49,767 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2021-10-21 20:30:49,767 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2021-10-21 20:30:49,767 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,768 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx)
2021-10-21 20:30:49,768 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2021-10-21 20:30:49,768 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2021-10-21 20:30:49,768 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,768 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v < min_value.3
2021-10-21 20:30:49,768 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,768 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2021-10-21 20:30:49,768 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2021-10-21 20:30:49,769 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2021-10-21 20:30:49,769 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,769 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.1 = v
2021-10-21 20:30:49,769 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.1 = idx
2021-10-21 20:30:49,769 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2021-10-21 20:30:49,770 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2021-10-21 20:30:49,770 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,770 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.4 = phi(incoming_values=[Var(min_value.3, arraymath.py:677), Var(min_value.1, arraymath.py:678)], incoming_blocks=[90, 98])
2021-10-21 20:30:49,770 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2021-10-21 20:30:49,770 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:49,771 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $110inplace_add.3
2021-10-21 20:30:49,771 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,771 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2021-10-21 20:30:49,771 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A5502B430>
2021-10-21 20:30:49,771 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx)
2021-10-21 20:30:49,771 [10148] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='min_idx' stmt=$118return_value.1 = cast(value=min_idx)
2021-10-21 20:30:49,772 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 116
2021-10-21 20:30:49,772 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 68 from label 116
2021-10-21 20:30:49,772 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 68
2021-10-21 20:30:49,772 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 68
2021-10-21 20:30:49,772 [10148] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node min_idx.3 = phi(incoming_values=[], incoming_blocks=[]) at 68
2021-10-21 20:30:49,772 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 58
2021-10-21 20:30:49,773 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 58
2021-10-21 20:30:49,773 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 44 from label 58
2021-10-21 20:30:49,773 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 44
2021-10-21 20:30:49,773 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_idx.2 = phi(incoming_values=[Undefined, Var(min_idx, arraymath.py:668)], incoming_blocks=[26, 28])
2021-10-21 20:30:49,774 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 106
2021-10-21 20:30:49,774 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 106
2021-10-21 20:30:49,774 [10148] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node min_idx.4 = phi(incoming_values=[], incoming_blocks=[]) at 106
2021-10-21 20:30:49,774 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 90
2021-10-21 20:30:49,774 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 90
2021-10-21 20:30:49,775 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 90
2021-10-21 20:30:49,775 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2021-10-21 20:30:49,776 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 70
2021-10-21 20:30:49,777 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 68 from label 70
2021-10-21 20:30:49,778 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 68
2021-10-21 20:30:49,779 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_idx.3 = phi(incoming_values=[Var(min_idx.2, arraymath.py:671)], incoming_blocks=[58])
2021-10-21 20:30:49,780 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 98
2021-10-21 20:30:49,780 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_idx.1 = idx
2021-10-21 20:30:49,780 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_idx.4 = phi(incoming_values=[Var(min_idx.3, arraymath.py:681), Var(min_idx.1, arraymath.py:679)], incoming_blocks=[90, 98])
2021-10-21 20:30:49,781 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $118return_value.1 = cast(value=min_idx.3)
2021-10-21 20:30:49,781 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2021-10-21 20:30:49,781 [10148] DEBUG    numba.core.ssa:49: [JupyterRequire] Fix SSA violator on var v
2021-10-21 20:30:49,781 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2021-10-21 20:30:49,781 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,782 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2021-10-21 20:30:49,782 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2021-10-21 20:30:49,782 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2021-10-21 20:30:49,782 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2021-10-21 20:30:49,782 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,782 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2021-10-21 20:30:49,783 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2021-10-21 20:30:49,783 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2021-10-21 20:30:49,783 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,783 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2021-10-21 20:30:49,783 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2021-10-21 20:30:49,783 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2021-10-21 20:30:49,783 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2021-10-21 20:30:49,784 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2021-10-21 20:30:49,784 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,784 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,784 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2021-10-21 20:30:49,784 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2021-10-21 20:30:49,784 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2021-10-21 20:30:49,784 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2021-10-21 20:30:49,785 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,785 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2021-10-21 20:30:49,785 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2021-10-21 20:30:49,785 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2021-10-21 20:30:49,785 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2021-10-21 20:30:49,785 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2021-10-21 20:30:49,785 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2021-10-21 20:30:49,785 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,786 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2021-10-21 20:30:49,786 [10148] DEBUG    numba.core.ssa:256: [JupyterRequire] first assign: v
2021-10-21 20:30:49,786 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: v = $phi28.1
2021-10-21 20:30:49,786 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2021-10-21 20:30:49,786 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2021-10-21 20:30:49,786 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2021-10-21 20:30:49,786 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2021-10-21 20:30:49,786 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2021-10-21 20:30:49,786 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,787 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.2 = phi(incoming_values=[Undefined, Var(min_idx, arraymath.py:668)], incoming_blocks=[26, 28])
2021-10-21 20:30:49,787 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.2 = phi(incoming_values=[Undefined, Var(min_value, arraymath.py:667)], incoming_blocks=[26, 28])
2021-10-21 20:30:49,787 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,787 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2021-10-21 20:30:49,787 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value.2, func=$46load_method.1, args=[Var(min_value.2, arraymath.py:670)], kws=(), vararg=None)
2021-10-21 20:30:49,787 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,787 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2021-10-21 20:30:49,788 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2021-10-21 20:30:49,788 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2021-10-21 20:30:49,788 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,788 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx.2)
2021-10-21 20:30:49,788 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2021-10-21 20:30:49,788 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2021-10-21 20:30:49,788 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,788 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2021-10-21 20:30:49,788 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2021-10-21 20:30:49,789 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,789 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2021-10-21 20:30:49,789 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2021-10-21 20:30:49,789 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,789 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2021-10-21 20:30:49,789 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,789 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.3 = phi(incoming_values=[Var(min_idx.2, arraymath.py:671), Var(min_idx.4, arraymath.py:681)], incoming_blocks=[58, 106])
2021-10-21 20:30:49,789 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.3 = phi(incoming_values=[Var(min_value.2, arraymath.py:670), Var(min_value.4, arraymath.py:677)], incoming_blocks=[58, 106])
2021-10-21 20:30:49,790 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2021-10-21 20:30:49,790 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2021-10-21 20:30:49,790 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2021-10-21 20:30:49,791 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2021-10-21 20:30:49,791 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2021-10-21 20:30:49,791 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2021-10-21 20:30:49,791 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,792 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi70.1
2021-10-21 20:30:49,792 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: v.1 = $phi70.1
2021-10-21 20:30:49,792 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,792 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2021-10-21 20:30:49,792 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2021-10-21 20:30:49,792 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,792 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2021-10-21 20:30:49,792 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2021-10-21 20:30:49,792 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2021-10-21 20:30:49,792 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,793 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx)
2021-10-21 20:30:49,793 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2021-10-21 20:30:49,793 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2021-10-21 20:30:49,793 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,793 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v < min_value.3
2021-10-21 20:30:49,794 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,794 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2021-10-21 20:30:49,794 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2021-10-21 20:30:49,794 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2021-10-21 20:30:49,794 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,794 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.1 = v
2021-10-21 20:30:49,795 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.1 = idx
2021-10-21 20:30:49,795 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2021-10-21 20:30:49,795 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2021-10-21 20:30:49,795 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,796 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.4 = phi(incoming_values=[Var(min_idx.3, arraymath.py:681), Var(min_idx.1, arraymath.py:679)], incoming_blocks=[90, 98])
2021-10-21 20:30:49,796 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.4 = phi(incoming_values=[Var(min_value.3, arraymath.py:677), Var(min_value.1, arraymath.py:678)], incoming_blocks=[90, 98])
2021-10-21 20:30:49,796 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2021-10-21 20:30:49,796 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:49,796 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $110inplace_add.3
2021-10-21 20:30:49,796 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,797 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2021-10-21 20:30:49,797 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FC3D90>
2021-10-21 20:30:49,797 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx.3)
2021-10-21 20:30:49,797 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2021-10-21 20:30:49,797 [10148] DEBUG    numba.core.ssa:55: [JupyterRequire] Replaced assignments: defaultdict(<class 'list'>,
            {28: [<numba.core.ir.Assign object at 0x0000016A54FE6C40>],
             70: [<numba.core.ir.Assign object at 0x0000016A5502BCA0>]})
2021-10-21 20:30:49,801 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2021-10-21 20:30:49,802 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,802 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2021-10-21 20:30:49,802 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2021-10-21 20:30:49,803 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2021-10-21 20:30:49,803 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2021-10-21 20:30:49,803 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,803 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2021-10-21 20:30:49,803 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2021-10-21 20:30:49,804 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2021-10-21 20:30:49,804 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,804 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2021-10-21 20:30:49,804 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2021-10-21 20:30:49,804 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2021-10-21 20:30:49,804 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2021-10-21 20:30:49,804 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2021-10-21 20:30:49,804 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,805 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,805 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2021-10-21 20:30:49,805 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2021-10-21 20:30:49,805 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2021-10-21 20:30:49,805 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2021-10-21 20:30:49,805 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,805 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2021-10-21 20:30:49,805 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2021-10-21 20:30:49,806 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2021-10-21 20:30:49,806 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2021-10-21 20:30:49,806 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2021-10-21 20:30:49,806 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2021-10-21 20:30:49,806 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,806 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2021-10-21 20:30:49,806 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2021-10-21 20:30:49,807 [10148] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='v' stmt=min_value = v
2021-10-21 20:30:49,807 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2021-10-21 20:30:49,807 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2021-10-21 20:30:49,808 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2021-10-21 20:30:49,808 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2021-10-21 20:30:49,808 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,808 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.2 = phi(incoming_values=[Undefined, Var(min_idx, arraymath.py:668)], incoming_blocks=[26, 28])
2021-10-21 20:30:49,808 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.2 = phi(incoming_values=[Undefined, Var(min_value, arraymath.py:667)], incoming_blocks=[26, 28])
2021-10-21 20:30:49,809 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,809 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2021-10-21 20:30:49,809 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value.2, func=$46load_method.1, args=[Var(min_value.2, arraymath.py:670)], kws=(), vararg=None)
2021-10-21 20:30:49,810 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,812 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2021-10-21 20:30:49,815 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2021-10-21 20:30:49,815 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2021-10-21 20:30:49,816 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,816 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx.2)
2021-10-21 20:30:49,816 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2021-10-21 20:30:49,816 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2021-10-21 20:30:49,816 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,816 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2021-10-21 20:30:49,817 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2021-10-21 20:30:49,817 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,817 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2021-10-21 20:30:49,817 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2021-10-21 20:30:49,817 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,817 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2021-10-21 20:30:49,817 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,818 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.3 = phi(incoming_values=[Var(min_idx.2, arraymath.py:671), Var(min_idx.4, arraymath.py:681)], incoming_blocks=[58, 106])
2021-10-21 20:30:49,818 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.3 = phi(incoming_values=[Var(min_value.2, arraymath.py:670), Var(min_value.4, arraymath.py:677)], incoming_blocks=[58, 106])
2021-10-21 20:30:49,818 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2021-10-21 20:30:49,818 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2021-10-21 20:30:49,818 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2021-10-21 20:30:49,818 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2021-10-21 20:30:49,819 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2021-10-21 20:30:49,819 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2021-10-21 20:30:49,819 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,819 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v.1 = $phi70.1
2021-10-21 20:30:49,819 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,819 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2021-10-21 20:30:49,819 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2021-10-21 20:30:49,820 [10148] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='v' stmt=$78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2021-10-21 20:30:49,820 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $78call_method.5 = call $74load_method.3(v.1, func=$74load_method.3, args=[Var(v.1, arraymath.py:674)], kws=(), vararg=None)
2021-10-21 20:30:49,820 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,820 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2021-10-21 20:30:49,821 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2021-10-21 20:30:49,821 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2021-10-21 20:30:49,821 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,821 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx)
2021-10-21 20:30:49,821 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2021-10-21 20:30:49,821 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2021-10-21 20:30:49,821 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,822 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v < min_value.3
2021-10-21 20:30:49,822 [10148] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='v' stmt=$94compare_op.3 = v < min_value.3
2021-10-21 20:30:49,822 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 90
2021-10-21 20:30:49,822 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 90
2021-10-21 20:30:49,822 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2021-10-21 20:30:49,823 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $94compare_op.3 = v.1 < min_value.3
2021-10-21 20:30:49,823 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,823 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2021-10-21 20:30:49,823 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2021-10-21 20:30:49,823 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2021-10-21 20:30:49,824 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,824 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.1 = v
2021-10-21 20:30:49,824 [10148] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='v' stmt=min_value.1 = v
2021-10-21 20:30:49,824 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 98
2021-10-21 20:30:49,824 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 90 from label 98
2021-10-21 20:30:49,824 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 90
2021-10-21 20:30:49,824 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 90
2021-10-21 20:30:49,824 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 90
2021-10-21 20:30:49,825 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2021-10-21 20:30:49,825 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: min_value.1 = v.1
2021-10-21 20:30:49,825 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.1 = idx
2021-10-21 20:30:49,825 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2021-10-21 20:30:49,825 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2021-10-21 20:30:49,825 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,825 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.4 = phi(incoming_values=[Var(min_idx.3, arraymath.py:681), Var(min_idx.1, arraymath.py:679)], incoming_blocks=[90, 98])
2021-10-21 20:30:49,825 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.4 = phi(incoming_values=[Var(min_value.3, arraymath.py:677), Var(min_value.1, arraymath.py:678)], incoming_blocks=[90, 98])
2021-10-21 20:30:49,826 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2021-10-21 20:30:49,826 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:49,826 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $110inplace_add.3
2021-10-21 20:30:49,826 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,826 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2021-10-21 20:30:49,826 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54FE6A00>
2021-10-21 20:30:49,826 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx.3)
2021-10-21 20:30:49,826 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2021-10-21 20:30:49,827 [10148] DEBUG    numba.core.ssa:49: [JupyterRequire] Fix SSA violator on var idx
2021-10-21 20:30:49,827 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2021-10-21 20:30:49,827 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,827 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2021-10-21 20:30:49,827 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2021-10-21 20:30:49,827 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2021-10-21 20:30:49,827 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2021-10-21 20:30:49,827 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,828 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2021-10-21 20:30:49,828 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2021-10-21 20:30:49,828 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2021-10-21 20:30:49,828 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,828 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2021-10-21 20:30:49,828 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2021-10-21 20:30:49,828 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2021-10-21 20:30:49,828 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2021-10-21 20:30:49,829 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2021-10-21 20:30:49,829 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,829 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,829 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2021-10-21 20:30:49,829 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2021-10-21 20:30:49,829 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2021-10-21 20:30:49,829 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2021-10-21 20:30:49,829 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,830 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2021-10-21 20:30:49,830 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2021-10-21 20:30:49,830 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2021-10-21 20:30:49,830 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2021-10-21 20:30:49,830 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2021-10-21 20:30:49,830 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2021-10-21 20:30:49,830 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,830 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2021-10-21 20:30:49,831 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2021-10-21 20:30:49,831 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2021-10-21 20:30:49,831 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2021-10-21 20:30:49,831 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2021-10-21 20:30:49,831 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2021-10-21 20:30:49,831 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,831 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.2 = phi(incoming_values=[Undefined, Var(min_idx, arraymath.py:668)], incoming_blocks=[26, 28])
2021-10-21 20:30:49,831 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.2 = phi(incoming_values=[Undefined, Var(min_value, arraymath.py:667)], incoming_blocks=[26, 28])
2021-10-21 20:30:49,832 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,832 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2021-10-21 20:30:49,832 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value.2, func=$46load_method.1, args=[Var(min_value.2, arraymath.py:670)], kws=(), vararg=None)
2021-10-21 20:30:49,832 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,832 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2021-10-21 20:30:49,832 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2021-10-21 20:30:49,832 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2021-10-21 20:30:49,832 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,833 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx.2)
2021-10-21 20:30:49,833 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2021-10-21 20:30:49,833 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2021-10-21 20:30:49,833 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,833 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2021-10-21 20:30:49,833 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2021-10-21 20:30:49,833 [10148] DEBUG    numba.core.ssa:256: [JupyterRequire] first assign: idx
2021-10-21 20:30:49,833 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: idx = $const58.0
2021-10-21 20:30:49,833 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,834 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2021-10-21 20:30:49,834 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2021-10-21 20:30:49,834 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,834 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2021-10-21 20:30:49,834 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,834 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.3 = phi(incoming_values=[Var(min_idx.2, arraymath.py:671), Var(min_idx.4, arraymath.py:681)], incoming_blocks=[58, 106])
2021-10-21 20:30:49,834 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.3 = phi(incoming_values=[Var(min_value.2, arraymath.py:670), Var(min_value.4, arraymath.py:677)], incoming_blocks=[58, 106])
2021-10-21 20:30:49,834 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2021-10-21 20:30:49,835 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2021-10-21 20:30:49,835 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2021-10-21 20:30:49,835 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2021-10-21 20:30:49,835 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2021-10-21 20:30:49,835 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2021-10-21 20:30:49,835 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,835 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v.1 = $phi70.1
2021-10-21 20:30:49,835 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,835 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2021-10-21 20:30:49,836 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v.1, func=$74load_method.3, args=[Var(v.1, arraymath.py:674)], kws=(), vararg=None)
2021-10-21 20:30:49,836 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,836 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2021-10-21 20:30:49,836 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2021-10-21 20:30:49,836 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2021-10-21 20:30:49,836 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,836 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx)
2021-10-21 20:30:49,836 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2021-10-21 20:30:49,837 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2021-10-21 20:30:49,837 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,837 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v.1 < min_value.3
2021-10-21 20:30:49,837 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,837 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2021-10-21 20:30:49,837 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2021-10-21 20:30:49,837 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2021-10-21 20:30:49,837 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,837 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.1 = v.1
2021-10-21 20:30:49,838 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.1 = idx
2021-10-21 20:30:49,838 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2021-10-21 20:30:49,838 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2021-10-21 20:30:49,838 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,838 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.4 = phi(incoming_values=[Var(min_idx.3, arraymath.py:681), Var(min_idx.1, arraymath.py:679)], incoming_blocks=[90, 98])
2021-10-21 20:30:49,838 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.4 = phi(incoming_values=[Var(min_value.3, arraymath.py:677), Var(min_value.1, arraymath.py:678)], incoming_blocks=[90, 98])
2021-10-21 20:30:49,838 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2021-10-21 20:30:49,838 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:49,839 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $110inplace_add.3
2021-10-21 20:30:49,839 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: idx.1 = $110inplace_add.3
2021-10-21 20:30:49,839 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,839 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2021-10-21 20:30:49,839 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x0000016A54FE6CD0>
2021-10-21 20:30:49,839 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx.3)
2021-10-21 20:30:49,840 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2021-10-21 20:30:49,840 [10148] DEBUG    numba.core.ssa:55: [JupyterRequire] Replaced assignments: defaultdict(<class 'list'>,
            {58: [<numba.core.ir.Assign object at 0x0000016A54FE6D60>],
             106: [<numba.core.ir.Assign object at 0x0000016A54F72460>]})
2021-10-21 20:30:49,842 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2021-10-21 20:30:49,842 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,842 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2021-10-21 20:30:49,842 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2021-10-21 20:30:49,842 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2021-10-21 20:30:49,842 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2021-10-21 20:30:49,843 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,843 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2021-10-21 20:30:49,843 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2021-10-21 20:30:49,843 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2021-10-21 20:30:49,843 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,843 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2021-10-21 20:30:49,843 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2021-10-21 20:30:49,843 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2021-10-21 20:30:49,844 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2021-10-21 20:30:49,844 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2021-10-21 20:30:49,844 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,844 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,844 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2021-10-21 20:30:49,844 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2021-10-21 20:30:49,844 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2021-10-21 20:30:49,845 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2021-10-21 20:30:49,845 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,845 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2021-10-21 20:30:49,845 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2021-10-21 20:30:49,845 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2021-10-21 20:30:49,845 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2021-10-21 20:30:49,845 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2021-10-21 20:30:49,846 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2021-10-21 20:30:49,846 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,846 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2021-10-21 20:30:49,847 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2021-10-21 20:30:49,847 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2021-10-21 20:30:49,847 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2021-10-21 20:30:49,847 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2021-10-21 20:30:49,847 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2021-10-21 20:30:49,847 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,848 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.2 = phi(incoming_values=[Undefined, Var(min_idx, arraymath.py:668)], incoming_blocks=[26, 28])
2021-10-21 20:30:49,848 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.2 = phi(incoming_values=[Undefined, Var(min_value, arraymath.py:667)], incoming_blocks=[26, 28])
2021-10-21 20:30:49,848 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,848 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2021-10-21 20:30:49,849 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value.2, func=$46load_method.1, args=[Var(min_value.2, arraymath.py:670)], kws=(), vararg=None)
2021-10-21 20:30:49,849 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,849 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2021-10-21 20:30:49,849 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2021-10-21 20:30:49,849 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2021-10-21 20:30:49,850 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,850 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx.2)
2021-10-21 20:30:49,850 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2021-10-21 20:30:49,851 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2021-10-21 20:30:49,851 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,851 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2021-10-21 20:30:49,851 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2021-10-21 20:30:49,851 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2021-10-21 20:30:49,852 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2021-10-21 20:30:49,852 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2021-10-21 20:30:49,852 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,853 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2021-10-21 20:30:49,853 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,853 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.3 = phi(incoming_values=[Var(min_idx.2, arraymath.py:671), Var(min_idx.4, arraymath.py:681)], incoming_blocks=[58, 106])
2021-10-21 20:30:49,854 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.3 = phi(incoming_values=[Var(min_value.2, arraymath.py:670), Var(min_value.4, arraymath.py:677)], incoming_blocks=[58, 106])
2021-10-21 20:30:49,854 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2021-10-21 20:30:49,854 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2021-10-21 20:30:49,854 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2021-10-21 20:30:49,854 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2021-10-21 20:30:49,854 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2021-10-21 20:30:49,854 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2021-10-21 20:30:49,855 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,855 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v.1 = $phi70.1
2021-10-21 20:30:49,855 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2021-10-21 20:30:49,855 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2021-10-21 20:30:49,855 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v.1, func=$74load_method.3, args=[Var(v.1, arraymath.py:674)], kws=(), vararg=None)
2021-10-21 20:30:49,855 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,855 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2021-10-21 20:30:49,856 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2021-10-21 20:30:49,856 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2021-10-21 20:30:49,856 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,856 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx)
2021-10-21 20:30:49,856 [10148] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='idx' stmt=$88return_value.2 = cast(value=idx)
2021-10-21 20:30:49,856 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 82
2021-10-21 20:30:49,857 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 82
2021-10-21 20:30:49,857 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2021-10-21 20:30:49,857 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 70
2021-10-21 20:30:49,858 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 68 from label 70
2021-10-21 20:30:49,858 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 68
2021-10-21 20:30:49,858 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 68
2021-10-21 20:30:49,858 [10148] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node idx.2 = phi(incoming_values=[], incoming_blocks=[]) at 68
2021-10-21 20:30:49,859 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 58
2021-10-21 20:30:49,859 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def idx = $const58.0
2021-10-21 20:30:49,859 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 106
2021-10-21 20:30:49,859 [10148] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def idx.1 = $110inplace_add.3
2021-10-21 20:30:49,860 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $88return_value.2 = cast(value=idx.2)
2021-10-21 20:30:49,862 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2021-10-21 20:30:49,864 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2021-10-21 20:30:49,865 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,865 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v.1 < min_value.3
2021-10-21 20:30:49,866 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2021-10-21 20:30:49,866 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2021-10-21 20:30:49,866 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2021-10-21 20:30:49,866 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2021-10-21 20:30:49,866 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,866 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.1 = v.1
2021-10-21 20:30:49,867 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.1 = idx
2021-10-21 20:30:49,867 [10148] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='idx' stmt=min_idx.1 = idx
2021-10-21 20:30:49,867 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 98
2021-10-21 20:30:49,867 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 90 from label 98
2021-10-21 20:30:49,867 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 90
2021-10-21 20:30:49,867 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 90
2021-10-21 20:30:49,867 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 90
2021-10-21 20:30:49,868 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2021-10-21 20:30:49,868 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 70
2021-10-21 20:30:49,868 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 68 from label 70
2021-10-21 20:30:49,868 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 68
2021-10-21 20:30:49,868 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: min_idx.1 = idx.2
2021-10-21 20:30:49,868 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2021-10-21 20:30:49,868 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2021-10-21 20:30:49,868 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,869 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.4 = phi(incoming_values=[Var(min_idx.3, arraymath.py:681), Var(min_idx.1, arraymath.py:679)], incoming_blocks=[90, 98])
2021-10-21 20:30:49,869 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.4 = phi(incoming_values=[Var(min_value.3, arraymath.py:677), Var(min_value.1, arraymath.py:678)], incoming_blocks=[90, 98])
2021-10-21 20:30:49,869 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2021-10-21 20:30:49,869 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:49,869 [10148] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='idx' stmt=$110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:49,869 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 106
2021-10-21 20:30:49,869 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 90 from label 106
2021-10-21 20:30:49,869 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 90
2021-10-21 20:30:49,870 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 90
2021-10-21 20:30:49,870 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 90
2021-10-21 20:30:49,870 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2021-10-21 20:30:49,870 [10148] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 70
2021-10-21 20:30:49,870 [10148] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 68 from label 70
2021-10-21 20:30:49,870 [10148] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 68
2021-10-21 20:30:49,870 [10148] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2021-10-21 20:30:49,870 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx.1 = $110inplace_add.3
2021-10-21 20:30:49,871 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2021-10-21 20:30:49,871 [10148] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2021-10-21 20:30:49,871 [10148] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x0000016A54F99A00>
2021-10-21 20:30:49,871 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx.3)
2021-10-21 20:30:49,871 [10148] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2021-10-21 20:31:11,615 [10148] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-10-21 20:31:11,615 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,615 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,616 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,616 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,616 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,616 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,616 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,616 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,617 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,617 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,617 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,617 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,617 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,617 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:31:11,617 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,618 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,618 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,618 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,618 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,618 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,618 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,618 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,619 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:31:11,619 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,619 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,619 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,619 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,619 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,619 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,620 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:31:11,620 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:31:11,620 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,620 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,620 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,621 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,621 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:31:11,621 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,621 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:31:11,621 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,621 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,621 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 20:31:11,622 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,622 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,622 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,622 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,622 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 20:31:11,622 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:31:11,622 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,623 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 20:31:11,623 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,623 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,623 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,623 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,623 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,623 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 20:31:11,624 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,624 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:31:11,624 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,624 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,624 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,624 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,624 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,625 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,625 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,625 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 20:31:11,625 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,625 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:31:11,625 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,626 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,626 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,626 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,626 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 20:31:11,626 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,626 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,626 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,627 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,627 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,627 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,627 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,627 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,627 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,627 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,627 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,628 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,628 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,628 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,628 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,628 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,629 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,629 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,629 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,629 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,629 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,629 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:31:11,629 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,630 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,630 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,630 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,630 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,630 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,630 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,630 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,631 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,631 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 20:31:11,631 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,631 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 20:31:11,631 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,631 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,631 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,632 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,632 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:31:11,632 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,632 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:31:11,632 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,632 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:31:11,632 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,633 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 20:31:11,633 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,633 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,633 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,633 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,633 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:31:11,633 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,634 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,634 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 20:31:11,634 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,634 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,634 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,634 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 20:31:11,634 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,634 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,635 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 20:31:11,635 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:31:11,635 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,635 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:31:11,635 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,635 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,635 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,636 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,636 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:31:11,636 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,636 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 20:31:11,636 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,636 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 20:31:11,636 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,637 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,637 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,637 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,637 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 20:31:11,637 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,637 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,638 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,638 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:31:11,638 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 20:31:11,638 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,638 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,638 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,638 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,639 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,639 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,639 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,639 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 20:31:11,639 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,639 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,639 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,639 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,640 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,640 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 20:31:11,640 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,640 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,640 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:31:11,640 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,641 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 20:31:11,641 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:31:11,641 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 20:31:11,641 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,641 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,642 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,642 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,642 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,642 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,642 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:31:11,643 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 20:31:11,643 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,643 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,643 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,643 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,644 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:31:11,644 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:31:11,644 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 20:31:11,644 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,645 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,645 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,645 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,645 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,645 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,645 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,646 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,646 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:31:11,646 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,646 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:31:11,646 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,646 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,646 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,647 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,647 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,647 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:31:11,647 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,647 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,647 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,647 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 20:31:11,648 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,648 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,648 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:31:11,648 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:31:11,648 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,648 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,648 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,649 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,649 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,649 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,649 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:31:11,649 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,649 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 20:31:11,649 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,650 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 20:31:11,650 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,650 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,650 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,650 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:31:11,650 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 20:31:11,650 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,650 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,651 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,651 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 20:31:11,651 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,651 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,651 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,651 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 20:31:11,652 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 20:31:11,652 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 20:31:11,652 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:31:11,652 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,652 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,652 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,652 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,653 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,653 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 20:31:11,653 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,653 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,653 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,653 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,653 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,654 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,654 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,654 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,654 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,654 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 20:31:11,654 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 20:31:11,655 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,655 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,656 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:31:11,656 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,658 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 20:31:11,659 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,660 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,660 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 20:31:11,660 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,661 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,661 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,661 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,661 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 20:31:11,662 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,662 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,662 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 20:31:11,662 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,663 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,663 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,663 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,663 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,663 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,664 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,664 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,664 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,664 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:31:11,664 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,665 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,665 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,665 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,665 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,665 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,666 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,666 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,666 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,666 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,666 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 20:31:11,667 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:31:11,667 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,667 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,667 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,667 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,668 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:31:11,668 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,668 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,668 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,668 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,669 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,669 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:31:11,669 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,669 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,670 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,670 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 20:31:11,670 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,670 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:31:11,670 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 20:31:11,671 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,671 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,671 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 20:31:11,672 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,672 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,672 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,672 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,673 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,673 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,673 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,673 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:31:11,673 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,673 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,673 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,674 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,674 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 20:31:11,674 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:31:11,674 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,674 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,674 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,674 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,675 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,675 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,675 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,675 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,675 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 20:31:11,675 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,675 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,676 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,676 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 20:31:11,676 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,676 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,676 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 20:31:11,676 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,676 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 20:31:11,677 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,677 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,677 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-10-21 20:31:11,677 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 20:31:11,677 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,677 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,677 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,678 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,678 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,678 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,678 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,678 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,678 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:31:11,678 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,679 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,679 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,679 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,679 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:31:11,679 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 20:31:11,679 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,679 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,680 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,680 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,680 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 20:31:11,680 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,680 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,680 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,680 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,681 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,681 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:31:11,681 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:31:11,681 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,681 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,681 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,681 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,681 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,682 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:31:11,682 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,682 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,682 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:31:11,682 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,682 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 20:31:11,682 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 20:31:11,683 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:31:11,683 [10148] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 20:31:11,683 [10148] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-10-21 20:31:35,734 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:35,779 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:35,832 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:35,871 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:35,906 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:35,944 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:35,980 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,021 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,061 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,096 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,128 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,163 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,195 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,233 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,273 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,318 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,355 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,388 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,427 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,466 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,646 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,673 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,704 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,737 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,770 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,801 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,826 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,858 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,888 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,921 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,944 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:36,975 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,000 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,045 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,071 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,099 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,126 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,158 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,196 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,243 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,372 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,397 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,426 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,460 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,491 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,516 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,552 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,581 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,616 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,647 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,679 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,712 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,745 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,771 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,805 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,831 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,859 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,888 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,920 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:37,952 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:38,672 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:38,702 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:38,727 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:38,757 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:38,789 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:38,813 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:38,843 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:38,865 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:38,897 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:38,925 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:38,951 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:38,983 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,010 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,037 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,068 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,095 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,129 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,160 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,190 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,214 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,311 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,341 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,377 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,418 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,454 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,492 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,526 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,558 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,594 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,674 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,752 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,817 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,871 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,926 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:39,973 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:40,007 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:40,040 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:40,077 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:40,122 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:40,176 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,136 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,178 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,213 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,249 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,281 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,318 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,357 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,403 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,443 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,475 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,515 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,552 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,591 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,633 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,680 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:41,718 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,085 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,119 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,152 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,185 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,217 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,235 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,264 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,299 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,331 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,359 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,387 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,409 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,436 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,470 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,502 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,531 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,735 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,792 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,845 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,893 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,931 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:42,970 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:43,004 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:43,036 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:43,068 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:43,107 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:43,145 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:43,169 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:43,202 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:43,235 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:43,272 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:43,305 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:43,953 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:43,979 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,010 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,043 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,066 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,089 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,118 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,148 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,181 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,207 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,234 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,262 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,292 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,317 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,350 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,379 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,491 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,527 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,558 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,597 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,637 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,670 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,715 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,763 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,801 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,857 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,911 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:44,980 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:45,018 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:45,067 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:45,106 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:45,152 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:46,596 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:46,636 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:46,674 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:46,707 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:46,737 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:46,776 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:46,815 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:46,839 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:46,886 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:46,918 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:46,958 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:46,988 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,019 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,044 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,081 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,117 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,162 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,197 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,238 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,281 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,324 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,364 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,399 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,444 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,480 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,518 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,556 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,590 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,626 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,664 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,700 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:47,738 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,021 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,050 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,076 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,104 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,136 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,178 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,207 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,239 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,265 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,293 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,318 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,347 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,381 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,414 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,440 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,469 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,517 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,550 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,594 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,624 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,660 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,680 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,717 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,756 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,797 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,837 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,868 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,896 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,928 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,963 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:48,997 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,030 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,232 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,267 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,298 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,323 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,361 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,389 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,435 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,468 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,497 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,521 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,551 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,584 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,618 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,646 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,672 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,704 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,733 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,769 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,797 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,829 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,848 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,876 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,910 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,942 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,974 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:49,999 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:50,038 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:50,064 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:50,094 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:50,125 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:50,153 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:50,184 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:50,964 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:50,987 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,008 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,035 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,067 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,094 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,117 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,149 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,178 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,199 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,229 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,262 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,294 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,320 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,343 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,373 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,403 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,434 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,455 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,477 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,499 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,519 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,551 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,586 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,617 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,643 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,669 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,694 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,718 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,752 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,782 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,806 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,943 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:51,983 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,019 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,061 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,099 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,145 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,193 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,239 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,283 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,330 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,368 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,408 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,458 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,498 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,540 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,573 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,613 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,649 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,698 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,725 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,759 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,788 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,819 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,859 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,907 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,949 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:52,997 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:53,033 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:53,065 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:53,099 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:53,134 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:53,171 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:53,856 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:53,895 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:53,930 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:53,967 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,004 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,037 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,068 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,105 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,307 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,345 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,374 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,413 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,446 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,481 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,511 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,547 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,717 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,751 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,774 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,805 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,830 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,862 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,891 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:54,919 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,344 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,379 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,403 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,433 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,458 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,496 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,532 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,561 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,702 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,737 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,768 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,793 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,828 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,872 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,910 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:31:55,945 [10148] DEBUG    matplotlib.axes._base:2646: [JupyterRequire] top of axes not in the figure, so title not moved
2021-10-21 20:36:29,572 [10148] DEBUG    matplotlib.colorbar:600: [JupyterRequire] locator: <matplotlib.colorbar._ColorbarAutoLocator object at 0x0000016A56CF7C40>
2021-10-21 20:36:29,573 [10148] DEBUG    matplotlib.colorbar:645: [JupyterRequire] Using auto colorbar locator <matplotlib.colorbar._ColorbarAutoLocator object at 0x0000016A56CF7C40> on colorbar
2021-10-21 20:36:29,573 [10148] DEBUG    matplotlib.colorbar:799: [JupyterRequire] Setting pcolormesh
2021-10-21 20:39:36,295 [10148] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 20:39:36,296 [10148] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 2; new: 1
2021-10-21 20:39:36,296 [10148] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:2] new[1:1]
2021-10-21 20:39:36,296 [10148] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 20:39:36,297 [10148] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 20:39:38,385 [10148] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 20:39:38,385 [10148] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-10-21 20:39:38,385 [10148] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-10-21 20:39:38,386 [10148] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 20:39:38,386 [10148] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 20:39:38,514 [10148] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\pandas\core\frame.py
2021-10-21 20:39:38,552 [10148] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\pandas\__init__.py
2021-10-21 20:39:38,555 [10148] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\pandas\core\__init__.py
2021-10-21 20:39:38,633 [10148] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\pandas\core\generic.py
2021-10-21 20:39:38,677 [10148] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\pandas\core\base.py
2021-10-21 20:39:38,688 [10148] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\pandas\core\accessor.py
2021-10-21 20:39:38,776 [10148] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\pandas\core\indexing.py
2021-10-21 20:39:39,125 [10148] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\pandas\core\arraylike.py
2021-10-21 20:47:17,130 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 20:47:17,153 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-10-21 20:47:17,153 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-10-21 20:47:17,154 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 20:47:17,155 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 20:49:30,880 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 20:49:30,880 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-10-21 20:49:30,880 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-10-21 20:49:30,881 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 20:49:30,881 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 20:49:41,204 [12892] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2021-10-21 20:50:40,534 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 20:50:40,534 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 6
2021-10-21 20:50:40,535 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:6]
2021-10-21 20:50:40,535 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 7 (to 5 in part parser)
2021-10-21 20:50:40,536 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 20:51:39,801 [12892] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2021-10-21 20:51:39,803 [12892] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2021-10-21 20:51:39,804 [12892] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2021-10-21 20:51:39,804 [12892] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2021-10-21 20:51:47,749 [12892] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-10-21 20:51:47,750 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,750 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,750 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,750 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,750 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,750 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,751 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,751 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,751 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,751 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,751 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,752 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,752 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,752 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:51:47,752 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,752 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,752 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,752 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,753 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,753 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,753 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,753 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,753 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:51:47,753 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,753 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,754 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,754 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,754 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,754 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,754 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:51:47,754 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:51:47,754 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,755 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,755 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,755 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,755 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:51:47,755 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,755 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:51:47,755 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,756 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,756 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 20:51:47,756 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,756 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,756 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,756 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,756 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 20:51:47,757 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:51:47,757 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,757 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 20:51:47,757 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,757 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,757 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,757 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,758 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,758 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 20:51:47,758 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,758 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:51:47,758 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,758 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,758 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,759 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,759 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,759 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,759 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,759 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 20:51:47,759 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,759 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:51:47,760 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,760 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,760 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,760 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,760 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 20:51:47,760 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,760 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,761 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,761 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,761 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,761 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,762 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,762 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,762 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,762 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,763 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,763 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,763 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,763 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,764 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,764 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,764 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,764 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,765 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,765 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,765 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,765 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:51:47,766 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,766 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,766 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,766 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,767 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,767 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,767 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,767 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,768 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,768 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 20:51:47,768 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,768 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 20:51:47,768 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,768 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,769 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,769 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,769 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:51:47,769 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,769 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:51:47,769 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,770 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:51:47,770 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,770 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 20:51:47,770 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,770 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,771 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,771 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,771 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:51:47,771 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,772 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,772 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 20:51:47,772 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,772 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,772 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,773 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 20:51:47,773 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,773 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,773 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 20:51:47,774 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:51:47,774 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,774 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:51:47,774 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,775 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,775 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,776 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,776 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:51:47,776 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,776 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 20:51:47,776 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,777 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 20:51:47,777 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,777 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,777 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,778 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,778 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 20:51:47,778 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,778 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,778 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,778 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:51:47,779 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 20:51:47,779 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,779 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,779 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,779 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,779 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,779 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,780 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,780 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 20:51:47,780 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,780 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,780 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,780 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,780 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,781 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 20:51:47,781 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,781 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,781 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:51:47,781 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,781 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 20:51:47,781 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:51:47,782 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 20:51:47,782 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,782 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,782 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,782 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,782 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,782 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,782 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:51:47,783 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 20:51:47,783 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,783 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,783 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,783 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,783 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:51:47,783 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 20:51:47,784 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 20:51:47,784 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,784 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,784 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,784 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,784 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,784 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,785 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,785 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,785 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:51:47,785 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,785 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 20:51:47,785 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,785 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,786 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,786 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,786 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,786 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:51:47,786 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,786 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,786 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,787 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 20:51:47,787 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,787 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,787 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:51:47,787 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:51:47,787 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,787 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,788 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,788 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,788 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,788 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,788 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:51:47,788 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,788 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 20:51:47,789 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,789 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 20:51:47,789 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,789 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,789 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,789 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:51:47,789 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 20:51:47,790 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,790 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,790 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,790 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 20:51:47,790 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,790 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,790 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,791 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 20:51:47,791 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 20:51:47,791 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 20:51:47,791 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 20:51:47,791 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,792 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,792 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,792 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,793 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,793 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 20:51:47,794 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,795 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,795 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,796 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,796 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,796 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,796 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,796 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,796 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,797 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 20:51:47,797 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 20:51:47,797 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,797 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,797 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:51:47,797 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,798 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 20:51:47,798 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,798 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,798 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 20:51:47,798 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,799 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,799 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,799 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,799 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 20:51:47,799 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,800 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,800 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 20:51:47,800 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,800 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,800 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,801 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,801 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,801 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,801 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,801 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,801 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,801 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:51:47,802 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,802 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,802 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,802 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,802 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,802 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,802 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,803 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,803 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,803 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,803 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 20:51:47,803 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 20:51:47,803 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,803 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,804 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,804 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,804 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 20:51:47,804 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,804 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,804 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,804 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,805 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,805 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 20:51:47,805 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,805 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,805 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,805 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 20:51:47,805 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,806 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:51:47,806 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 20:51:47,806 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,806 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,806 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 20:51:47,806 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,806 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,807 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,807 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,807 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,807 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,807 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,807 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 20:51:47,808 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,808 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,808 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,808 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,808 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 20:51:47,808 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 20:51:47,808 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,809 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,809 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,809 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,809 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,809 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,810 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,810 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,810 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 20:51:47,810 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,810 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,810 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,811 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 20:51:47,811 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,811 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,811 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 20:51:47,811 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,812 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 20:51:47,812 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,812 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,812 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-10-21 20:51:47,813 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 20:51:47,813 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,813 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,813 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,813 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,814 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,814 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,814 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,814 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,814 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:51:47,814 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,814 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,815 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,815 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,815 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 20:51:47,815 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 20:51:47,815 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,815 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,815 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,816 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,816 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 20:51:47,816 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,816 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,816 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,816 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,816 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,817 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 20:51:47,817 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 20:51:47,817 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,817 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,817 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,817 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,817 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,818 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 20:51:47,818 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,818 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,818 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 20:51:47,818 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,818 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 20:51:47,818 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 20:51:47,819 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 20:51:47,819 [12892] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 20:51:47,819 [12892] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-10-21 20:56:44,202 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 20:56:44,203 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 6; new: 1
2021-10-21 20:56:44,203 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:6] new[1:1]
2021-10-21 20:56:44,203 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 20:56:44,204 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 21:00:18,751 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 21:00:18,752 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 3
2021-10-21 21:00:18,752 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:3]
2021-10-21 21:00:18,753 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 4 (to 2 in part parser)
2021-10-21 21:00:18,753 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 21:00:34,189 [12892] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 21:00:34,190 [12892] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 3; new: 3
2021-10-21 21:00:34,190 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:2] new[1:2]
2021-10-21 21:00:34,191 [12892] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:2] new[1:2]
2021-10-21 21:00:34,191 [12892] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[3:3] new[3:3]
2021-10-21 21:00:34,192 [12892] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 3 to 3 (to 2 in part parser)
2021-10-21 21:00:34,192 [12892] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 21:02:27,181 [1796] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2021-10-21 21:02:50,055 [1796] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 21:02:50,056 [1796] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-10-21 21:02:50,056 [1796] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-10-21 21:02:50,057 [1796] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 21:02:50,057 [1796] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 21:03:00,902 [1796] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2021-10-21 21:03:00,902 [1796] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 1; new: 1
2021-10-21 21:03:00,902 [1796] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[1:1] new[1:1]
2021-10-21 21:03:00,903 [1796] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 1 to 1 (to 0 in part parser)
2021-10-21 21:03:00,903 [1796] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2021-10-21 21:03:25,892 [1796] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
2021-10-21 21:03:25,893 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,893 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,893 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,893 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,893 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,893 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,894 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,894 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,894 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,894 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,894 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,894 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,894 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,895 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 21:03:25,895 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,895 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,895 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,895 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,895 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,895 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,896 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,896 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,896 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 21:03:25,896 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,896 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,896 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,897 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,897 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,897 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,897 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 21:03:25,897 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 21:03:25,897 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,897 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,898 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,898 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,898 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 21:03:25,898 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,898 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 21:03:25,898 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,898 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,899 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 21:03:25,899 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,899 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,899 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,899 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,899 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 21:03:25,899 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 21:03:25,900 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,900 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 21:03:25,900 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,900 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,900 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,900 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,901 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,901 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 21:03:25,901 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,901 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 21:03:25,901 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,901 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,901 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,901 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,902 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,902 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,902 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,902 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 21:03:25,902 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,902 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 21:03:25,902 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,903 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,903 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,903 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,903 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 21:03:25,903 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,903 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,903 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,904 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,904 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,904 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,904 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,904 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,904 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,904 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,905 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,905 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,905 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,905 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,905 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,905 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,905 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,906 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,906 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,906 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,906 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,906 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 21:03:25,906 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,907 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,907 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,907 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,907 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,907 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,907 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,908 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,908 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,908 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2021-10-21 21:03:25,908 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,908 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 21:03:25,908 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,909 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,909 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,909 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,909 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 21:03:25,909 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,909 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 21:03:25,909 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,910 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 21:03:25,910 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,910 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 21:03:25,910 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,910 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,910 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,910 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,911 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 21:03:25,911 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,911 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,911 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 21:03:25,911 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,911 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,911 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,912 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 21:03:25,912 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,912 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,912 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2021-10-21 21:03:25,912 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 21:03:25,912 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,912 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 21:03:25,913 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,913 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,913 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,913 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,913 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 21:03:25,913 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,913 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 21:03:25,914 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,914 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 21:03:25,914 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,914 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,914 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,914 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,914 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 21:03:25,915 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,915 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,915 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,915 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 21:03:25,915 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 21:03:25,915 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,915 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,916 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,916 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,916 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,916 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,916 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,916 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 21:03:25,916 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,917 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,917 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,917 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,917 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,917 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2021-10-21 21:03:25,917 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,917 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,918 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 21:03:25,918 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,918 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2021-10-21 21:03:25,918 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 21:03:25,918 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 21:03:25,918 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,918 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,919 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,919 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,919 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,919 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,919 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 21:03:25,919 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 21:03:25,919 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,920 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,920 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,920 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,920 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 21:03:25,920 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2021-10-21 21:03:25,920 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 21:03:25,920 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,921 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,921 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,921 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,921 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,921 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,921 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,921 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,922 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 21:03:25,922 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,922 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2021-10-21 21:03:25,922 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,922 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,922 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,922 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,923 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,923 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 21:03:25,923 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,923 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,923 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,923 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 21:03:25,923 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,924 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,924 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 21:03:25,924 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2021-10-21 21:03:25,924 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,924 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,924 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,924 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,925 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,925 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,925 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 21:03:25,925 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,925 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2021-10-21 21:03:25,925 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,925 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 21:03:25,926 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,926 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,926 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,926 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2021-10-21 21:03:25,926 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2021-10-21 21:03:25,926 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,926 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,927 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,927 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 21:03:25,927 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,927 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,927 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,927 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2021-10-21 21:03:25,927 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2021-10-21 21:03:25,928 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 21:03:25,928 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2021-10-21 21:03:25,928 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,928 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,928 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,928 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,928 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,929 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 21:03:25,929 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,929 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,929 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,929 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,929 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,929 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,930 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,930 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,930 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,930 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2021-10-21 21:03:25,930 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2021-10-21 21:03:25,930 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,930 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,931 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 21:03:25,931 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,931 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2021-10-21 21:03:25,931 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,931 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,931 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 21:03:25,931 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,932 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,932 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,932 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,932 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 21:03:25,932 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,932 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,932 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2021-10-21 21:03:25,933 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,933 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,933 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,933 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,933 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,933 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,933 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,934 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,934 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,934 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2021-10-21 21:03:25,934 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,934 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,934 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,934 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,935 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,935 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,935 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,935 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,935 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,935 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,935 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2021-10-21 21:03:25,936 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2021-10-21 21:03:25,936 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,936 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,936 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,936 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,936 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2021-10-21 21:03:25,936 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,937 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,937 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,937 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,937 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,937 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2021-10-21 21:03:25,937 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,937 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,938 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,938 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2021-10-21 21:03:25,938 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,938 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2021-10-21 21:03:25,938 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2021-10-21 21:03:25,938 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,939 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,939 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 21:03:25,939 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,939 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,939 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,939 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,939 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,940 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,940 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,940 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2021-10-21 21:03:25,940 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,940 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,940 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,940 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,941 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2021-10-21 21:03:25,941 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2021-10-21 21:03:25,941 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,941 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,941 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,941 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,942 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,942 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,942 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,942 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,942 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2021-10-21 21:03:25,942 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,942 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,943 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,943 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2021-10-21 21:03:25,943 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,943 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,943 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2021-10-21 21:03:25,943 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,943 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2021-10-21 21:03:25,944 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,944 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,944 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2021-10-21 21:03:25,944 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2021-10-21 21:03:25,944 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,944 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,944 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,945 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,945 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,945 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,945 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,945 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,945 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 21:03:25,945 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,946 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,946 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,946 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,946 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2021-10-21 21:03:25,946 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2021-10-21 21:03:25,946 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,946 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,947 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,947 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,947 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2021-10-21 21:03:25,947 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,947 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,947 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,947 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,948 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,948 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2021-10-21 21:03:25,948 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2021-10-21 21:03:25,948 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,948 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,948 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,948 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,949 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,949 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2021-10-21 21:03:25,949 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,949 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,949 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2021-10-21 21:03:25,949 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,949 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2021-10-21 21:03:25,950 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2021-10-21 21:03:25,950 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2021-10-21 21:03:25,950 [1796] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2021-10-21 21:03:25,950 [1796] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2021-10-21 22:54:38,122 [1796] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-10-21 22:54:38,122 [1796] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-10-21 22:54:38,122 [1796] INFO     root:247: [JupyterRequire] Initializing comms.
2021-10-21 22:54:38,125 [1796] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-10-21 22:54:38,126 [1796] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-10-21 22:54:38,126 [1796] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-10-21 22:54:40,401 [12892] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-10-21 22:54:40,401 [12892] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-10-21 22:54:40,401 [12892] INFO     root:247: [JupyterRequire] Initializing comms.
2021-10-21 22:54:40,682 [12892] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-10-21 22:54:40,682 [12892] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-10-21 22:54:40,682 [12892] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-10-21 22:54:43,797 [10148] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-10-21 22:54:43,844 [10148] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-10-21 22:54:43,844 [10148] INFO     root:247: [JupyterRequire] Initializing comms.
2021-10-21 22:54:43,984 [10148] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-10-21 22:54:43,984 [10148] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-10-21 22:54:43,984 [10148] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2021-10-21 22:54:44,330 [12168] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2021-10-21 22:54:44,439 [12168] DEBUG    root:93: [JupyterRequire] Initializing comms.
2021-10-21 22:54:44,439 [12168] INFO     root:247: [JupyterRequire] Initializing comms.
2021-10-21 22:54:44,517 [12168] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2021-10-21 22:54:44,517 [12168] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2021-10-21 22:54:44,517 [12168] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-01-19 20:05:18,299 [376] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-01-19 20:05:18,300 [376] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-01-19 20:05:18,300 [376] INFO     root:247: [JupyterRequire] Initializing comms.
2022-01-19 20:05:18,303 [376] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-01-19 20:05:18,303 [376] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-01-19 20:05:18,304 [376] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-01-19 20:10:13,966 [376] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2022-01-19 20:10:14,774 [376] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2022-01-19 20:10:14,774 [376] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2022-01-19 20:10:14,780 [376] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=C:\Users\sasha\.matplotlib
2022-01-19 20:10:14,783 [376] DEBUG    matplotlib:1471: [JupyterRequire] matplotlib version 3.3.2
2022-01-19 20:10:14,783 [376] DEBUG    matplotlib:1472: [JupyterRequire] interactive is False
2022-01-19 20:10:14,783 [376] DEBUG    matplotlib:1473: [JupyterRequire] platform is win32
2022-01-19 20:10:14,783 [376] DEBUG    matplotlib:1474: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1251', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'pprint', 'locale', 'gettext', 'argparse', 'ipython_genutils._version', 'ipython_genutils', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', '_struct', 'struct', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_21', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'ipython_genutils.importstring', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'configparser', 'isort.stdlibs.py27', 'isort.stdlibs.py2', 'isort.stdlibs.py35', 'isort.stdlibs.py36', 'isort.stdlibs.py37', 'isort.stdlibs.py38', 'isort.stdlibs.py39', 'isort.stdlibs.py3', 'isort.stdlibs.all', 'isort.stdlibs', 'dataclasses', 'isort._future', 'isort._vendored', 'isort._vendored.toml.tz', 'isort._vendored.toml.decoder', 'isort._vendored.toml.encoder', 'isort._vendored.toml', 'isort.profiles', 'isort.exceptions', 'isort.sections', 'isort.comments', 'isort.wrap_modes', 'isort.settings', 'isort._version', 'isort.literal', 'isort.format', 'isort.utils', 'isort.place', 'isort.deprecated', 'isort.deprecated.finders', 'isort.parse', 'isort.sorting', 'isort.wrap', 'isort.output', 'isort.core', 'isort.io', 'isort.api', 'isort', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_20', 'numpy.random._common', 'secrets', 'numpy.random._bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', '_cython_0_29_24', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'gzip', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2022-01-19 20:10:14,853 [376] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=C:\Users\sasha\.matplotlib
2022-01-19 20:10:14,898 [376] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from C:\Users\sasha\.matplotlib\fontlist-v330.json
2022-01-19 20:10:15,199 [376] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-01-19 20:10:15,203 [376] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-01-19 20:10:16,726 [376] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-01-19 20:10:16,862 [376] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0.
2022-01-19 20:10:16,862 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,862 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,863 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,863 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,863 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,863 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,863 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,863 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,863 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,864 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,864 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,864 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,864 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,864 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 20:10:16,864 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,864 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,865 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,865 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,865 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,865 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,865 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,865 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,866 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 20:10:16,866 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,866 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,866 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,866 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,866 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,866 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,867 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 20:10:16,867 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 20:10:16,867 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,867 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,867 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,867 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,867 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 20:10:16,868 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,868 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 20:10:16,868 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,868 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,868 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-01-19 20:10:16,868 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,868 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,869 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,869 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,869 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-01-19 20:10:16,869 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,869 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,869 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-01-19 20:10:16,870 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,870 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,870 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,870 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,870 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,870 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-01-19 20:10:16,870 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,871 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:10:16,871 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,871 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,871 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,872 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,872 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,872 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,872 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,873 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-01-19 20:10:16,875 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,876 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:10:16,876 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,876 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,876 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,876 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,877 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-01-19 20:10:16,877 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,877 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,877 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,877 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,877 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,877 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,878 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,878 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,878 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,878 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,878 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,878 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,878 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,879 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,879 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,880 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,880 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,880 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,880 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,880 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,880 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,881 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:10:16,881 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,881 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,881 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,881 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,881 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,881 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,882 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,882 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,882 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,882 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-01-19 20:10:16,882 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,882 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-01-19 20:10:16,882 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,883 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,883 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,883 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,883 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 20:10:16,883 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,883 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:10:16,883 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,884 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:10:16,884 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,884 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-01-19 20:10:16,884 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,884 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,884 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,884 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,884 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:10:16,885 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,885 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,885 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-01-19 20:10:16,885 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,885 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,885 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,885 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-01-19 20:10:16,886 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,886 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,886 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-01-19 20:10:16,886 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:10:16,886 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,886 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 20:10:16,886 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,887 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,887 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,887 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,887 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:10:16,887 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,888 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-01-19 20:10:16,888 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,888 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-01-19 20:10:16,888 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,888 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,889 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,889 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,889 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-01-19 20:10:16,889 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,890 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,890 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,890 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,890 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-01-19 20:10:16,890 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,890 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,891 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,891 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,891 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,891 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,891 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,891 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-01-19 20:10:16,892 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,892 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,892 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,892 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,892 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,892 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-01-19 20:10:16,892 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,893 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,893 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,893 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,893 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-01-19 20:10:16,893 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,893 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-01-19 20:10:16,894 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,894 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,894 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,894 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,894 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,894 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,894 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:10:16,895 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-01-19 20:10:16,895 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,895 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,895 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,895 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,896 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:10:16,896 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 20:10:16,896 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-01-19 20:10:16,896 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,896 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,896 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,896 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,897 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,897 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,897 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,897 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,897 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 20:10:16,897 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,898 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:10:16,898 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,898 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,898 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,898 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,898 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,898 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 20:10:16,899 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,899 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,899 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,899 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-01-19 20:10:16,899 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,899 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,899 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:10:16,899 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,900 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,900 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,900 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,900 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,900 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,900 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,900 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:10:16,901 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,901 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-01-19 20:10:16,901 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,901 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-01-19 20:10:16,901 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,901 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,901 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,902 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:10:16,902 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-01-19 20:10:16,902 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,902 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,902 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,902 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,902 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,903 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,903 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,903 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-01-19 20:10:16,903 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-01-19 20:10:16,903 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-01-19 20:10:16,903 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:10:16,903 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,904 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,904 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,904 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,904 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,905 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-01-19 20:10:16,905 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,905 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,905 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,906 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,906 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,907 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,908 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,909 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,909 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,909 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-01-19 20:10:16,909 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-01-19 20:10:16,909 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,910 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,910 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 20:10:16,910 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,910 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-01-19 20:10:16,910 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,910 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,911 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-01-19 20:10:16,911 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,911 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,911 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,911 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,911 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-01-19 20:10:16,911 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,912 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,912 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-01-19 20:10:16,912 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,912 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,912 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,912 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,912 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,913 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,913 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,913 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,913 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,913 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,913 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,913 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,913 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,914 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,914 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,914 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,914 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,914 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,914 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,914 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,915 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-01-19 20:10:16,915 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 20:10:16,915 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,915 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,915 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,915 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,915 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 20:10:16,916 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,916 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,916 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,916 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,916 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,916 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 20:10:16,916 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,917 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,917 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,917 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-01-19 20:10:16,917 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,917 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,917 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-01-19 20:10:16,917 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,918 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,918 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-01-19 20:10:16,918 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,918 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,918 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,918 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,918 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,919 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,919 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,919 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 20:10:16,919 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,919 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,919 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,919 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,920 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,920 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,920 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,920 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,920 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,920 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,921 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,921 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,921 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,921 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,921 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-01-19 20:10:16,921 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,921 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,922 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,922 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-01-19 20:10:16,922 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,922 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,922 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-01-19 20:10:16,922 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,922 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-01-19 20:10:16,923 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,923 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,923 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2022-01-19 20:10:16,923 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-01-19 20:10:16,923 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,923 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,923 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,924 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,924 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,924 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,924 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,924 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,924 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 20:10:16,924 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,925 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,925 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,925 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,925 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,925 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-01-19 20:10:16,925 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,925 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,926 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,926 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,926 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-01-19 20:10:16,926 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,926 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,926 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,926 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,926 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,927 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:10:16,927 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 20:10:16,927 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,927 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,927 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,927 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,927 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,928 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,928 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,928 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,928 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,928 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,928 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-01-19 20:10:16,928 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-01-19 20:10:16,929 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,929 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-01-19 20:10:16,929 [376] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2022-01-19 20:10:16,941 [376] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2022-01-19 20:10:16,942 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,942 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,943 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,943 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,943 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,943 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,943 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,944 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,944 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,944 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,944 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,944 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,945 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,945 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 20:10:16,945 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,945 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,945 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,945 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,946 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,946 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,946 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,946 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,946 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 20:10:16,946 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,946 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,947 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,947 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,947 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,947 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,947 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 20:10:16,947 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 20:10:16,947 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,948 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,948 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,948 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,948 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 20:10:16,948 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,948 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 20:10:16,948 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,949 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,949 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-01-19 20:10:16,949 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,949 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,949 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,949 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,949 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-01-19 20:10:16,950 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,950 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,950 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-01-19 20:10:16,950 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,950 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,950 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,950 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,951 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,951 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-01-19 20:10:16,951 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,951 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:10:16,951 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,951 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,951 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,952 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,952 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,952 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,952 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,952 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-01-19 20:10:16,952 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,952 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:10:16,953 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,953 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,953 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,953 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,953 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-01-19 20:10:16,953 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,953 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,954 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,954 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,954 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,954 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,955 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,955 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,955 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,955 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,955 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,955 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,955 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,956 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,956 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,956 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,956 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,956 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,956 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,956 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,957 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,957 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:10:16,957 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,957 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,957 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,957 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,957 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,958 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,958 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,958 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,958 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,958 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-01-19 20:10:16,958 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,958 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-01-19 20:10:16,959 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,959 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,959 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,959 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,959 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 20:10:16,959 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,959 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:10:16,960 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,960 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:10:16,960 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,960 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-01-19 20:10:16,960 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,960 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,960 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,961 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,961 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:10:16,961 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,961 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,961 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-01-19 20:10:16,961 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,961 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,962 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,962 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-01-19 20:10:16,962 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,962 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,962 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-01-19 20:10:16,962 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:10:16,962 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,963 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 20:10:16,963 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,963 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,963 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,963 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,963 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:10:16,963 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,964 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-01-19 20:10:16,964 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,964 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-01-19 20:10:16,964 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,964 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,964 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,964 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,965 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-01-19 20:10:16,965 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,965 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,965 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,965 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,965 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-01-19 20:10:16,965 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,966 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,966 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,966 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,966 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,966 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,966 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,966 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-01-19 20:10:16,967 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,967 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,967 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,967 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,967 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,967 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-01-19 20:10:16,967 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,968 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,968 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,968 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,968 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-01-19 20:10:16,968 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,968 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-01-19 20:10:16,968 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,969 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,969 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,969 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,969 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,969 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,969 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:10:16,970 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-01-19 20:10:16,970 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,970 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,970 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,970 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,970 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:10:16,970 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 20:10:16,971 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-01-19 20:10:16,971 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,971 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,971 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,971 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,971 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,972 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,972 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,972 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,972 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 20:10:16,973 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,974 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:10:16,974 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,975 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,975 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,975 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,975 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,976 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 20:10:16,976 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,976 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,976 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,976 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-01-19 20:10:16,976 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,976 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,977 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:10:16,977 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,977 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,977 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,977 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,977 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,977 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,978 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,978 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:10:16,978 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,978 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-01-19 20:10:16,978 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,978 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-01-19 20:10:16,978 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,979 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,979 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,979 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:10:16,979 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-01-19 20:10:16,979 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,979 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,980 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,980 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,980 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,980 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,980 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,980 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-01-19 20:10:16,980 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-01-19 20:10:16,981 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-01-19 20:10:16,981 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:10:16,981 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,981 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,981 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,981 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,981 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,982 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-01-19 20:10:16,982 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,982 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,982 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,982 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,982 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,983 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,983 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,983 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,983 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,983 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-01-19 20:10:16,984 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-01-19 20:10:16,984 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,984 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,985 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 20:10:16,985 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,985 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-01-19 20:10:16,985 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,986 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,986 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-01-19 20:10:16,986 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,987 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,987 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,987 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,987 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-01-19 20:10:16,987 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,988 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,988 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-01-19 20:10:16,988 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,988 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,988 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,989 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,989 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,989 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,989 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,989 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,989 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,989 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,990 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,990 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,990 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,990 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,990 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,990 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,990 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,991 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,991 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,991 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,991 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-01-19 20:10:16,991 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 20:10:16,991 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,991 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,992 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,992 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,992 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 20:10:16,992 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,992 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,992 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,992 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,993 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,993 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 20:10:16,993 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,993 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,993 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,993 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-01-19 20:10:16,993 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,994 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,994 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-01-19 20:10:16,994 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,994 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,994 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-01-19 20:10:16,994 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,994 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,994 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,995 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,995 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,995 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,995 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,995 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 20:10:16,995 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,995 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,996 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,996 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,996 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,996 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:10:16,996 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,996 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,996 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,997 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,997 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,997 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,997 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,997 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,997 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-01-19 20:10:16,997 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,998 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,998 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,998 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-01-19 20:10:16,998 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,998 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:16,998 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-01-19 20:10:16,999 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:16,999 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-01-19 20:10:16,999 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:16,999 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:16,999 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2022-01-19 20:10:16,999 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-01-19 20:10:16,999 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:17,000 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:17,000 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:17,000 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:17,000 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:17,000 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:17,000 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:17,000 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:17,001 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 20:10:17,001 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:17,001 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:17,001 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:17,001 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:17,001 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:10:17,001 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-01-19 20:10:17,002 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:17,002 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:17,002 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:17,002 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:17,002 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-01-19 20:10:17,002 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:17,002 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:17,003 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:17,003 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:10:17,003 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:17,003 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:10:17,003 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 20:10:17,003 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:17,003 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:17,004 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:17,004 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:17,004 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:17,004 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:10:17,004 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:17,004 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:17,004 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:10:17,005 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:10:17,005 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-01-19 20:10:17,005 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-01-19 20:10:17,005 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:10:17,005 [376] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-01-19 20:10:17,006 [376] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2022-01-19 20:17:07,733 [2544] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-01-19 20:17:07,733 [2544] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-01-19 20:17:07,733 [2544] INFO     root:247: [JupyterRequire] Initializing comms.
2022-01-19 20:17:07,735 [2544] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-01-19 20:17:07,736 [2544] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-01-19 20:17:07,736 [2544] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-01-19 20:17:08,320 [2544] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-01-19 20:17:08,321 [2544] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-01-19 20:17:08,321 [2544] INFO     root:247: [JupyterRequire] Initializing comms.
2022-01-19 20:17:08,324 [2544] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-01-19 20:17:08,324 [2544] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-01-19 20:17:08,324 [2544] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-01-19 20:27:06,978 [2544] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2022-01-19 20:27:06,978 [2544] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2022-01-19 20:27:06,984 [2544] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=C:\Users\sasha\.matplotlib
2022-01-19 20:27:06,986 [2544] DEBUG    matplotlib:1471: [JupyterRequire] matplotlib version 3.3.2
2022-01-19 20:27:06,986 [2544] DEBUG    matplotlib:1472: [JupyterRequire] interactive is False
2022-01-19 20:27:06,986 [2544] DEBUG    matplotlib:1473: [JupyterRequire] platform is win32
2022-01-19 20:27:06,987 [2544] DEBUG    matplotlib:1474: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1251', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'pprint', 'locale', 'gettext', 'argparse', 'ipython_genutils._version', 'ipython_genutils', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', '_struct', 'struct', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_21', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'ipython_genutils.importstring', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'configparser', 'isort.stdlibs.py27', 'isort.stdlibs.py2', 'isort.stdlibs.py35', 'isort.stdlibs.py36', 'isort.stdlibs.py37', 'isort.stdlibs.py38', 'isort.stdlibs.py39', 'isort.stdlibs.py3', 'isort.stdlibs.all', 'isort.stdlibs', 'dataclasses', 'isort._future', 'isort._vendored', 'isort._vendored.toml.tz', 'isort._vendored.toml.decoder', 'isort._vendored.toml.encoder', 'isort._vendored.toml', 'isort.profiles', 'isort.exceptions', 'isort.sections', 'isort.comments', 'isort.wrap_modes', 'isort.settings', 'isort._version', 'isort.literal', 'isort.format', 'isort.utils', 'isort.place', 'isort.deprecated', 'isort.deprecated.finders', 'isort.parse', 'isort.sorting', 'isort.wrap', 'isort.output', 'isort.core', 'isort.io', 'isort.api', 'isort', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_20', 'numpy.random._common', 'secrets', 'numpy.random._bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'matplotlib', 'gzip', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2022-01-19 20:27:07,049 [2544] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=C:\Users\sasha\.matplotlib
2022-01-19 20:27:07,053 [2544] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from C:\Users\sasha\.matplotlib\fontlist-v330.json
2022-01-19 20:27:07,277 [2544] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-01-19 20:27:07,281 [2544] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-01-19 20:27:08,452 [2544] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2022-01-19 20:27:13,940 [2544] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2022-01-19 20:27:13,940 [2544] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2022-01-19 20:27:13,941 [2544] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2022-01-19 20:27:13,941 [2544] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2022-01-19 20:28:54,920 [2544] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2022-01-19 20:28:54,920 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,920 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,920 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,921 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,921 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,921 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,921 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,921 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,921 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,921 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,922 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,922 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,922 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,922 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 20:28:54,922 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,922 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,922 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,923 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,923 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,923 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,923 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,923 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,923 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 20:28:54,923 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,924 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,924 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,924 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,924 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,924 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,924 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 20:28:54,924 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 20:28:54,925 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,925 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,925 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,925 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,925 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 20:28:54,925 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,925 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 20:28:54,926 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,926 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,926 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-01-19 20:28:54,926 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,926 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,926 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,926 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,927 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-01-19 20:28:54,927 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:28:54,927 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,927 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-01-19 20:28:54,927 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,927 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,927 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,927 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,928 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,928 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-01-19 20:28:54,928 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,928 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:28:54,928 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,928 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,928 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,929 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,929 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,929 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,929 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,929 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-01-19 20:28:54,929 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,930 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:28:54,930 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,930 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,930 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,930 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,930 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-01-19 20:28:54,931 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,931 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,931 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,931 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,931 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,932 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,932 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,932 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,932 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,933 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,933 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,934 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,934 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,936 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,937 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,938 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,938 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,938 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,938 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,938 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,938 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,938 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:28:54,939 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,939 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,939 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,939 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,939 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,939 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,939 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,940 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,940 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,940 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-01-19 20:28:54,940 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,940 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-01-19 20:28:54,940 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,940 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,940 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,940 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,940 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 20:28:54,940 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,940 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:28:54,941 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,941 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:28:54,941 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,941 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-01-19 20:28:54,941 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,941 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,942 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,942 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,942 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:28:54,942 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,942 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,942 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-01-19 20:28:54,942 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,942 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,943 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,943 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-01-19 20:28:54,943 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,943 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,943 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-01-19 20:28:54,943 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:28:54,943 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,944 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 20:28:54,944 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,944 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,944 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,944 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,944 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:28:54,945 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,945 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-01-19 20:28:54,945 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,945 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-01-19 20:28:54,945 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,945 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,945 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,945 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,946 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-01-19 20:28:54,946 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,946 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,946 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,946 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:28:54,946 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-01-19 20:28:54,947 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,947 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,947 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,947 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,947 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,947 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,947 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,948 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-01-19 20:28:54,948 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,948 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,948 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,948 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,948 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,948 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-01-19 20:28:54,948 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,949 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,949 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:28:54,949 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,949 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-01-19 20:28:54,949 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:28:54,949 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-01-19 20:28:54,949 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,950 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,950 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,950 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,950 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,950 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,950 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:28:54,950 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-01-19 20:28:54,951 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,951 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,951 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,951 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,951 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:28:54,951 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 20:28:54,951 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-01-19 20:28:54,952 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,952 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,952 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,952 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,952 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,952 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,952 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,953 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,953 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 20:28:54,953 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,953 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:28:54,953 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,953 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,953 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,953 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,954 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,954 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 20:28:54,954 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,954 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,954 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,954 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-01-19 20:28:54,954 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,955 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,955 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:28:54,955 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:28:54,955 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,955 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,955 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,955 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,956 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,956 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,956 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:28:54,956 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,956 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-01-19 20:28:54,956 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,956 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-01-19 20:28:54,957 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,957 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,957 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,957 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:28:54,957 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-01-19 20:28:54,957 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,957 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,958 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,958 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-01-19 20:28:54,958 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,958 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,958 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,958 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-01-19 20:28:54,958 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-01-19 20:28:54,959 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-01-19 20:28:54,959 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:28:54,959 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,959 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,959 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,959 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,959 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,960 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-01-19 20:28:54,960 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,960 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,960 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,960 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,960 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,960 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,961 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,961 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,961 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,961 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-01-19 20:28:54,961 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-01-19 20:28:54,961 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,961 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,962 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 20:28:54,962 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,962 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-01-19 20:28:54,962 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,962 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,962 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-01-19 20:28:54,962 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,963 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,963 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,963 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,963 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-01-19 20:28:54,963 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,963 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,963 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-01-19 20:28:54,964 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,964 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,964 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,964 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,964 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,964 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,964 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,965 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,965 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,965 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:28:54,965 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,965 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,965 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,965 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,966 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,966 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,966 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,966 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,966 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,966 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,966 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-01-19 20:28:54,966 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 20:28:54,967 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,967 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,967 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,967 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,967 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 20:28:54,967 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,967 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,968 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,968 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,968 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,968 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 20:28:54,968 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,968 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,968 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,969 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-01-19 20:28:54,969 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,969 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:28:54,969 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-01-19 20:28:54,969 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,969 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,969 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-01-19 20:28:54,970 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,970 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,970 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,970 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,970 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,970 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,970 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,971 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 20:28:54,971 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,971 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,971 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,971 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,971 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-01-19 20:28:54,971 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:28:54,972 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,972 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,972 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,972 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,972 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,972 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,972 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,972 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,973 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-01-19 20:28:54,973 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,973 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,973 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,973 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-01-19 20:28:54,973 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,973 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,974 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-01-19 20:28:54,974 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,974 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-01-19 20:28:54,974 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,974 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,974 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2022-01-19 20:28:54,974 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-01-19 20:28:54,975 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,975 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,975 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,975 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,975 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,975 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,975 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,976 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,976 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 20:28:54,976 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,976 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,976 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,976 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,977 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:28:54,977 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-01-19 20:28:54,977 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,977 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,977 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,977 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,978 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-01-19 20:28:54,978 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,978 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,978 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,979 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,979 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,979 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:28:54,979 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 20:28:54,979 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,980 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,980 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,980 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,980 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,981 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:28:54,981 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,981 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,981 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:28:54,981 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,981 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-01-19 20:28:54,981 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-01-19 20:28:54,982 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:28:54,982 [2544] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-01-19 20:28:54,982 [2544] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2022-01-19 20:36:27,566 [2544] DEBUG    numba.core.byteflow:74: [JupyterRequire] bytecode dump:
>          0	NOP(arg=None, lineno=81)
           2	LOAD_GLOBAL(arg=0, lineno=81)
           4	LOAD_FAST(arg=0, lineno=81)
           6	LOAD_FAST(arg=1, lineno=81)
           8	LOAD_FAST(arg=2, lineno=81)
          10	CALL_FUNCTION(arg=3, lineno=81)
          12	STORE_FAST(arg=3, lineno=81)
          14	LOAD_GLOBAL(arg=1, lineno=82)
          16	LOAD_METHOD(arg=2, lineno=82)
          18	LOAD_FAST(arg=3, lineno=82)
          20	LOAD_CONST(arg=1, lineno=82)
          22	BINARY_SUBSCR(arg=None, lineno=82)
          24	CALL_METHOD(arg=1, lineno=82)
          26	RETURN_VALUE(arg=None, lineno=82)
2022-01-19 20:36:27,566 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=0 nstack_initial=0)])
2022-01-19 20:36:27,567 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:27,567 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=0, inst=NOP(arg=None, lineno=81)
2022-01-19 20:36:27,567 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,567 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=81)
2022-01-19 20:36:27,567 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,568 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=81)
2022-01-19 20:36:27,568 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$2load_global.0']
2022-01-19 20:36:27,568 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=81)
2022-01-19 20:36:27,568 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$2load_global.0', '$s14.1']
2022-01-19 20:36:27,568 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=81)
2022-01-19 20:36:27,568 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$2load_global.0', '$s14.1', '$s26.2']
2022-01-19 20:36:27,569 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=81)
2022-01-19 20:36:27,569 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$2load_global.0', '$s14.1', '$s26.2', '$mask8.3']
2022-01-19 20:36:27,569 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=12, inst=STORE_FAST(arg=3, lineno=81)
2022-01-19 20:36:27,569 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$10call_function.4']
2022-01-19 20:36:27,569 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=14, inst=LOAD_GLOBAL(arg=1, lineno=82)
2022-01-19 20:36:27,570 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,570 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=16, inst=LOAD_METHOD(arg=2, lineno=82)
2022-01-19 20:36:27,570 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$14load_global.5']
2022-01-19 20:36:27,570 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=82)
2022-01-19 20:36:27,571 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16load_method.6']
2022-01-19 20:36:27,571 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=20, inst=LOAD_CONST(arg=1, lineno=82)
2022-01-19 20:36:27,571 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16load_method.6', '$cum_sum18.7']
2022-01-19 20:36:27,571 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=82)
2022-01-19 20:36:27,571 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16load_method.6', '$cum_sum18.7', '$const20.8']
2022-01-19 20:36:27,572 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=24, inst=CALL_METHOD(arg=1, lineno=82)
2022-01-19 20:36:27,572 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16load_method.6', '$22binary_subscr.9']
2022-01-19 20:36:27,572 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=82)
2022-01-19 20:36:27,572 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24call_method.10']
2022-01-19 20:36:27,572 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2022-01-19 20:36:27,573 [2544] DEBUG    numba.core.byteflow:163: [JupyterRequire] -------------------------Prune PHIs-------------------------
2022-01-19 20:36:27,573 [2544] DEBUG    numba.core.byteflow:232: [JupyterRequire] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2022-01-19 20:36:27,573 [2544] DEBUG    numba.core.byteflow:189: [JupyterRequire] defmap: {}
2022-01-19 20:36:27,573 [2544] DEBUG    numba.core.byteflow:190: [JupyterRequire] phismap: defaultdict(<class 'set'>, {})
2022-01-19 20:36:27,573 [2544] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>, {})
2022-01-19 20:36:27,574 [2544] DEBUG    numba.core.byteflow:220: [JupyterRequire] keep phismap: {}
2022-01-19 20:36:27,574 [2544] DEBUG    numba.core.byteflow:226: [JupyterRequire] new_out: defaultdict(<class 'dict'>, {})
2022-01-19 20:36:27,574 [2544] DEBUG    numba.core.byteflow:236: [JupyterRequire] ----------------------DONE Prune PHIs-----------------------
2022-01-19 20:36:27,574 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$s14.1'}), (6, {'res': '$s26.2'}), (8, {'res': '$mask8.3'}), (10, {'func': '$2load_global.0', 'args': ['$s14.1', '$s26.2', '$mask8.3'], 'res': '$10call_function.4'}), (12, {'value': '$10call_function.4'}), (14, {'res': '$14load_global.5'}), (16, {'item': '$14load_global.5', 'res': '$16load_method.6'}), (18, {'res': '$cum_sum18.7'}), (20, {'res': '$const20.8'}), (22, {'index': '$const20.8', 'target': '$cum_sum18.7', 'res': '$22binary_subscr.9'}), (24, {'func': '$16load_method.6', 'args': ['$22binary_subscr.9'], 'res': '$24call_method.10'}), (26, {'retval': '$24call_method.10', 'castval': '$26return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2022-01-19 20:36:27,575 [2544] DEBUG    numba.core.interpreter:149: [JupyterRequire] label 0:
    s1 = arg(0, name=s1)                     ['s1']
    s2 = arg(1, name=s2)                     ['s2']
    mask = arg(2, name=mask)                 ['mask']
    $2load_global.0 = global(njit_accumulated_matrix: CPUDispatcher(<function njit_accumulated_matrix at 0x00000209C10B1D30>)) ['$2load_global.0']
    $10call_function.4 = call $2load_global.0(s1, s2, mask, func=$2load_global.0, args=[Var(s1, dtw_variants.py:81), Var(s2, dtw_variants.py:81), Var(mask, dtw_variants.py:81)], kws=(), vararg=None) ['$10call_function.4', '$2load_global.0', 'mask', 's1', 's2']
    cum_sum = $10call_function.4             ['$10call_function.4', 'cum_sum']
    $14load_global.5 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$14load_global.5']
    $16load_method.6 = getattr(value=$14load_global.5, attr=sqrt) ['$14load_global.5', '$16load_method.6']
    $const_-1 = const(int, -1)               ['$const_-1']
    $const_-1.1 = const(int, -1)             ['$const_-1.1']
    $const20.8 = build_tuple(items=[Var($const_-1, dtw_variants.py:82), Var($const_-1.1, dtw_variants.py:82)]) ['$const20.8', '$const_-1', '$const_-1.1']
    $22binary_subscr.9 = getitem(value=cum_sum, index=$const20.8) ['$22binary_subscr.9', '$const20.8', 'cum_sum']
    $24call_method.10 = call $16load_method.6($22binary_subscr.9, func=$16load_method.6, args=[Var($22binary_subscr.9, dtw_variants.py:82)], kws=(), vararg=None) ['$16load_method.6', '$22binary_subscr.9', '$24call_method.10']
    $26return_value.11 = cast(value=$24call_method.10) ['$24call_method.10', '$26return_value.11']
    return $26return_value.11                ['$26return_value.11']

2022-01-19 20:36:27,581 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 0
2022-01-19 20:36:27,581 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C322ED00>
2022-01-19 20:36:27,581 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: s1 = arg(0, name=s1)
2022-01-19 20:36:27,581 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: s2 = arg(1, name=s2)
2022-01-19 20:36:27,582 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: mask = arg(2, name=mask)
2022-01-19 20:36:27,582 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $2load_global.0 = global(njit_accumulated_matrix: CPUDispatcher(<function njit_accumulated_matrix at 0x00000209C10B1D30>))
2022-01-19 20:36:27,582 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10call_function.4 = call $2load_global.0(s1, s2, mask, func=$2load_global.0, args=[Var(s1, dtw_variants.py:81), Var(s2, dtw_variants.py:81), Var(mask, dtw_variants.py:81)], kws=(), vararg=None)
2022-01-19 20:36:27,582 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: cum_sum = $10call_function.4
2022-01-19 20:36:27,582 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $14load_global.5 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:27,582 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16load_method.6 = getattr(value=$14load_global.5, attr=sqrt)
2022-01-19 20:36:27,583 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const_-1 = const(int, -1)
2022-01-19 20:36:27,583 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const_-1.1 = const(int, -1)
2022-01-19 20:36:27,583 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const20.8 = build_tuple(items=[Var($const_-1, dtw_variants.py:82), Var($const_-1.1, dtw_variants.py:82)])
2022-01-19 20:36:27,583 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22binary_subscr.9 = static_getitem(value=cum_sum, index=(-1, -1), index_var=$const20.8)
2022-01-19 20:36:27,583 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24call_method.10 = call $16load_method.6($22binary_subscr.9, func=$16load_method.6, args=[Var($22binary_subscr.9, dtw_variants.py:82)], kws=(), vararg=None)
2022-01-19 20:36:27,583 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26return_value.11 = cast(value=$24call_method.10)
2022-01-19 20:36:27,584 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $26return_value.11
2022-01-19 20:36:27,584 [2544] DEBUG    numba.core.ssa:141: [JupyterRequire] defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x00000209C32214C0>],
             '$14load_global.5': [<numba.core.ir.Assign object at 0x00000209C3221730>],
             '$16load_method.6': [<numba.core.ir.Assign object at 0x00000209C32218B0>],
             '$22binary_subscr.9': [<numba.core.ir.Assign object at 0x00000209C322EC40>],
             '$24call_method.10': [<numba.core.ir.Assign object at 0x00000209C322E100>],
             '$26return_value.11': [<numba.core.ir.Assign object at 0x00000209C322E250>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000209C3201430>],
             '$const20.8': [<numba.core.ir.Assign object at 0x00000209C3221D90>],
             '$const_-1': [<numba.core.ir.Assign object at 0x00000209C3221B80>],
             '$const_-1.1': [<numba.core.ir.Assign object at 0x00000209C3221CA0>],
             'cum_sum': [<numba.core.ir.Assign object at 0x00000209C32215B0>],
             'mask': [<numba.core.ir.Assign object at 0x00000209C3201730>],
             's1': [<numba.core.ir.Assign object at 0x00000209C32019D0>],
             's2': [<numba.core.ir.Assign object at 0x00000209C32010D0>]})
2022-01-19 20:36:27,584 [2544] DEBUG    numba.core.ssa:143: [JupyterRequire] SSA violators set()
2022-01-19 20:36:27,587 [2544] DEBUG    numba.core.byteflow:74: [JupyterRequire] bytecode dump:
>          0	NOP(arg=None, lineno=45)
           2	LOAD_FAST(arg=0, lineno=45)
           4	LOAD_ATTR(arg=0, lineno=45)
           6	LOAD_CONST(arg=1, lineno=45)
           8	BINARY_SUBSCR(arg=None, lineno=45)
          10	STORE_FAST(arg=3, lineno=45)
          12	LOAD_FAST(arg=1, lineno=46)
          14	LOAD_ATTR(arg=0, lineno=46)
          16	LOAD_CONST(arg=1, lineno=46)
          18	BINARY_SUBSCR(arg=None, lineno=46)
          20	STORE_FAST(arg=4, lineno=46)
          22	LOAD_GLOBAL(arg=1, lineno=47)
          24	LOAD_METHOD(arg=2, lineno=47)
          26	LOAD_FAST(arg=3, lineno=47)
          28	LOAD_CONST(arg=2, lineno=47)
          30	BINARY_ADD(arg=None, lineno=47)
          32	LOAD_FAST(arg=4, lineno=47)
          34	LOAD_CONST(arg=2, lineno=47)
          36	BINARY_ADD(arg=None, lineno=47)
          38	BUILD_TUPLE(arg=2, lineno=47)
          40	LOAD_GLOBAL(arg=1, lineno=47)
          42	LOAD_ATTR(arg=3, lineno=47)
          44	CALL_METHOD(arg=2, lineno=47)
          46	STORE_FAST(arg=5, lineno=47)
          48	LOAD_CONST(arg=3, lineno=48)
          50	LOAD_FAST(arg=5, lineno=48)
          52	LOAD_CONST(arg=4, lineno=48)
          54	STORE_SUBSCR(arg=None, lineno=48)
          56	LOAD_GLOBAL(arg=4, lineno=50)
          58	LOAD_FAST(arg=3, lineno=50)
          60	CALL_FUNCTION(arg=1, lineno=50)
          62	GET_ITER(arg=None, lineno=50)
>         64	FOR_ITER(arg=138, lineno=50)
          66	STORE_FAST(arg=6, lineno=50)
          68	LOAD_GLOBAL(arg=4, lineno=51)
          70	LOAD_FAST(arg=4, lineno=51)
          72	CALL_FUNCTION(arg=1, lineno=51)
          74	GET_ITER(arg=None, lineno=51)
>         76	FOR_ITER(arg=124, lineno=51)
          78	STORE_FAST(arg=7, lineno=51)
          80	LOAD_GLOBAL(arg=1, lineno=52)
          82	LOAD_METHOD(arg=5, lineno=52)
          84	LOAD_FAST(arg=2, lineno=52)
          86	LOAD_FAST(arg=6, lineno=52)
          88	LOAD_FAST(arg=7, lineno=52)
          90	BUILD_TUPLE(arg=2, lineno=52)
          92	BINARY_SUBSCR(arg=None, lineno=52)
          94	CALL_METHOD(arg=1, lineno=52)
          96	POP_JUMP_IF_FALSE(arg=76, lineno=52)
          98	LOAD_GLOBAL(arg=6, lineno=53)
         100	LOAD_FAST(arg=0, lineno=53)
         102	LOAD_FAST(arg=6, lineno=53)
         104	BINARY_SUBSCR(arg=None, lineno=53)
         106	LOAD_FAST(arg=1, lineno=53)
         108	LOAD_FAST(arg=7, lineno=53)
         110	BINARY_SUBSCR(arg=None, lineno=53)
         112	CALL_FUNCTION(arg=2, lineno=53)
         114	LOAD_FAST(arg=5, lineno=53)
         116	LOAD_FAST(arg=6, lineno=53)
         118	LOAD_CONST(arg=2, lineno=53)
         120	BINARY_ADD(arg=None, lineno=53)
         122	LOAD_FAST(arg=7, lineno=53)
         124	LOAD_CONST(arg=2, lineno=53)
         126	BINARY_ADD(arg=None, lineno=53)
         128	BUILD_TUPLE(arg=2, lineno=53)
         130	STORE_SUBSCR(arg=None, lineno=53)
         132	LOAD_FAST(arg=5, lineno=54)
         134	LOAD_FAST(arg=6, lineno=54)
         136	LOAD_CONST(arg=2, lineno=54)
         138	BINARY_ADD(arg=None, lineno=54)
         140	LOAD_FAST(arg=7, lineno=54)
         142	LOAD_CONST(arg=2, lineno=54)
         144	BINARY_ADD(arg=None, lineno=54)
         146	BUILD_TUPLE(arg=2, lineno=54)
         148	DUP_TOP_TWO(arg=None, lineno=54)
         150	BINARY_SUBSCR(arg=None, lineno=54)
         152	LOAD_GLOBAL(arg=7, lineno=54)
         154	LOAD_FAST(arg=5, lineno=54)
         156	LOAD_FAST(arg=6, lineno=54)
         158	LOAD_FAST(arg=7, lineno=54)
         160	LOAD_CONST(arg=2, lineno=54)
         162	BINARY_ADD(arg=None, lineno=54)
         164	BUILD_TUPLE(arg=2, lineno=54)
         166	BINARY_SUBSCR(arg=None, lineno=54)
         168	LOAD_FAST(arg=5, lineno=55)
         170	LOAD_FAST(arg=6, lineno=55)
         172	LOAD_CONST(arg=2, lineno=55)
         174	BINARY_ADD(arg=None, lineno=55)
         176	LOAD_FAST(arg=7, lineno=55)
         178	BUILD_TUPLE(arg=2, lineno=55)
         180	BINARY_SUBSCR(arg=None, lineno=55)
         182	LOAD_FAST(arg=5, lineno=56)
         184	LOAD_FAST(arg=6, lineno=56)
         186	LOAD_FAST(arg=7, lineno=56)
         188	BUILD_TUPLE(arg=2, lineno=56)
         190	BINARY_SUBSCR(arg=None, lineno=56)
         192	CALL_FUNCTION(arg=3, lineno=54)
         194	INPLACE_ADD(arg=None, lineno=54)
         196	ROT_THREE(arg=None, lineno=54)
         198	STORE_SUBSCR(arg=None, lineno=54)
         200	JUMP_ABSOLUTE(arg=76, lineno=54)
>        202	JUMP_ABSOLUTE(arg=64, lineno=54)
>        204	LOAD_FAST(arg=5, lineno=57)
         206	LOAD_CONST(arg=2, lineno=57)
         208	LOAD_CONST(arg=5, lineno=57)
         210	BUILD_SLICE(arg=2, lineno=57)
         212	LOAD_CONST(arg=2, lineno=57)
         214	LOAD_CONST(arg=5, lineno=57)
         216	BUILD_SLICE(arg=2, lineno=57)
         218	BUILD_TUPLE(arg=2, lineno=57)
         220	BINARY_SUBSCR(arg=None, lineno=57)
         222	RETURN_VALUE(arg=None, lineno=57)
2022-01-19 20:36:27,588 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=0 nstack_initial=0)])
2022-01-19 20:36:27,588 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:27,588 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=0, inst=NOP(arg=None, lineno=45)
2022-01-19 20:36:27,588 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,589 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=45)
2022-01-19 20:36:27,589 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,589 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=45)
2022-01-19 20:36:27,589 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$s12.0']
2022-01-19 20:36:27,589 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=45)
2022-01-19 20:36:27,590 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_attr.1']
2022-01-19 20:36:27,590 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=45)
2022-01-19 20:36:27,590 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_attr.1', '$const6.2']
2022-01-19 20:36:27,590 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=10, inst=STORE_FAST(arg=3, lineno=45)
2022-01-19 20:36:27,590 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$8binary_subscr.3']
2022-01-19 20:36:27,590 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=46)
2022-01-19 20:36:27,591 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,591 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=14, inst=LOAD_ATTR(arg=0, lineno=46)
2022-01-19 20:36:27,591 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$s212.4']
2022-01-19 20:36:27,591 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=46)
2022-01-19 20:36:27,591 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$14load_attr.5']
2022-01-19 20:36:27,591 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=46)
2022-01-19 20:36:27,592 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$14load_attr.5', '$const16.6']
2022-01-19 20:36:27,592 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=20, inst=STORE_FAST(arg=4, lineno=46)
2022-01-19 20:36:27,592 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$18binary_subscr.7']
2022-01-19 20:36:27,592 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=22, inst=LOAD_GLOBAL(arg=1, lineno=47)
2022-01-19 20:36:27,592 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,592 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=47)
2022-01-19 20:36:27,593 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$22load_global.8']
2022-01-19 20:36:27,593 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=47)
2022-01-19 20:36:27,593 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9']
2022-01-19 20:36:27,593 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=28, inst=LOAD_CONST(arg=2, lineno=47)
2022-01-19 20:36:27,593 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$l126.10']
2022-01-19 20:36:27,593 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=30, inst=BINARY_ADD(arg=None, lineno=47)
2022-01-19 20:36:27,594 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$l126.10', '$const28.11']
2022-01-19 20:36:27,594 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=47)
2022-01-19 20:36:27,594 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$30binary_add.12']
2022-01-19 20:36:27,594 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=34, inst=LOAD_CONST(arg=2, lineno=47)
2022-01-19 20:36:27,594 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$30binary_add.12', '$l232.13']
2022-01-19 20:36:27,594 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=36, inst=BINARY_ADD(arg=None, lineno=47)
2022-01-19 20:36:27,594 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$30binary_add.12', '$l232.13', '$const34.14']
2022-01-19 20:36:27,595 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=38, inst=BUILD_TUPLE(arg=2, lineno=47)
2022-01-19 20:36:27,595 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$30binary_add.12', '$36binary_add.15']
2022-01-19 20:36:27,595 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=40, inst=LOAD_GLOBAL(arg=1, lineno=47)
2022-01-19 20:36:27,595 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$38build_tuple.16']
2022-01-19 20:36:27,595 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=42, inst=LOAD_ATTR(arg=3, lineno=47)
2022-01-19 20:36:27,595 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$38build_tuple.16', '$40load_global.17']
2022-01-19 20:36:27,596 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=44, inst=CALL_METHOD(arg=2, lineno=47)
2022-01-19 20:36:27,596 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24load_method.9', '$38build_tuple.16', '$42load_attr.18']
2022-01-19 20:36:27,596 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=46, inst=STORE_FAST(arg=5, lineno=47)
2022-01-19 20:36:27,596 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$44call_method.19']
2022-01-19 20:36:27,596 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=48, inst=LOAD_CONST(arg=3, lineno=48)
2022-01-19 20:36:27,596 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,596 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=50, inst=LOAD_FAST(arg=5, lineno=48)
2022-01-19 20:36:27,597 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$const48.20']
2022-01-19 20:36:27,597 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=52, inst=LOAD_CONST(arg=4, lineno=48)
2022-01-19 20:36:27,597 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$const48.20', '$cum_sum50.21']
2022-01-19 20:36:27,597 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=54, inst=STORE_SUBSCR(arg=None, lineno=48)
2022-01-19 20:36:27,597 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$const48.20', '$cum_sum50.21', '$const52.22']
2022-01-19 20:36:27,597 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=56, inst=LOAD_GLOBAL(arg=4, lineno=50)
2022-01-19 20:36:27,597 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,598 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=58, inst=LOAD_FAST(arg=3, lineno=50)
2022-01-19 20:36:27,598 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$56load_global.23']
2022-01-19 20:36:27,598 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=60, inst=CALL_FUNCTION(arg=1, lineno=50)
2022-01-19 20:36:27,598 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$56load_global.23', '$l158.24']
2022-01-19 20:36:27,598 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=62, inst=GET_ITER(arg=None, lineno=50)
2022-01-19 20:36:27,598 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$60call_function.25']
2022-01-19 20:36:27,599 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=64, stack=('$62get_iter.26',), blockstack=(), npush=0)]
2022-01-19 20:36:27,599 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=64 nstack_initial=1)])
2022-01-19 20:36:27,599 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi64.0']
2022-01-19 20:36:27,599 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=64, inst=FOR_ITER(arg=138, lineno=50)
2022-01-19 20:36:27,599 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi64.0']
2022-01-19 20:36:27,600 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=204, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=('$phi64.0', '$64for_iter.2'), blockstack=(), npush=0)]
2022-01-19 20:36:27,600 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=204 nstack_initial=0), State(pc_initial=66 nstack_initial=2)])
2022-01-19 20:36:27,600 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:27,600 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=204, inst=LOAD_FAST(arg=5, lineno=57)
2022-01-19 20:36:27,600 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,601 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=206, inst=LOAD_CONST(arg=2, lineno=57)
2022-01-19 20:36:27,601 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0']
2022-01-19 20:36:27,601 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=208, inst=LOAD_CONST(arg=5, lineno=57)
2022-01-19 20:36:27,601 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0', '$const206.1']
2022-01-19 20:36:27,601 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=210, inst=BUILD_SLICE(arg=2, lineno=57)
2022-01-19 20:36:27,601 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0', '$const206.1', '$const208.2']
2022-01-19 20:36:27,601 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=212, inst=LOAD_CONST(arg=2, lineno=57)
2022-01-19 20:36:27,602 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0', '$210build_slice.4']
2022-01-19 20:36:27,602 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=214, inst=LOAD_CONST(arg=5, lineno=57)
2022-01-19 20:36:27,602 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0', '$210build_slice.4', '$const212.5']
2022-01-19 20:36:27,602 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=216, inst=BUILD_SLICE(arg=2, lineno=57)
2022-01-19 20:36:27,602 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0', '$210build_slice.4', '$const212.5', '$const214.6']
2022-01-19 20:36:27,602 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=218, inst=BUILD_TUPLE(arg=2, lineno=57)
2022-01-19 20:36:27,603 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0', '$210build_slice.4', '$216build_slice.8']
2022-01-19 20:36:27,603 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=57)
2022-01-19 20:36:27,603 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$cum_sum204.0', '$218build_tuple.9']
2022-01-19 20:36:27,603 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=222, inst=RETURN_VALUE(arg=None, lineno=57)
2022-01-19 20:36:27,603 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$220binary_subscr.10']
2022-01-19 20:36:27,603 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2022-01-19 20:36:27,604 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=66 nstack_initial=2)])
2022-01-19 20:36:27,604 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi66.0', '$phi66.1']
2022-01-19 20:36:27,604 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=66, inst=STORE_FAST(arg=6, lineno=50)
2022-01-19 20:36:27,604 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi66.0', '$phi66.1']
2022-01-19 20:36:27,604 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=68, inst=LOAD_GLOBAL(arg=4, lineno=51)
2022-01-19 20:36:27,604 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi66.0']
2022-01-19 20:36:27,605 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=70, inst=LOAD_FAST(arg=4, lineno=51)
2022-01-19 20:36:27,605 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi66.0', '$68load_global.2']
2022-01-19 20:36:27,605 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=51)
2022-01-19 20:36:27,605 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi66.0', '$68load_global.2', '$l270.3']
2022-01-19 20:36:27,605 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=74, inst=GET_ITER(arg=None, lineno=51)
2022-01-19 20:36:27,605 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi66.0', '$72call_function.4']
2022-01-19 20:36:27,606 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=76, stack=('$phi66.0', '$74get_iter.5'), blockstack=(), npush=0)]
2022-01-19 20:36:27,606 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=76 nstack_initial=2)])
2022-01-19 20:36:27,606 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi76.0', '$phi76.1']
2022-01-19 20:36:27,606 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=76, inst=FOR_ITER(arg=124, lineno=51)
2022-01-19 20:36:27,606 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi76.0', '$phi76.1']
2022-01-19 20:36:27,606 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=202, stack=('$phi76.0',), blockstack=(), npush=0), Edge(pc=78, stack=('$phi76.0', '$phi76.1', '$76for_iter.3'), blockstack=(), npush=0)]
2022-01-19 20:36:27,606 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=202 nstack_initial=1), State(pc_initial=78 nstack_initial=3)])
2022-01-19 20:36:27,607 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi202.0']
2022-01-19 20:36:27,607 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=202, inst=JUMP_ABSOLUTE(arg=64, lineno=54)
2022-01-19 20:36:27,607 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi202.0']
2022-01-19 20:36:27,607 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=64, stack=('$phi202.0',), blockstack=(), npush=0)]
2022-01-19 20:36:27,607 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=78 nstack_initial=3), State(pc_initial=64 nstack_initial=1)])
2022-01-19 20:36:27,607 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi78.0', '$phi78.1', '$phi78.2']
2022-01-19 20:36:27,608 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=78, inst=STORE_FAST(arg=7, lineno=51)
2022-01-19 20:36:27,608 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$phi78.2']
2022-01-19 20:36:27,608 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=80, inst=LOAD_GLOBAL(arg=1, lineno=52)
2022-01-19 20:36:27,608 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1']
2022-01-19 20:36:27,608 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=82, inst=LOAD_METHOD(arg=5, lineno=52)
2022-01-19 20:36:27,608 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$80load_global.3']
2022-01-19 20:36:27,609 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=84, inst=LOAD_FAST(arg=2, lineno=52)
2022-01-19 20:36:27,609 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$82load_method.4']
2022-01-19 20:36:27,609 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=86, inst=LOAD_FAST(arg=6, lineno=52)
2022-01-19 20:36:27,609 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$82load_method.4', '$mask84.5']
2022-01-19 20:36:27,609 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=88, inst=LOAD_FAST(arg=7, lineno=52)
2022-01-19 20:36:27,609 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$82load_method.4', '$mask84.5', '$i86.6']
2022-01-19 20:36:27,609 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=90, inst=BUILD_TUPLE(arg=2, lineno=52)
2022-01-19 20:36:27,610 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$82load_method.4', '$mask84.5', '$i86.6', '$j88.7']
2022-01-19 20:36:27,610 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=92, inst=BINARY_SUBSCR(arg=None, lineno=52)
2022-01-19 20:36:27,610 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$82load_method.4', '$mask84.5', '$90build_tuple.8']
2022-01-19 20:36:27,610 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=94, inst=CALL_METHOD(arg=1, lineno=52)
2022-01-19 20:36:27,610 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$82load_method.4', '$92binary_subscr.9']
2022-01-19 20:36:27,610 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=76, lineno=52)
2022-01-19 20:36:27,610 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi78.0', '$phi78.1', '$94call_method.10']
2022-01-19 20:36:27,610 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=98, stack=('$phi78.0', '$phi78.1'), blockstack=(), npush=0), Edge(pc=76, stack=('$phi78.0', '$phi78.1'), blockstack=(), npush=0)]
2022-01-19 20:36:27,611 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=98 nstack_initial=2), State(pc_initial=76 nstack_initial=2)])
2022-01-19 20:36:27,611 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=98 nstack_initial=2), State(pc_initial=76 nstack_initial=2)])
2022-01-19 20:36:27,611 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi98.0', '$phi98.1']
2022-01-19 20:36:27,611 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=98, inst=LOAD_GLOBAL(arg=6, lineno=53)
2022-01-19 20:36:27,611 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1']
2022-01-19 20:36:27,612 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=100, inst=LOAD_FAST(arg=0, lineno=53)
2022-01-19 20:36:27,612 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$98load_global.2']
2022-01-19 20:36:27,612 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=102, inst=LOAD_FAST(arg=6, lineno=53)
2022-01-19 20:36:27,612 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$98load_global.2', '$s1100.3']
2022-01-19 20:36:27,612 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=104, inst=BINARY_SUBSCR(arg=None, lineno=53)
2022-01-19 20:36:27,613 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$98load_global.2', '$s1100.3', '$i102.4']
2022-01-19 20:36:27,613 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=106, inst=LOAD_FAST(arg=1, lineno=53)
2022-01-19 20:36:27,613 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$98load_global.2', '$104binary_subscr.5']
2022-01-19 20:36:27,613 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=108, inst=LOAD_FAST(arg=7, lineno=53)
2022-01-19 20:36:27,613 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$98load_global.2', '$104binary_subscr.5', '$s2106.6']
2022-01-19 20:36:27,613 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=110, inst=BINARY_SUBSCR(arg=None, lineno=53)
2022-01-19 20:36:27,614 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$98load_global.2', '$104binary_subscr.5', '$s2106.6', '$j108.7']
2022-01-19 20:36:27,614 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=112, inst=CALL_FUNCTION(arg=2, lineno=53)
2022-01-19 20:36:27,614 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$98load_global.2', '$104binary_subscr.5', '$110binary_subscr.8']
2022-01-19 20:36:27,614 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=114, inst=LOAD_FAST(arg=5, lineno=53)
2022-01-19 20:36:27,614 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9']
2022-01-19 20:36:27,614 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=116, inst=LOAD_FAST(arg=6, lineno=53)
2022-01-19 20:36:27,615 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10']
2022-01-19 20:36:27,615 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=118, inst=LOAD_CONST(arg=2, lineno=53)
2022-01-19 20:36:27,615 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10', '$i116.11']
2022-01-19 20:36:27,615 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=120, inst=BINARY_ADD(arg=None, lineno=53)
2022-01-19 20:36:27,615 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10', '$i116.11', '$const118.12']
2022-01-19 20:36:27,615 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=122, inst=LOAD_FAST(arg=7, lineno=53)
2022-01-19 20:36:27,616 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10', '$120binary_add.13']
2022-01-19 20:36:27,616 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=124, inst=LOAD_CONST(arg=2, lineno=53)
2022-01-19 20:36:27,616 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10', '$120binary_add.13', '$j122.14']
2022-01-19 20:36:27,616 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=126, inst=BINARY_ADD(arg=None, lineno=53)
2022-01-19 20:36:27,616 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10', '$120binary_add.13', '$j122.14', '$const124.15']
2022-01-19 20:36:27,616 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=128, inst=BUILD_TUPLE(arg=2, lineno=53)
2022-01-19 20:36:27,616 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10', '$120binary_add.13', '$126binary_add.16']
2022-01-19 20:36:27,617 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=130, inst=STORE_SUBSCR(arg=None, lineno=53)
2022-01-19 20:36:27,617 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$112call_function.9', '$cum_sum114.10', '$128build_tuple.17']
2022-01-19 20:36:27,617 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=132, inst=LOAD_FAST(arg=5, lineno=54)
2022-01-19 20:36:27,617 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1']
2022-01-19 20:36:27,617 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=134, inst=LOAD_FAST(arg=6, lineno=54)
2022-01-19 20:36:27,617 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18']
2022-01-19 20:36:27,617 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=136, inst=LOAD_CONST(arg=2, lineno=54)
2022-01-19 20:36:27,617 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$i134.19']
2022-01-19 20:36:27,618 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=138, inst=BINARY_ADD(arg=None, lineno=54)
2022-01-19 20:36:27,618 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$i134.19', '$const136.20']
2022-01-19 20:36:27,618 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=140, inst=LOAD_FAST(arg=7, lineno=54)
2022-01-19 20:36:27,618 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$138binary_add.21']
2022-01-19 20:36:27,618 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=142, inst=LOAD_CONST(arg=2, lineno=54)
2022-01-19 20:36:27,618 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$138binary_add.21', '$j140.22']
2022-01-19 20:36:27,618 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=144, inst=BINARY_ADD(arg=None, lineno=54)
2022-01-19 20:36:27,618 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$138binary_add.21', '$j140.22', '$const142.23']
2022-01-19 20:36:27,619 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=146, inst=BUILD_TUPLE(arg=2, lineno=54)
2022-01-19 20:36:27,619 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$138binary_add.21', '$144binary_add.24']
2022-01-19 20:36:27,619 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=148, inst=DUP_TOP_TWO(arg=None, lineno=54)
2022-01-19 20:36:27,619 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25']
2022-01-19 20:36:27,619 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=150, inst=BINARY_SUBSCR(arg=None, lineno=54)
2022-01-19 20:36:27,619 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$148dup_top_two.26', '$148dup_top_two.27']
2022-01-19 20:36:27,619 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=152, inst=LOAD_GLOBAL(arg=7, lineno=54)
2022-01-19 20:36:27,619 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28']
2022-01-19 20:36:27,620 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=154, inst=LOAD_FAST(arg=5, lineno=54)
2022-01-19 20:36:27,620 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29']
2022-01-19 20:36:27,620 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=156, inst=LOAD_FAST(arg=6, lineno=54)
2022-01-19 20:36:27,620 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$cum_sum154.30']
2022-01-19 20:36:27,620 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=158, inst=LOAD_FAST(arg=7, lineno=54)
2022-01-19 20:36:27,620 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$cum_sum154.30', '$i156.31']
2022-01-19 20:36:27,620 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=160, inst=LOAD_CONST(arg=2, lineno=54)
2022-01-19 20:36:27,620 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$cum_sum154.30', '$i156.31', '$j158.32']
2022-01-19 20:36:27,621 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=162, inst=BINARY_ADD(arg=None, lineno=54)
2022-01-19 20:36:27,621 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$cum_sum154.30', '$i156.31', '$j158.32', '$const160.33']
2022-01-19 20:36:27,621 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=164, inst=BUILD_TUPLE(arg=2, lineno=54)
2022-01-19 20:36:27,621 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$cum_sum154.30', '$i156.31', '$162binary_add.34']
2022-01-19 20:36:27,621 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=166, inst=BINARY_SUBSCR(arg=None, lineno=54)
2022-01-19 20:36:27,621 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$cum_sum154.30', '$164build_tuple.35']
2022-01-19 20:36:27,621 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=168, inst=LOAD_FAST(arg=5, lineno=55)
2022-01-19 20:36:27,622 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36']
2022-01-19 20:36:27,622 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=170, inst=LOAD_FAST(arg=6, lineno=55)
2022-01-19 20:36:27,622 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$cum_sum168.37']
2022-01-19 20:36:27,622 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=172, inst=LOAD_CONST(arg=2, lineno=55)
2022-01-19 20:36:27,622 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$cum_sum168.37', '$i170.38']
2022-01-19 20:36:27,622 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=174, inst=BINARY_ADD(arg=None, lineno=55)
2022-01-19 20:36:27,622 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$cum_sum168.37', '$i170.38', '$const172.39']
2022-01-19 20:36:27,622 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=176, inst=LOAD_FAST(arg=7, lineno=55)
2022-01-19 20:36:27,622 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$cum_sum168.37', '$174binary_add.40']
2022-01-19 20:36:27,623 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=178, inst=BUILD_TUPLE(arg=2, lineno=55)
2022-01-19 20:36:27,623 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$cum_sum168.37', '$174binary_add.40', '$j176.41']
2022-01-19 20:36:27,623 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=180, inst=BINARY_SUBSCR(arg=None, lineno=55)
2022-01-19 20:36:27,623 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$cum_sum168.37', '$178build_tuple.42']
2022-01-19 20:36:27,624 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=182, inst=LOAD_FAST(arg=5, lineno=56)
2022-01-19 20:36:27,624 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$180binary_subscr.43']
2022-01-19 20:36:27,624 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=184, inst=LOAD_FAST(arg=6, lineno=56)
2022-01-19 20:36:27,624 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$180binary_subscr.43', '$cum_sum182.44']
2022-01-19 20:36:27,624 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=186, inst=LOAD_FAST(arg=7, lineno=56)
2022-01-19 20:36:27,624 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$180binary_subscr.43', '$cum_sum182.44', '$i184.45']
2022-01-19 20:36:27,624 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=188, inst=BUILD_TUPLE(arg=2, lineno=56)
2022-01-19 20:36:27,624 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$180binary_subscr.43', '$cum_sum182.44', '$i184.45', '$j186.46']
2022-01-19 20:36:27,625 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=190, inst=BINARY_SUBSCR(arg=None, lineno=56)
2022-01-19 20:36:27,625 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$180binary_subscr.43', '$cum_sum182.44', '$188build_tuple.47']
2022-01-19 20:36:27,625 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=192, inst=CALL_FUNCTION(arg=3, lineno=54)
2022-01-19 20:36:27,625 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$152load_global.29', '$166binary_subscr.36', '$180binary_subscr.43', '$190binary_subscr.48']
2022-01-19 20:36:27,625 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=194, inst=INPLACE_ADD(arg=None, lineno=54)
2022-01-19 20:36:27,625 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$150binary_subscr.28', '$192call_function.49']
2022-01-19 20:36:27,625 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=196, inst=ROT_THREE(arg=None, lineno=54)
2022-01-19 20:36:27,625 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$cum_sum132.18', '$146build_tuple.25', '$194inplace_add.50']
2022-01-19 20:36:27,626 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=198, inst=STORE_SUBSCR(arg=None, lineno=54)
2022-01-19 20:36:27,626 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1', '$194inplace_add.50', '$cum_sum132.18', '$146build_tuple.25']
2022-01-19 20:36:27,626 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=200, inst=JUMP_ABSOLUTE(arg=76, lineno=54)
2022-01-19 20:36:27,626 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$phi98.1']
2022-01-19 20:36:27,626 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=76, stack=('$phi98.0', '$phi98.1'), blockstack=(), npush=0)]
2022-01-19 20:36:27,626 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=76 nstack_initial=2), State(pc_initial=76 nstack_initial=2)])
2022-01-19 20:36:27,626 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=76 nstack_initial=2)])
2022-01-19 20:36:27,626 [2544] DEBUG    numba.core.byteflow:163: [JupyterRequire] -------------------------Prune PHIs-------------------------
2022-01-19 20:36:27,627 [2544] DEBUG    numba.core.byteflow:232: [JupyterRequire] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=1): {'$phi64.0'},
             State(pc_initial=66 nstack_initial=2): {'$phi66.1'},
             State(pc_initial=76 nstack_initial=2): {'$phi76.1'},
             State(pc_initial=78 nstack_initial=3): {'$phi78.2'},
             State(pc_initial=98 nstack_initial=2): set(),
             State(pc_initial=202 nstack_initial=1): set(),
             State(pc_initial=204 nstack_initial=0): set()})
2022-01-19 20:36:27,627 [2544] DEBUG    numba.core.byteflow:189: [JupyterRequire] defmap: {'$phi64.0': State(pc_initial=0 nstack_initial=0),
 '$phi66.1': State(pc_initial=64 nstack_initial=1),
 '$phi76.1': State(pc_initial=66 nstack_initial=2),
 '$phi78.2': State(pc_initial=76 nstack_initial=2)}
2022-01-19 20:36:27,627 [2544] DEBUG    numba.core.byteflow:190: [JupyterRequire] phismap: defaultdict(<class 'set'>,
            {'$phi202.0': {('$phi76.0', State(pc_initial=76 nstack_initial=2))},
             '$phi64.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi202.0',
                           State(pc_initial=202 nstack_initial=1))},
             '$phi66.0': {('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi76.0': {('$phi66.0', State(pc_initial=66 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=3)),
                          ('$phi98.0', State(pc_initial=98 nstack_initial=2))},
             '$phi76.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2)),
                          ('$phi78.1', State(pc_initial=78 nstack_initial=3)),
                          ('$phi98.1', State(pc_initial=98 nstack_initial=2))},
             '$phi78.0': {('$phi76.0', State(pc_initial=76 nstack_initial=2))},
             '$phi78.1': {('$phi76.1', State(pc_initial=76 nstack_initial=2))},
             '$phi78.2': {('$76for_iter.3',
                           State(pc_initial=76 nstack_initial=2))},
             '$phi98.0': {('$phi78.0', State(pc_initial=78 nstack_initial=3))},
             '$phi98.1': {('$phi78.1', State(pc_initial=78 nstack_initial=3))}})
2022-01-19 20:36:27,628 [2544] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi202.0': {('$phi66.0', State(pc_initial=66 nstack_initial=2)),
                           ('$phi78.0', State(pc_initial=78 nstack_initial=3)),
                           ('$phi98.0', State(pc_initial=98 nstack_initial=2))},
             '$phi64.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=3)),
                          ('$phi98.0', State(pc_initial=98 nstack_initial=2))},
             '$phi66.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=2)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=3)),
                          ('$phi98.0', State(pc_initial=98 nstack_initial=2))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi76.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi76.0', State(pc_initial=76 nstack_initial=2))},
             '$phi76.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2)),
                          ('$phi76.1', State(pc_initial=76 nstack_initial=2))},
             '$phi78.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))},
             '$phi78.2': {('$76for_iter.3',
                           State(pc_initial=76 nstack_initial=2))},
             '$phi98.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi98.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))}})
2022-01-19 20:36:27,628 [2544] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi202.0': {('$62get_iter.26',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi64.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi66.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi76.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi76.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))},
             '$phi78.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))},
             '$phi78.2': {('$76for_iter.3',
                           State(pc_initial=76 nstack_initial=2))},
             '$phi98.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi98.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))}})
2022-01-19 20:36:27,628 [2544] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi202.0': {('$62get_iter.26',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi64.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi66.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi76.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi76.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))},
             '$phi78.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi78.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))},
             '$phi78.2': {('$76for_iter.3',
                           State(pc_initial=76 nstack_initial=2))},
             '$phi98.0': {('$62get_iter.26',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi98.1': {('$74get_iter.5',
                           State(pc_initial=66 nstack_initial=2))}})
2022-01-19 20:36:27,629 [2544] DEBUG    numba.core.byteflow:220: [JupyterRequire] keep phismap: {'$phi64.0': {('$62get_iter.26', State(pc_initial=0 nstack_initial=0))},
 '$phi66.1': {('$64for_iter.2', State(pc_initial=64 nstack_initial=1))},
 '$phi76.1': {('$74get_iter.5', State(pc_initial=66 nstack_initial=2))},
 '$phi78.2': {('$76for_iter.3', State(pc_initial=76 nstack_initial=2))}}
2022-01-19 20:36:27,629 [2544] DEBUG    numba.core.byteflow:226: [JupyterRequire] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi64.0': '$62get_iter.26'},
             State(pc_initial=64 nstack_initial=1): {'$phi66.1': '$64for_iter.2'},
             State(pc_initial=66 nstack_initial=2): {'$phi76.1': '$74get_iter.5'},
             State(pc_initial=76 nstack_initial=2): {'$phi78.2': '$76for_iter.3'}})
2022-01-19 20:36:27,629 [2544] DEBUG    numba.core.byteflow:236: [JupyterRequire] ----------------------DONE Prune PHIs-----------------------
2022-01-19 20:36:27,630 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$s12.0'}), (4, {'item': '$s12.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$4load_attr.1', 'res': '$8binary_subscr.3'}), (10, {'value': '$8binary_subscr.3'}), (12, {'res': '$s212.4'}), (14, {'item': '$s212.4', 'res': '$14load_attr.5'}), (16, {'res': '$const16.6'}), (18, {'index': '$const16.6', 'target': '$14load_attr.5', 'res': '$18binary_subscr.7'}), (20, {'value': '$18binary_subscr.7'}), (22, {'res': '$22load_global.8'}), (24, {'item': '$22load_global.8', 'res': '$24load_method.9'}), (26, {'res': '$l126.10'}), (28, {'res': '$const28.11'}), (30, {'lhs': '$l126.10', 'rhs': '$const28.11', 'res': '$30binary_add.12'}), (32, {'res': '$l232.13'}), (34, {'res': '$const34.14'}), (36, {'lhs': '$l232.13', 'rhs': '$const34.14', 'res': '$36binary_add.15'}), (38, {'items': ['$30binary_add.12', '$36binary_add.15'], 'res': '$38build_tuple.16'}), (40, {'res': '$40load_global.17'}), (42, {'item': '$40load_global.17', 'res': '$42load_attr.18'}), (44, {'func': '$24load_method.9', 'args': ['$38build_tuple.16', '$42load_attr.18'], 'res': '$44call_method.19'}), (46, {'value': '$44call_method.19'}), (48, {'res': '$const48.20'}), (50, {'res': '$cum_sum50.21'}), (52, {'res': '$const52.22'}), (54, {'target': '$cum_sum50.21', 'index': '$const52.22', 'value': '$const48.20'}), (56, {'res': '$56load_global.23'}), (58, {'res': '$l158.24'}), (60, {'func': '$56load_global.23', 'args': ['$l158.24'], 'res': '$60call_function.25'}), (62, {'value': '$60call_function.25', 'res': '$62get_iter.26'})), outgoing_phis={'$phi64.0': '$62get_iter.26'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$62get_iter.26',)})
2022-01-19 20:36:27,630 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'iterator': '$phi64.0', 'pair': '$64for_iter.1', 'indval': '$64for_iter.2', 'pred': '$64for_iter.3'}),), outgoing_phis={'$phi66.1': '$64for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={204: (), 66: ('$phi64.0', '$64for_iter.2')})
2022-01-19 20:36:27,630 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=66 nstack_initial=2):
AdaptBlockInfo(insts=((66, {'value': '$phi66.1'}), (68, {'res': '$68load_global.2'}), (70, {'res': '$l270.3'}), (72, {'func': '$68load_global.2', 'args': ['$l270.3'], 'res': '$72call_function.4'}), (74, {'value': '$72call_function.4', 'res': '$74get_iter.5'})), outgoing_phis={'$phi76.1': '$74get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={76: ('$phi66.0', '$74get_iter.5')})
2022-01-19 20:36:27,630 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=76 nstack_initial=2):
AdaptBlockInfo(insts=((76, {'iterator': '$phi76.1', 'pair': '$76for_iter.2', 'indval': '$76for_iter.3', 'pred': '$76for_iter.4'}),), outgoing_phis={'$phi78.2': '$76for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: ('$phi76.0',), 78: ('$phi76.0', '$phi76.1', '$76for_iter.3')})
2022-01-19 20:36:27,630 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=78 nstack_initial=3):
AdaptBlockInfo(insts=((78, {'value': '$phi78.2'}), (80, {'res': '$80load_global.3'}), (82, {'item': '$80load_global.3', 'res': '$82load_method.4'}), (84, {'res': '$mask84.5'}), (86, {'res': '$i86.6'}), (88, {'res': '$j88.7'}), (90, {'items': ['$i86.6', '$j88.7'], 'res': '$90build_tuple.8'}), (92, {'index': '$90build_tuple.8', 'target': '$mask84.5', 'res': '$92binary_subscr.9'}), (94, {'func': '$82load_method.4', 'args': ['$92binary_subscr.9'], 'res': '$94call_method.10'}), (96, {'pred': '$94call_method.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi78.0', '$phi78.1'), 76: ('$phi78.0', '$phi78.1')})
2022-01-19 20:36:27,630 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=98 nstack_initial=2):
AdaptBlockInfo(insts=((98, {'res': '$98load_global.2'}), (100, {'res': '$s1100.3'}), (102, {'res': '$i102.4'}), (104, {'index': '$i102.4', 'target': '$s1100.3', 'res': '$104binary_subscr.5'}), (106, {'res': '$s2106.6'}), (108, {'res': '$j108.7'}), (110, {'index': '$j108.7', 'target': '$s2106.6', 'res': '$110binary_subscr.8'}), (112, {'func': '$98load_global.2', 'args': ['$104binary_subscr.5', '$110binary_subscr.8'], 'res': '$112call_function.9'}), (114, {'res': '$cum_sum114.10'}), (116, {'res': '$i116.11'}), (118, {'res': '$const118.12'}), (120, {'lhs': '$i116.11', 'rhs': '$const118.12', 'res': '$120binary_add.13'}), (122, {'res': '$j122.14'}), (124, {'res': '$const124.15'}), (126, {'lhs': '$j122.14', 'rhs': '$const124.15', 'res': '$126binary_add.16'}), (128, {'items': ['$120binary_add.13', '$126binary_add.16'], 'res': '$128build_tuple.17'}), (130, {'target': '$cum_sum114.10', 'index': '$128build_tuple.17', 'value': '$112call_function.9'}), (132, {'res': '$cum_sum132.18'}), (134, {'res': '$i134.19'}), (136, {'res': '$const136.20'}), (138, {'lhs': '$i134.19', 'rhs': '$const136.20', 'res': '$138binary_add.21'}), (140, {'res': '$j140.22'}), (142, {'res': '$const142.23'}), (144, {'lhs': '$j140.22', 'rhs': '$const142.23', 'res': '$144binary_add.24'}), (146, {'items': ['$138binary_add.21', '$144binary_add.24'], 'res': '$146build_tuple.25'}), (148, {'orig': ['$cum_sum132.18', '$146build_tuple.25'], 'duped': ['$148dup_top_two.26', '$148dup_top_two.27']}), (150, {'index': '$148dup_top_two.27', 'target': '$148dup_top_two.26', 'res': '$150binary_subscr.28'}), (152, {'res': '$152load_global.29'}), (154, {'res': '$cum_sum154.30'}), (156, {'res': '$i156.31'}), (158, {'res': '$j158.32'}), (160, {'res': '$const160.33'}), (162, {'lhs': '$j158.32', 'rhs': '$const160.33', 'res': '$162binary_add.34'}), (164, {'items': ['$i156.31', '$162binary_add.34'], 'res': '$164build_tuple.35'}), (166, {'index': '$164build_tuple.35', 'target': '$cum_sum154.30', 'res': '$166binary_subscr.36'}), (168, {'res': '$cum_sum168.37'}), (170, {'res': '$i170.38'}), (172, {'res': '$const172.39'}), (174, {'lhs': '$i170.38', 'rhs': '$const172.39', 'res': '$174binary_add.40'}), (176, {'res': '$j176.41'}), (178, {'items': ['$174binary_add.40', '$j176.41'], 'res': '$178build_tuple.42'}), (180, {'index': '$178build_tuple.42', 'target': '$cum_sum168.37', 'res': '$180binary_subscr.43'}), (182, {'res': '$cum_sum182.44'}), (184, {'res': '$i184.45'}), (186, {'res': '$j186.46'}), (188, {'items': ['$i184.45', '$j186.46'], 'res': '$188build_tuple.47'}), (190, {'index': '$188build_tuple.47', 'target': '$cum_sum182.44', 'res': '$190binary_subscr.48'}), (192, {'func': '$152load_global.29', 'args': ['$166binary_subscr.36', '$180binary_subscr.43', '$190binary_subscr.48'], 'res': '$192call_function.49'}), (194, {'lhs': '$150binary_subscr.28', 'rhs': '$192call_function.49', 'res': '$194inplace_add.50'}), (198, {'target': '$cum_sum132.18', 'index': '$146build_tuple.25', 'value': '$194inplace_add.50'}), (200, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={76: ('$phi98.0', '$phi98.1')})
2022-01-19 20:36:27,631 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=202 nstack_initial=1):
AdaptBlockInfo(insts=((202, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$phi202.0',)})
2022-01-19 20:36:27,631 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=204 nstack_initial=0):
AdaptBlockInfo(insts=((204, {'res': '$cum_sum204.0'}), (206, {'res': '$const206.1'}), (208, {'res': '$const208.2'}), (210, {'start': '$const206.1', 'stop': '$const208.2', 'step': None, 'res': '$210build_slice.4', 'slicevar': '$210build_slice.3'}), (212, {'res': '$const212.5'}), (214, {'res': '$const214.6'}), (216, {'start': '$const212.5', 'stop': '$const214.6', 'step': None, 'res': '$216build_slice.8', 'slicevar': '$216build_slice.7'}), (218, {'items': ['$210build_slice.4', '$216build_slice.8'], 'res': '$218build_tuple.9'}), (220, {'index': '$218build_tuple.9', 'target': '$cum_sum204.0', 'res': '$220binary_subscr.10'}), (222, {'retval': '$220binary_subscr.10', 'castval': '$222return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2022-01-19 20:36:27,634 [2544] DEBUG    numba.core.interpreter:149: [JupyterRequire] label 0:
    s1 = arg(0, name=s1)                     ['s1']
    s2 = arg(1, name=s2)                     ['s2']
    mask = arg(2, name=mask)                 ['mask']
    $4load_attr.1 = getattr(value=s1, attr=shape) ['$4load_attr.1', 's1']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8binary_subscr.3 = getitem(value=$4load_attr.1, index=$const6.2) ['$4load_attr.1', '$8binary_subscr.3', '$const6.2']
    l1 = $8binary_subscr.3                   ['$8binary_subscr.3', 'l1']
    $14load_attr.5 = getattr(value=s2, attr=shape) ['$14load_attr.5', 's2']
    $const16.6 = const(int, 0)               ['$const16.6']
    $18binary_subscr.7 = getitem(value=$14load_attr.5, index=$const16.6) ['$14load_attr.5', '$18binary_subscr.7', '$const16.6']
    l2 = $18binary_subscr.7                  ['$18binary_subscr.7', 'l2']
    $22load_global.8 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$22load_global.8']
    $24load_method.9 = getattr(value=$22load_global.8, attr=full) ['$22load_global.8', '$24load_method.9']
    $const28.11 = const(int, 1)              ['$const28.11']
    $30binary_add.12 = l1 + $const28.11      ['$30binary_add.12', '$const28.11', 'l1']
    $const34.14 = const(int, 1)              ['$const34.14']
    $36binary_add.15 = l2 + $const34.14      ['$36binary_add.15', '$const34.14', 'l2']
    $38build_tuple.16 = build_tuple(items=[Var($30binary_add.12, dtw_variants.py:47), Var($36binary_add.15, dtw_variants.py:47)]) ['$30binary_add.12', '$36binary_add.15', '$38build_tuple.16']
    $40load_global.17 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$40load_global.17']
    $42load_attr.18 = getattr(value=$40load_global.17, attr=inf) ['$40load_global.17', '$42load_attr.18']
    $44call_method.19 = call $24load_method.9($38build_tuple.16, $42load_attr.18, func=$24load_method.9, args=[Var($38build_tuple.16, dtw_variants.py:47), Var($42load_attr.18, dtw_variants.py:47)], kws=(), vararg=None) ['$24load_method.9', '$38build_tuple.16', '$42load_attr.18', '$44call_method.19']
    cum_sum = $44call_method.19              ['$44call_method.19', 'cum_sum']
    $const48.20 = const(float, 0.0)          ['$const48.20']
    $const_0 = const(int, 0)                 ['$const_0']
    $const_0.1 = const(int, 0)               ['$const_0.1']
    $const52.22 = build_tuple(items=[Var($const_0, dtw_variants.py:48), Var($const_0.1, dtw_variants.py:48)]) ['$const52.22', '$const_0', '$const_0.1']
    cum_sum[$const52.22] = $const48.20       ['$const48.20', '$const52.22', 'cum_sum']
    $56load_global.23 = global(range: <class 'range'>) ['$56load_global.23']
    $60call_function.25 = call $56load_global.23(l1, func=$56load_global.23, args=[Var(l1, dtw_variants.py:45)], kws=(), vararg=None) ['$56load_global.23', '$60call_function.25', 'l1']
    $62get_iter.26 = getiter(value=$60call_function.25) ['$60call_function.25', '$62get_iter.26']
    $phi64.0 = $62get_iter.26                ['$62get_iter.26', '$phi64.0']
    jump 64                                  []
label 64:
    $64for_iter.1 = iternext(value=$phi64.0) ['$64for_iter.1', '$phi64.0']
    $64for_iter.2 = pair_first(value=$64for_iter.1) ['$64for_iter.1', '$64for_iter.2']
    $64for_iter.3 = pair_second(value=$64for_iter.1) ['$64for_iter.1', '$64for_iter.3']
    $phi66.1 = $64for_iter.2                 ['$64for_iter.2', '$phi66.1']
    branch $64for_iter.3, 66, 204            ['$64for_iter.3']
label 66:
    i = $phi66.1                             ['$phi66.1', 'i']
    $68load_global.2 = global(range: <class 'range'>) ['$68load_global.2']
    $72call_function.4 = call $68load_global.2(l2, func=$68load_global.2, args=[Var(l2, dtw_variants.py:46)], kws=(), vararg=None) ['$68load_global.2', '$72call_function.4', 'l2']
    $74get_iter.5 = getiter(value=$72call_function.4) ['$72call_function.4', '$74get_iter.5']
    $phi76.1 = $74get_iter.5                 ['$74get_iter.5', '$phi76.1']
    jump 76                                  []
label 76:
    $76for_iter.2 = iternext(value=$phi76.1) ['$76for_iter.2', '$phi76.1']
    $76for_iter.3 = pair_first(value=$76for_iter.2) ['$76for_iter.2', '$76for_iter.3']
    $76for_iter.4 = pair_second(value=$76for_iter.2) ['$76for_iter.2', '$76for_iter.4']
    $phi78.2 = $76for_iter.3                 ['$76for_iter.3', '$phi78.2']
    branch $76for_iter.4, 78, 202            ['$76for_iter.4']
label 78:
    j = $phi78.2                             ['$phi78.2', 'j']
    $80load_global.3 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$80load_global.3']
    $82load_method.4 = getattr(value=$80load_global.3, attr=isfinite) ['$80load_global.3', '$82load_method.4']
    $90build_tuple.8 = build_tuple(items=[Var(i, dtw_variants.py:50), Var(j, dtw_variants.py:51)]) ['$90build_tuple.8', 'i', 'j']
    $92binary_subscr.9 = getitem(value=mask, index=$90build_tuple.8) ['$90build_tuple.8', '$92binary_subscr.9', 'mask']
    $94call_method.10 = call $82load_method.4($92binary_subscr.9, func=$82load_method.4, args=[Var($92binary_subscr.9, dtw_variants.py:52)], kws=(), vararg=None) ['$82load_method.4', '$92binary_subscr.9', '$94call_method.10']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94call_method.10, func=bool96, args=(Var($94call_method.10, dtw_variants.py:52),), kws=(), vararg=None) ['$94call_method.10', '$96pred', 'bool96']
    branch $96pred, 98, 76                   ['$96pred']
label 98:
    $98load_global.2 = global(_local_squared_dist: CPUDispatcher(<function _local_squared_dist at 0x00000209C10B1B80>)) ['$98load_global.2']
    $104binary_subscr.5 = getitem(value=s1, index=i) ['$104binary_subscr.5', 'i', 's1']
    $110binary_subscr.8 = getitem(value=s2, index=j) ['$110binary_subscr.8', 'j', 's2']
    $112call_function.9 = call $98load_global.2($104binary_subscr.5, $110binary_subscr.8, func=$98load_global.2, args=[Var($104binary_subscr.5, dtw_variants.py:53), Var($110binary_subscr.8, dtw_variants.py:53)], kws=(), vararg=None) ['$104binary_subscr.5', '$110binary_subscr.8', '$112call_function.9', '$98load_global.2']
    $const118.12 = const(int, 1)             ['$const118.12']
    $120binary_add.13 = i + $const118.12     ['$120binary_add.13', '$const118.12', 'i']
    $const124.15 = const(int, 1)             ['$const124.15']
    $126binary_add.16 = j + $const124.15     ['$126binary_add.16', '$const124.15', 'j']
    $128build_tuple.17 = build_tuple(items=[Var($120binary_add.13, dtw_variants.py:53), Var($126binary_add.16, dtw_variants.py:53)]) ['$120binary_add.13', '$126binary_add.16', '$128build_tuple.17']
    cum_sum[$128build_tuple.17] = $112call_function.9 ['$112call_function.9', '$128build_tuple.17', 'cum_sum']
    $const136.20 = const(int, 1)             ['$const136.20']
    $138binary_add.21 = i + $const136.20     ['$138binary_add.21', '$const136.20', 'i']
    $const142.23 = const(int, 1)             ['$const142.23']
    $144binary_add.24 = j + $const142.23     ['$144binary_add.24', '$const142.23', 'j']
    $146build_tuple.25 = build_tuple(items=[Var($138binary_add.21, dtw_variants.py:54), Var($144binary_add.24, dtw_variants.py:54)]) ['$138binary_add.21', '$144binary_add.24', '$146build_tuple.25']
    $150binary_subscr.28 = getitem(value=cum_sum, index=$146build_tuple.25) ['$146build_tuple.25', '$150binary_subscr.28', 'cum_sum']
    $152load_global.29 = global(min: <built-in function min>) ['$152load_global.29']
    $const160.33 = const(int, 1)             ['$const160.33']
    $162binary_add.34 = j + $const160.33     ['$162binary_add.34', '$const160.33', 'j']
    $164build_tuple.35 = build_tuple(items=[Var(i, dtw_variants.py:50), Var($162binary_add.34, dtw_variants.py:54)]) ['$162binary_add.34', '$164build_tuple.35', 'i']
    $166binary_subscr.36 = getitem(value=cum_sum, index=$164build_tuple.35) ['$164build_tuple.35', '$166binary_subscr.36', 'cum_sum']
    $const172.39 = const(int, 1)             ['$const172.39']
    $174binary_add.40 = i + $const172.39     ['$174binary_add.40', '$const172.39', 'i']
    $178build_tuple.42 = build_tuple(items=[Var($174binary_add.40, dtw_variants.py:55), Var(j, dtw_variants.py:51)]) ['$174binary_add.40', '$178build_tuple.42', 'j']
    $180binary_subscr.43 = getitem(value=cum_sum, index=$178build_tuple.42) ['$178build_tuple.42', '$180binary_subscr.43', 'cum_sum']
    $188build_tuple.47 = build_tuple(items=[Var(i, dtw_variants.py:50), Var(j, dtw_variants.py:51)]) ['$188build_tuple.47', 'i', 'j']
    $190binary_subscr.48 = getitem(value=cum_sum, index=$188build_tuple.47) ['$188build_tuple.47', '$190binary_subscr.48', 'cum_sum']
    $192call_function.49 = call $152load_global.29($166binary_subscr.36, $180binary_subscr.43, $190binary_subscr.48, func=$152load_global.29, args=[Var($166binary_subscr.36, dtw_variants.py:54), Var($180binary_subscr.43, dtw_variants.py:55), Var($190binary_subscr.48, dtw_variants.py:56)], kws=(), vararg=None) ['$152load_global.29', '$166binary_subscr.36', '$180binary_subscr.43', '$190binary_subscr.48', '$192call_function.49']
    $194inplace_add.50 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.28, rhs=$192call_function.49, static_lhs=Undefined, static_rhs=Undefined) ['$150binary_subscr.28', '$192call_function.49', '$194inplace_add.50']
    cum_sum[$146build_tuple.25] = $194inplace_add.50 ['$146build_tuple.25', '$194inplace_add.50', 'cum_sum']
    jump 76                                  []
label 202:
    jump 64                                  []
label 204:
    $const206.1 = const(int, 1)              ['$const206.1']
    $const208.2 = const(NoneType, None)      ['$const208.2']
    $210build_slice.3 = global(slice: <class 'slice'>) ['$210build_slice.3']
    $210build_slice.4 = call $210build_slice.3($const206.1, $const208.2, func=$210build_slice.3, args=(Var($const206.1, dtw_variants.py:57), Var($const208.2, dtw_variants.py:57)), kws=(), vararg=None) ['$210build_slice.3', '$210build_slice.4', '$const206.1', '$const208.2']
    $const212.5 = const(int, 1)              ['$const212.5']
    $const214.6 = const(NoneType, None)      ['$const214.6']
    $216build_slice.7 = global(slice: <class 'slice'>) ['$216build_slice.7']
    $216build_slice.8 = call $216build_slice.7($const212.5, $const214.6, func=$216build_slice.7, args=(Var($const212.5, dtw_variants.py:57), Var($const214.6, dtw_variants.py:57)), kws=(), vararg=None) ['$216build_slice.7', '$216build_slice.8', '$const212.5', '$const214.6']
    $218build_tuple.9 = build_tuple(items=[Var($210build_slice.4, dtw_variants.py:57), Var($216build_slice.8, dtw_variants.py:57)]) ['$210build_slice.4', '$216build_slice.8', '$218build_tuple.9']
    $220binary_subscr.10 = getitem(value=cum_sum, index=$218build_tuple.9) ['$218build_tuple.9', '$220binary_subscr.10', 'cum_sum']
    $222return_value.11 = cast(value=$220binary_subscr.10) ['$220binary_subscr.10', '$222return_value.11']
    return $222return_value.11               ['$222return_value.11']

2022-01-19 20:36:27,662 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 0
2022-01-19 20:36:27,662 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA250>
2022-01-19 20:36:27,662 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: s1 = arg(0, name=s1)
2022-01-19 20:36:27,663 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: s2 = arg(1, name=s2)
2022-01-19 20:36:27,663 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: mask = arg(2, name=mask)
2022-01-19 20:36:27,663 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=s1, attr=shape)
2022-01-19 20:36:27,663 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2022-01-19 20:36:27,663 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8binary_subscr.3 = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2)
2022-01-19 20:36:27,663 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: l1 = $8binary_subscr.3
2022-01-19 20:36:27,663 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $14load_attr.5 = getattr(value=s2, attr=shape)
2022-01-19 20:36:27,664 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const16.6 = const(int, 0)
2022-01-19 20:36:27,664 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $18binary_subscr.7 = static_getitem(value=$14load_attr.5, index=0, index_var=$const16.6)
2022-01-19 20:36:27,664 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: l2 = $18binary_subscr.7
2022-01-19 20:36:27,664 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_global.8 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:27,664 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24load_method.9 = getattr(value=$22load_global.8, attr=full)
2022-01-19 20:36:27,664 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const28.11 = const(int, 1)
2022-01-19 20:36:27,664 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $30binary_add.12 = l1 + $const28.11
2022-01-19 20:36:27,664 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.14 = const(int, 1)
2022-01-19 20:36:27,664 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $36binary_add.15 = l2 + $const34.14
2022-01-19 20:36:27,665 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $38build_tuple.16 = build_tuple(items=[Var($30binary_add.12, dtw_variants.py:47), Var($36binary_add.15, dtw_variants.py:47)])
2022-01-19 20:36:27,665 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $40load_global.17 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:27,665 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $42load_attr.18 = getattr(value=$40load_global.17, attr=inf)
2022-01-19 20:36:27,665 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44call_method.19 = call $24load_method.9($38build_tuple.16, $42load_attr.18, func=$24load_method.9, args=[Var($38build_tuple.16, dtw_variants.py:47), Var($42load_attr.18, dtw_variants.py:47)], kws=(), vararg=None)
2022-01-19 20:36:27,665 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: cum_sum = $44call_method.19
2022-01-19 20:36:27,665 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const48.20 = const(float, 0.0)
2022-01-19 20:36:27,665 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const_0 = const(int, 0)
2022-01-19 20:36:27,665 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const_0.1 = const(int, 0)
2022-01-19 20:36:27,666 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const52.22 = build_tuple(items=[Var($const_0, dtw_variants.py:48), Var($const_0.1, dtw_variants.py:48)])
2022-01-19 20:36:27,666 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: cum_sum[(0, 0)] = $const48.20
2022-01-19 20:36:27,666 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56load_global.23 = global(range: <class 'range'>)
2022-01-19 20:36:27,666 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $60call_function.25 = call $56load_global.23(l1, func=$56load_global.23, args=[Var(l1, dtw_variants.py:45)], kws=(), vararg=None)
2022-01-19 20:36:27,666 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $62get_iter.26 = getiter(value=$60call_function.25)
2022-01-19 20:36:27,666 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi64.0 = $62get_iter.26
2022-01-19 20:36:27,666 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 64
2022-01-19 20:36:27,667 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 64
2022-01-19 20:36:27,667 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA250>
2022-01-19 20:36:27,667 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64for_iter.1 = iternext(value=$phi64.0)
2022-01-19 20:36:27,667 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64for_iter.2 = pair_first(value=$64for_iter.1)
2022-01-19 20:36:27,668 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64for_iter.3 = pair_second(value=$64for_iter.1)
2022-01-19 20:36:27,668 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi66.1 = $64for_iter.2
2022-01-19 20:36:27,668 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $64for_iter.3, 66, 204
2022-01-19 20:36:27,668 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 66
2022-01-19 20:36:27,668 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA250>
2022-01-19 20:36:27,668 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: i = $phi66.1
2022-01-19 20:36:27,668 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68load_global.2 = global(range: <class 'range'>)
2022-01-19 20:36:27,668 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72call_function.4 = call $68load_global.2(l2, func=$68load_global.2, args=[Var(l2, dtw_variants.py:46)], kws=(), vararg=None)
2022-01-19 20:36:27,669 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74get_iter.5 = getiter(value=$72call_function.4)
2022-01-19 20:36:27,669 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi76.1 = $74get_iter.5
2022-01-19 20:36:27,669 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 76
2022-01-19 20:36:27,669 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 76
2022-01-19 20:36:27,669 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA250>
2022-01-19 20:36:27,669 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $76for_iter.2 = iternext(value=$phi76.1)
2022-01-19 20:36:27,669 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $76for_iter.3 = pair_first(value=$76for_iter.2)
2022-01-19 20:36:27,669 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $76for_iter.4 = pair_second(value=$76for_iter.2)
2022-01-19 20:36:27,670 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi78.2 = $76for_iter.3
2022-01-19 20:36:27,670 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $76for_iter.4, 78, 202
2022-01-19 20:36:27,670 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 78
2022-01-19 20:36:27,670 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA250>
2022-01-19 20:36:27,670 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: j = $phi78.2
2022-01-19 20:36:27,670 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80load_global.3 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:27,670 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $82load_method.4 = getattr(value=$80load_global.3, attr=isfinite)
2022-01-19 20:36:27,670 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $90build_tuple.8 = build_tuple(items=[Var(i, dtw_variants.py:50), Var(j, dtw_variants.py:51)])
2022-01-19 20:36:27,670 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $92binary_subscr.9 = getitem(value=mask, index=$90build_tuple.8)
2022-01-19 20:36:27,671 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94call_method.10 = call $82load_method.4($92binary_subscr.9, func=$82load_method.4, args=[Var($92binary_subscr.9, dtw_variants.py:52)], kws=(), vararg=None)
2022-01-19 20:36:27,671 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2022-01-19 20:36:27,671 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94call_method.10, func=bool96, args=(Var($94call_method.10, dtw_variants.py:52),), kws=(), vararg=None)
2022-01-19 20:36:27,671 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 205
2022-01-19 20:36:27,671 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 98
2022-01-19 20:36:27,671 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA250>
2022-01-19 20:36:27,671 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $98load_global.2 = global(_local_squared_dist: CPUDispatcher(<function _local_squared_dist at 0x00000209C10B1B80>))
2022-01-19 20:36:27,671 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $104binary_subscr.5 = getitem(value=s1, index=i)
2022-01-19 20:36:27,672 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110binary_subscr.8 = getitem(value=s2, index=j)
2022-01-19 20:36:27,672 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $112call_function.9 = call $98load_global.2($104binary_subscr.5, $110binary_subscr.8, func=$98load_global.2, args=[Var($104binary_subscr.5, dtw_variants.py:53), Var($110binary_subscr.8, dtw_variants.py:53)], kws=(), vararg=None)
2022-01-19 20:36:27,672 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const118.12 = const(int, 1)
2022-01-19 20:36:27,672 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $120binary_add.13 = i + $const118.12
2022-01-19 20:36:27,672 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const124.15 = const(int, 1)
2022-01-19 20:36:27,672 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $126binary_add.16 = j + $const124.15
2022-01-19 20:36:27,672 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $128build_tuple.17 = build_tuple(items=[Var($120binary_add.13, dtw_variants.py:53), Var($126binary_add.16, dtw_variants.py:53)])
2022-01-19 20:36:27,672 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: cum_sum[$128build_tuple.17] = $112call_function.9
2022-01-19 20:36:27,673 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const136.20 = const(int, 1)
2022-01-19 20:36:27,673 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $138binary_add.21 = i + $const136.20
2022-01-19 20:36:27,673 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const142.23 = const(int, 1)
2022-01-19 20:36:27,673 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $144binary_add.24 = j + $const142.23
2022-01-19 20:36:27,673 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $146build_tuple.25 = build_tuple(items=[Var($138binary_add.21, dtw_variants.py:54), Var($144binary_add.24, dtw_variants.py:54)])
2022-01-19 20:36:27,673 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $150binary_subscr.28 = getitem(value=cum_sum, index=$146build_tuple.25)
2022-01-19 20:36:27,673 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $152load_global.29 = global(min: <built-in function min>)
2022-01-19 20:36:27,674 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const160.33 = const(int, 1)
2022-01-19 20:36:27,674 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $162binary_add.34 = j + $const160.33
2022-01-19 20:36:27,674 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $164build_tuple.35 = build_tuple(items=[Var(i, dtw_variants.py:50), Var($162binary_add.34, dtw_variants.py:54)])
2022-01-19 20:36:27,674 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $166binary_subscr.36 = getitem(value=cum_sum, index=$164build_tuple.35)
2022-01-19 20:36:27,674 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const172.39 = const(int, 1)
2022-01-19 20:36:27,674 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $174binary_add.40 = i + $const172.39
2022-01-19 20:36:27,674 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $178build_tuple.42 = build_tuple(items=[Var($174binary_add.40, dtw_variants.py:55), Var(j, dtw_variants.py:51)])
2022-01-19 20:36:27,674 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $180binary_subscr.43 = getitem(value=cum_sum, index=$178build_tuple.42)
2022-01-19 20:36:27,674 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $188build_tuple.47 = build_tuple(items=[Var(i, dtw_variants.py:50), Var(j, dtw_variants.py:51)])
2022-01-19 20:36:27,675 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $190binary_subscr.48 = getitem(value=cum_sum, index=$188build_tuple.47)
2022-01-19 20:36:27,675 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $192call_function.49 = call $152load_global.29($166binary_subscr.36, $180binary_subscr.43, $190binary_subscr.48, func=$152load_global.29, args=[Var($166binary_subscr.36, dtw_variants.py:54), Var($180binary_subscr.43, dtw_variants.py:55), Var($190binary_subscr.48, dtw_variants.py:56)], kws=(), vararg=None)
2022-01-19 20:36:27,675 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $194inplace_add.50 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$150binary_subscr.28, rhs=$192call_function.49, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:27,675 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: cum_sum[$146build_tuple.25] = $194inplace_add.50
2022-01-19 20:36:27,675 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 205
2022-01-19 20:36:27,675 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 202
2022-01-19 20:36:27,676 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA250>
2022-01-19 20:36:27,676 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 64
2022-01-19 20:36:27,676 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 204
2022-01-19 20:36:27,676 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA250>
2022-01-19 20:36:27,676 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const206.1 = const(int, 1)
2022-01-19 20:36:27,676 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const208.2 = const(NoneType, None)
2022-01-19 20:36:27,676 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $210build_slice.3 = global(slice: <class 'slice'>)
2022-01-19 20:36:27,677 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $210build_slice.4 = call $210build_slice.3($const206.1, $const208.2, func=$210build_slice.3, args=(Var($const206.1, dtw_variants.py:57), Var($const208.2, dtw_variants.py:57)), kws=(), vararg=None)
2022-01-19 20:36:27,677 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const212.5 = const(int, 1)
2022-01-19 20:36:27,677 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const214.6 = const(NoneType, None)
2022-01-19 20:36:27,677 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $216build_slice.7 = global(slice: <class 'slice'>)
2022-01-19 20:36:27,677 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $216build_slice.8 = call $216build_slice.7($const212.5, $const214.6, func=$216build_slice.7, args=(Var($const212.5, dtw_variants.py:57), Var($const214.6, dtw_variants.py:57)), kws=(), vararg=None)
2022-01-19 20:36:27,677 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $218build_tuple.9 = build_tuple(items=[Var($210build_slice.4, dtw_variants.py:57), Var($216build_slice.8, dtw_variants.py:57)])
2022-01-19 20:36:27,677 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $220binary_subscr.10 = static_getitem(value=cum_sum, index=(slice(1, None, None), slice(1, None, None)), index_var=$218build_tuple.9)
2022-01-19 20:36:27,678 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $222return_value.11 = cast(value=$220binary_subscr.10)
2022-01-19 20:36:27,678 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $222return_value.11
2022-01-19 20:36:27,678 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 205
2022-01-19 20:36:27,678 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA250>
2022-01-19 20:36:27,678 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 76
2022-01-19 20:36:27,679 [2544] DEBUG    numba.core.ssa:141: [JupyterRequire] defs defaultdict(<class 'list'>,
            {'$104binary_subscr.5': [<numba.core.ir.Assign object at 0x00000209C32CEA60>],
             '$110binary_subscr.8': [<numba.core.ir.Assign object at 0x00000209C32CEE20>],
             '$112call_function.9': [<numba.core.ir.Assign object at 0x00000209C32CEFD0>],
             '$120binary_add.13': [<numba.core.ir.Assign object at 0x00000209C32D0550>],
             '$126binary_add.16': [<numba.core.ir.Assign object at 0x00000209C32D0970>],
             '$128build_tuple.17': [<numba.core.ir.Assign object at 0x00000209C32D0B20>],
             '$138binary_add.21': [<numba.core.ir.Assign object at 0x00000209C32D3130>],
             '$144binary_add.24': [<numba.core.ir.Assign object at 0x00000209C32D3550>],
             '$146build_tuple.25': [<numba.core.ir.Assign object at 0x00000209C32D3700>],
             '$14load_attr.5': [<numba.core.ir.Assign object at 0x00000209C32C5EE0>],
             '$150binary_subscr.28': [<numba.core.ir.Assign object at 0x00000209C32D3A30>],
             '$152load_global.29': [<numba.core.ir.Assign object at 0x00000209C32D3BB0>],
             '$162binary_add.34': [<numba.core.ir.Assign object at 0x00000209C32D6250>],
             '$164build_tuple.35': [<numba.core.ir.Assign object at 0x00000209C32D6400>],
             '$166binary_subscr.36': [<numba.core.ir.Assign object at 0x00000209C32D6550>],
             '$174binary_add.40': [<numba.core.ir.Assign object at 0x00000209C32D6A90>],
             '$178build_tuple.42': [<numba.core.ir.Assign object at 0x00000209C32D6D60>],
             '$180binary_subscr.43': [<numba.core.ir.Assign object at 0x00000209C32D6EB0>],
             '$188build_tuple.47': [<numba.core.ir.Assign object at 0x00000209C32D8400>],
             '$18binary_subscr.7': [<numba.core.ir.Assign object at 0x00000209C32EC0D0>],
             '$190binary_subscr.48': [<numba.core.ir.Assign object at 0x00000209C32D8550>],
             '$192call_function.49': [<numba.core.ir.Assign object at 0x00000209C32D8700>],
             '$194inplace_add.50': [<numba.core.ir.Assign object at 0x00000209C32D8850>],
             '$210build_slice.3': [<numba.core.ir.Assign object at 0x00000209C32D8280>],
             '$210build_slice.4': [<numba.core.ir.Assign object at 0x00000209C32D8B20>],
             '$216build_slice.7': [<numba.core.ir.Assign object at 0x00000209C32D8FA0>],
             '$216build_slice.8': [<numba.core.ir.Assign object at 0x00000209C32DA100>],
             '$218build_tuple.9': [<numba.core.ir.Assign object at 0x00000209C32DA280>],
             '$220binary_subscr.10': [<numba.core.ir.Assign object at 0x00000209C32DA7C0>],
             '$222return_value.11': [<numba.core.ir.Assign object at 0x00000209C32DA550>],
             '$22load_global.8': [<numba.core.ir.Assign object at 0x00000209C32C84C0>],
             '$24load_method.9': [<numba.core.ir.Assign object at 0x00000209C32C8640>],
             '$30binary_add.12': [<numba.core.ir.Assign object at 0x00000209C32C8A60>],
             '$36binary_add.15': [<numba.core.ir.Assign object at 0x00000209C32C8E80>],
             '$38build_tuple.16': [<numba.core.ir.Assign object at 0x00000209C32C7070>],
             '$40load_global.17': [<numba.core.ir.Assign object at 0x00000209C32C71C0>],
             '$42load_attr.18': [<numba.core.ir.Assign object at 0x00000209C32C7340>],
             '$44call_method.19': [<numba.core.ir.Assign object at 0x00000209C32C74F0>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x00000209C32C5820>],
             '$56load_global.23': [<numba.core.ir.Assign object at 0x00000209C32C7E80>],
             '$60call_function.25': [<numba.core.ir.Assign object at 0x00000209C32CA190>],
             '$62get_iter.26': [<numba.core.ir.Assign object at 0x00000209C32CA2E0>],
             '$64for_iter.1': [<numba.core.ir.Assign object at 0x00000209C32CA460>],
             '$64for_iter.2': [<numba.core.ir.Assign object at 0x00000209C32CA580>],
             '$64for_iter.3': [<numba.core.ir.Assign object at 0x00000209C32CA6A0>],
             '$68load_global.2': [<numba.core.ir.Assign object at 0x00000209C32CAAC0>],
             '$72call_function.4': [<numba.core.ir.Assign object at 0x00000209C32CAD90>],
             '$74get_iter.5': [<numba.core.ir.Assign object at 0x00000209C32CAEE0>],
             '$76for_iter.2': [<numba.core.ir.Assign object at 0x00000209C32CC280>],
             '$76for_iter.3': [<numba.core.ir.Assign object at 0x00000209C32CC3A0>],
             '$76for_iter.4': [<numba.core.ir.Assign object at 0x00000209C32CC4C0>],
             '$80load_global.3': [<numba.core.ir.Assign object at 0x00000209C32CC8E0>],
             '$82load_method.4': [<numba.core.ir.Assign object at 0x00000209C32CCA60>],
             '$8binary_subscr.3': [<numba.core.ir.Assign object at 0x00000209C32EC160>],
             '$90build_tuple.8': [<numba.core.ir.Assign object at 0x00000209C32CCF70>],
             '$92binary_subscr.9': [<numba.core.ir.Assign object at 0x00000209C32CE100>],
             '$94call_method.10': [<numba.core.ir.Assign object at 0x00000209C32CE2B0>],
             '$96pred': [<numba.core.ir.Assign object at 0x00000209C32CE520>],
             '$98load_global.2': [<numba.core.ir.Assign object at 0x00000209C32CE6A0>],
             '$const118.12': [<numba.core.ir.Assign object at 0x00000209C32D03D0>],
             '$const124.15': [<numba.core.ir.Assign object at 0x00000209C32D07F0>],
             '$const136.20': [<numba.core.ir.Assign object at 0x00000209C32D0F70>],
             '$const142.23': [<numba.core.ir.Assign object at 0x00000209C32D33D0>],
             '$const16.6': [<numba.core.ir.Assign object at 0x00000209C32C80A0>],
             '$const160.33': [<numba.core.ir.Assign object at 0x00000209C32D60D0>],
             '$const172.39': [<numba.core.ir.Assign object at 0x00000209C32D6910>],
             '$const206.1': [<numba.core.ir.Assign object at 0x00000209C32D3E20>],
             '$const208.2': [<numba.core.ir.Assign object at 0x00000209C32D6BE0>],
             '$const212.5': [<numba.core.ir.Assign object at 0x00000209C32D8C70>],
             '$const214.6': [<numba.core.ir.Assign object at 0x00000209C32D8DF0>],
             '$const28.11': [<numba.core.ir.Assign object at 0x00000209C32C88E0>],
             '$const34.14': [<numba.core.ir.Assign object at 0x00000209C32C8D00>],
             '$const48.20': [<numba.core.ir.Assign object at 0x00000209C32C7760>],
             '$const52.22': [<numba.core.ir.Assign object at 0x00000209C32C7C40>],
             '$const6.2': [<numba.core.ir.Assign object at 0x00000209C32C59A0>],
             '$const_0': [<numba.core.ir.Assign object at 0x00000209C32C7A30>],
             '$const_0.1': [<numba.core.ir.Assign object at 0x00000209C32C7B50>],
             '$phi64.0': [<numba.core.ir.Assign object at 0x00000209C32C8B80>],
             '$phi66.1': [<numba.core.ir.Assign object at 0x00000209C32CA370>],
             '$phi76.1': [<numba.core.ir.Assign object at 0x00000209C32CAC10>],
             '$phi78.2': [<numba.core.ir.Assign object at 0x00000209C32CC190>],
             'bool96': [<numba.core.ir.Assign object at 0x00000209C32CE400>],
             'cum_sum': [<numba.core.ir.Assign object at 0x00000209C32C75E0>],
             'i': [<numba.core.ir.Assign object at 0x00000209C32CA940>],
             'j': [<numba.core.ir.Assign object at 0x00000209C32CC760>],
             'l1': [<numba.core.ir.Assign object at 0x00000209C32C5C40>],
             'l2': [<numba.core.ir.Assign object at 0x00000209C32C8340>],
             'mask': [<numba.core.ir.Assign object at 0x00000209C32C5580>],
             's1': [<numba.core.ir.Assign object at 0x00000209C32C5340>],
             's2': [<numba.core.ir.Assign object at 0x00000209C32C5460>]})
2022-01-19 20:36:27,679 [2544] DEBUG    numba.core.ssa:143: [JupyterRequire] SSA violators set()
2022-01-19 20:36:27,692 [2544] DEBUG    numba.core.byteflow:74: [JupyterRequire] bytecode dump:
>          0	NOP(arg=None, lineno=17)
           2	LOAD_CONST(arg=1, lineno=17)
           4	STORE_FAST(arg=2, lineno=17)
           6	LOAD_GLOBAL(arg=0, lineno=18)
           8	LOAD_FAST(arg=0, lineno=18)
          10	LOAD_ATTR(arg=1, lineno=18)
          12	LOAD_CONST(arg=2, lineno=18)
          14	BINARY_SUBSCR(arg=None, lineno=18)
          16	CALL_FUNCTION(arg=1, lineno=18)
          18	GET_ITER(arg=None, lineno=18)
>         20	FOR_ITER(arg=32, lineno=18)
          22	STORE_FAST(arg=3, lineno=18)
          24	LOAD_FAST(arg=0, lineno=19)
          26	LOAD_FAST(arg=3, lineno=19)
          28	BINARY_SUBSCR(arg=None, lineno=19)
          30	LOAD_FAST(arg=1, lineno=19)
          32	LOAD_FAST(arg=3, lineno=19)
          34	BINARY_SUBSCR(arg=None, lineno=19)
          36	BINARY_SUBTRACT(arg=None, lineno=19)
          38	STORE_FAST(arg=4, lineno=19)
          40	LOAD_FAST(arg=2, lineno=20)
          42	LOAD_FAST(arg=4, lineno=20)
          44	LOAD_FAST(arg=4, lineno=20)
          46	BINARY_MULTIPLY(arg=None, lineno=20)
          48	INPLACE_ADD(arg=None, lineno=20)
          50	STORE_FAST(arg=2, lineno=20)
          52	JUMP_ABSOLUTE(arg=20, lineno=20)
>         54	LOAD_FAST(arg=2, lineno=21)
          56	RETURN_VALUE(arg=None, lineno=21)
2022-01-19 20:36:27,692 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=0 nstack_initial=0)])
2022-01-19 20:36:27,692 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:27,693 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=0, inst=NOP(arg=None, lineno=17)
2022-01-19 20:36:27,693 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,693 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=17)
2022-01-19 20:36:27,693 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,693 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=4, inst=STORE_FAST(arg=2, lineno=17)
2022-01-19 20:36:27,693 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$const2.0']
2022-01-19 20:36:27,693 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=18)
2022-01-19 20:36:27,693 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,694 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=8, inst=LOAD_FAST(arg=0, lineno=18)
2022-01-19 20:36:27,694 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$6load_global.1']
2022-01-19 20:36:27,694 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=10, inst=LOAD_ATTR(arg=1, lineno=18)
2022-01-19 20:36:27,694 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$6load_global.1', '$x8.2']
2022-01-19 20:36:27,694 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=18)
2022-01-19 20:36:27,694 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$6load_global.1', '$10load_attr.3']
2022-01-19 20:36:27,694 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=14, inst=BINARY_SUBSCR(arg=None, lineno=18)
2022-01-19 20:36:27,694 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$6load_global.1', '$10load_attr.3', '$const12.4']
2022-01-19 20:36:27,695 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=18)
2022-01-19 20:36:27,695 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$6load_global.1', '$14binary_subscr.5']
2022-01-19 20:36:27,695 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=18, inst=GET_ITER(arg=None, lineno=18)
2022-01-19 20:36:27,695 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16call_function.6']
2022-01-19 20:36:27,695 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=20, stack=('$18get_iter.7',), blockstack=(), npush=0)]
2022-01-19 20:36:27,695 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=20 nstack_initial=1)])
2022-01-19 20:36:27,695 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi20.0']
2022-01-19 20:36:27,695 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=20, inst=FOR_ITER(arg=32, lineno=18)
2022-01-19 20:36:27,696 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi20.0']
2022-01-19 20:36:27,696 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=(), npush=0)]
2022-01-19 20:36:27,696 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
2022-01-19 20:36:27,696 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:27,696 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=21)
2022-01-19 20:36:27,696 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,696 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=21)
2022-01-19 20:36:27,696 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$dist54.0']
2022-01-19 20:36:27,697 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2022-01-19 20:36:27,697 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=22 nstack_initial=2)])
2022-01-19 20:36:27,697 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi22.0', '$phi22.1']
2022-01-19 20:36:27,697 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=22, inst=STORE_FAST(arg=3, lineno=18)
2022-01-19 20:36:27,697 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$phi22.1']
2022-01-19 20:36:27,697 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=19)
2022-01-19 20:36:27,697 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0']
2022-01-19 20:36:27,697 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=19)
2022-01-19 20:36:27,697 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$x24.2']
2022-01-19 20:36:27,698 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=28, inst=BINARY_SUBSCR(arg=None, lineno=19)
2022-01-19 20:36:27,698 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$x24.2', '$di26.3']
2022-01-19 20:36:27,698 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=19)
2022-01-19 20:36:27,698 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$28binary_subscr.4']
2022-01-19 20:36:27,698 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=32, inst=LOAD_FAST(arg=3, lineno=19)
2022-01-19 20:36:27,698 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$28binary_subscr.4', '$y30.5']
2022-01-19 20:36:27,698 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=19)
2022-01-19 20:36:27,698 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$28binary_subscr.4', '$y30.5', '$di32.6']
2022-01-19 20:36:27,699 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=36, inst=BINARY_SUBTRACT(arg=None, lineno=19)
2022-01-19 20:36:27,699 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$28binary_subscr.4', '$34binary_subscr.7']
2022-01-19 20:36:27,699 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=38, inst=STORE_FAST(arg=4, lineno=19)
2022-01-19 20:36:27,699 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$36binary_subtract.8']
2022-01-19 20:36:27,699 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=40, inst=LOAD_FAST(arg=2, lineno=20)
2022-01-19 20:36:27,699 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0']
2022-01-19 20:36:27,699 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=42, inst=LOAD_FAST(arg=4, lineno=20)
2022-01-19 20:36:27,699 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$dist40.9']
2022-01-19 20:36:27,699 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=20)
2022-01-19 20:36:27,700 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$dist40.9', '$diff42.10']
2022-01-19 20:36:27,700 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=46, inst=BINARY_MULTIPLY(arg=None, lineno=20)
2022-01-19 20:36:27,700 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$dist40.9', '$diff42.10', '$diff44.11']
2022-01-19 20:36:27,700 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=48, inst=INPLACE_ADD(arg=None, lineno=20)
2022-01-19 20:36:27,700 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$dist40.9', '$46binary_multiply.12']
2022-01-19 20:36:27,700 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=50, inst=STORE_FAST(arg=2, lineno=20)
2022-01-19 20:36:27,701 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0', '$48inplace_add.13']
2022-01-19 20:36:27,701 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=52, inst=JUMP_ABSOLUTE(arg=20, lineno=20)
2022-01-19 20:36:27,701 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi22.0']
2022-01-19 20:36:27,701 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=20, stack=('$phi22.0',), blockstack=(), npush=0)]
2022-01-19 20:36:27,701 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=20 nstack_initial=1)])
2022-01-19 20:36:27,701 [2544] DEBUG    numba.core.byteflow:163: [JupyterRequire] -------------------------Prune PHIs-------------------------
2022-01-19 20:36:27,701 [2544] DEBUG    numba.core.byteflow:232: [JupyterRequire] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=54 nstack_initial=0): set()})
2022-01-19 20:36:27,702 [2544] DEBUG    numba.core.byteflow:189: [JupyterRequire] defmap: {'$phi20.0': State(pc_initial=0 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
2022-01-19 20:36:27,702 [2544] DEBUG    numba.core.byteflow:190: [JupyterRequire] phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))}})
2022-01-19 20:36:27,702 [2544] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.0': {('$18get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))}})
2022-01-19 20:36:27,702 [2544] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))}})
2022-01-19 20:36:27,703 [2544] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))}})
2022-01-19 20:36:27,703 [2544] DEBUG    numba.core.byteflow:220: [JupyterRequire] keep phismap: {'$phi20.0': {('$18get_iter.7', State(pc_initial=0 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
2022-01-19 20:36:27,703 [2544] DEBUG    numba.core.byteflow:226: [JupyterRequire] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi20.0': '$18get_iter.7'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
2022-01-19 20:36:27,703 [2544] DEBUG    numba.core.byteflow:236: [JupyterRequire] ----------------------DONE Prune PHIs-----------------------
2022-01-19 20:36:27,703 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$6load_global.1'}), (8, {'res': '$x8.2'}), (10, {'item': '$x8.2', 'res': '$10load_attr.3'}), (12, {'res': '$const12.4'}), (14, {'index': '$const12.4', 'target': '$10load_attr.3', 'res': '$14binary_subscr.5'}), (16, {'func': '$6load_global.1', 'args': ['$14binary_subscr.5'], 'res': '$16call_function.6'}), (18, {'value': '$16call_function.6', 'res': '$18get_iter.7'})), outgoing_phis={'$phi20.0': '$18get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.7',)})
2022-01-19 20:36:27,704 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 22: ('$phi20.0', '$20for_iter.2')})
2022-01-19 20:36:27,704 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'value': '$phi22.1'}), (24, {'res': '$x24.2'}), (26, {'res': '$di26.3'}), (28, {'index': '$di26.3', 'target': '$x24.2', 'res': '$28binary_subscr.4'}), (30, {'res': '$y30.5'}), (32, {'res': '$di32.6'}), (34, {'index': '$di32.6', 'target': '$y30.5', 'res': '$34binary_subscr.7'}), (36, {'lhs': '$28binary_subscr.4', 'rhs': '$34binary_subscr.7', 'res': '$36binary_subtract.8'}), (38, {'value': '$36binary_subtract.8'}), (40, {'res': '$dist40.9'}), (42, {'res': '$diff42.10'}), (44, {'res': '$diff44.11'}), (46, {'lhs': '$diff42.10', 'rhs': '$diff44.11', 'res': '$46binary_multiply.12'}), (48, {'lhs': '$dist40.9', 'rhs': '$46binary_multiply.12', 'res': '$48inplace_add.13'}), (50, {'value': '$48inplace_add.13'}), (52, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$phi22.0',)})
2022-01-19 20:36:27,704 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$dist54.0'}), (56, {'retval': '$dist54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2022-01-19 20:36:27,705 [2544] DEBUG    numba.core.interpreter:149: [JupyterRequire] label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $const2.0 = const(float, 0.0)            ['$const2.0']
    dist = $const2.0                         ['$const2.0', 'dist']
    $6load_global.1 = global(range: <class 'range'>) ['$6load_global.1']
    $10load_attr.3 = getattr(value=x, attr=shape) ['$10load_attr.3', 'x']
    $const12.4 = const(int, 0)               ['$const12.4']
    $14binary_subscr.5 = getitem(value=$10load_attr.3, index=$const12.4) ['$10load_attr.3', '$14binary_subscr.5', '$const12.4']
    $16call_function.6 = call $6load_global.1($14binary_subscr.5, func=$6load_global.1, args=[Var($14binary_subscr.5, dtw_variants.py:18)], kws=(), vararg=None) ['$14binary_subscr.5', '$16call_function.6', '$6load_global.1']
    $18get_iter.7 = getiter(value=$16call_function.6) ['$16call_function.6', '$18get_iter.7']
    $phi20.0 = $18get_iter.7                 ['$18get_iter.7', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 54             ['$20for_iter.3']
label 22:
    di = $phi22.1                            ['$phi22.1', 'di']
    $28binary_subscr.4 = getitem(value=x, index=di) ['$28binary_subscr.4', 'di', 'x']
    $34binary_subscr.7 = getitem(value=y, index=di) ['$34binary_subscr.7', 'di', 'y']
    $36binary_subtract.8 = $28binary_subscr.4 - $34binary_subscr.7 ['$28binary_subscr.4', '$34binary_subscr.7', '$36binary_subtract.8']
    diff = $36binary_subtract.8              ['$36binary_subtract.8', 'diff']
    $46binary_multiply.12 = diff * diff      ['$46binary_multiply.12', 'diff', 'diff']
    $48inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dist, rhs=$46binary_multiply.12, static_lhs=Undefined, static_rhs=Undefined) ['$46binary_multiply.12', '$48inplace_add.13', 'dist']
    dist = $48inplace_add.13                 ['$48inplace_add.13', 'dist']
    jump 20                                  []
label 54:
    $56return_value.1 = cast(value=dist)     ['$56return_value.1', 'dist']
    return $56return_value.1                 ['$56return_value.1']

2022-01-19 20:36:27,711 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 0
2022-01-19 20:36:27,711 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C334AFD0>
2022-01-19 20:36:27,711 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: x = arg(0, name=x)
2022-01-19 20:36:27,711 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: y = arg(1, name=y)
2022-01-19 20:36:27,712 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const2.0 = const(float, 0.0)
2022-01-19 20:36:27,712 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: dist = $const2.0
2022-01-19 20:36:27,712 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $6load_global.1 = global(range: <class 'range'>)
2022-01-19 20:36:27,712 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10load_attr.3 = getattr(value=x, attr=shape)
2022-01-19 20:36:27,712 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const12.4 = const(int, 0)
2022-01-19 20:36:27,713 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $14binary_subscr.5 = static_getitem(value=$10load_attr.3, index=0, index_var=$const12.4)
2022-01-19 20:36:27,713 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.6 = call $6load_global.1($14binary_subscr.5, func=$6load_global.1, args=[Var($14binary_subscr.5, dtw_variants.py:18)], kws=(), vararg=None)
2022-01-19 20:36:27,713 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $18get_iter.7 = getiter(value=$16call_function.6)
2022-01-19 20:36:27,713 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi20.0 = $18get_iter.7
2022-01-19 20:36:27,713 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 20
2022-01-19 20:36:27,713 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 20
2022-01-19 20:36:27,713 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C334AFD0>
2022-01-19 20:36:27,714 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2022-01-19 20:36:27,714 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2022-01-19 20:36:27,714 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2022-01-19 20:36:27,714 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi22.1 = $20for_iter.2
2022-01-19 20:36:27,714 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $20for_iter.3, 22, 54
2022-01-19 20:36:27,714 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 22
2022-01-19 20:36:27,714 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C334AFD0>
2022-01-19 20:36:27,714 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: di = $phi22.1
2022-01-19 20:36:27,715 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $28binary_subscr.4 = getitem(value=x, index=di)
2022-01-19 20:36:27,715 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $34binary_subscr.7 = getitem(value=y, index=di)
2022-01-19 20:36:27,715 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $36binary_subtract.8 = $28binary_subscr.4 - $34binary_subscr.7
2022-01-19 20:36:27,715 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: diff = $36binary_subtract.8
2022-01-19 20:36:27,715 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46binary_multiply.12 = diff * diff
2022-01-19 20:36:27,715 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $48inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dist, rhs=$46binary_multiply.12, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:27,715 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: dist = $48inplace_add.13
2022-01-19 20:36:27,715 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 20
2022-01-19 20:36:27,715 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 54
2022-01-19 20:36:27,716 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C334AFD0>
2022-01-19 20:36:27,716 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=dist)
2022-01-19 20:36:27,716 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2022-01-19 20:36:27,716 [2544] DEBUG    numba.core.ssa:141: [JupyterRequire] defs defaultdict(<class 'list'>,
            {'$10load_attr.3': [<numba.core.ir.Assign object at 0x00000209C32E7E20>],
             '$14binary_subscr.5': [<numba.core.ir.Assign object at 0x00000209C3343FA0>],
             '$16call_function.6': [<numba.core.ir.Assign object at 0x00000209C32E7310>],
             '$18get_iter.7': [<numba.core.ir.Assign object at 0x00000209C32E7730>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x00000209C32E79D0>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x00000209C32F26A0>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x00000209C32F27C0>],
             '$28binary_subscr.4': [<numba.core.ir.Assign object at 0x00000209C32F2370>],
             '$34binary_subscr.7': [<numba.core.ir.Assign object at 0x00000209C32F2C40>],
             '$36binary_subtract.8': [<numba.core.ir.Assign object at 0x00000209C32F2DC0>],
             '$46binary_multiply.12': [<numba.core.ir.Assign object at 0x00000209C3343400>],
             '$48inplace_add.13': [<numba.core.ir.Assign object at 0x00000209C3343580>],
             '$56return_value.1': [<numba.core.ir.Assign object at 0x00000209C33437C0>],
             '$6load_global.1': [<numba.core.ir.Assign object at 0x00000209C32EECD0>],
             '$const12.4': [<numba.core.ir.Assign object at 0x00000209C32E70D0>],
             '$const2.0': [<numba.core.ir.Assign object at 0x00000209C32EEA00>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x00000209C32E7FA0>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x00000209C32E7A00>],
             'di': [<numba.core.ir.Assign object at 0x00000209C32F2220>],
             'diff': [<numba.core.ir.Assign object at 0x00000209C32F2EE0>],
             'dist': [<numba.core.ir.Assign object at 0x00000209C32EEEB0>,
                      <numba.core.ir.Assign object at 0x00000209C3343640>],
             'x': [<numba.core.ir.Assign object at 0x00000209C32EEB50>],
             'y': [<numba.core.ir.Assign object at 0x00000209C32EE970>]})
2022-01-19 20:36:27,716 [2544] DEBUG    numba.core.ssa:143: [JupyterRequire] SSA violators {'dist'}
2022-01-19 20:36:27,717 [2544] DEBUG    numba.core.ssa:49: [JupyterRequire] Fix SSA violator on var dist
2022-01-19 20:36:27,717 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2022-01-19 20:36:27,717 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C334A4F0>
2022-01-19 20:36:27,717 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: x = arg(0, name=x)
2022-01-19 20:36:27,717 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: y = arg(1, name=y)
2022-01-19 20:36:27,717 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const2.0 = const(float, 0.0)
2022-01-19 20:36:27,718 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: dist = $const2.0
2022-01-19 20:36:27,718 [2544] DEBUG    numba.core.ssa:256: [JupyterRequire] first assign: dist
2022-01-19 20:36:27,718 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: dist = $const2.0
2022-01-19 20:36:27,718 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $6load_global.1 = global(range: <class 'range'>)
2022-01-19 20:36:27,718 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10load_attr.3 = getattr(value=x, attr=shape)
2022-01-19 20:36:27,718 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const12.4 = const(int, 0)
2022-01-19 20:36:27,718 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $14binary_subscr.5 = static_getitem(value=$10load_attr.3, index=0, index_var=$const12.4)
2022-01-19 20:36:27,718 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.6 = call $6load_global.1($14binary_subscr.5, func=$6load_global.1, args=[Var($14binary_subscr.5, dtw_variants.py:18)], kws=(), vararg=None)
2022-01-19 20:36:27,718 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $18get_iter.7 = getiter(value=$16call_function.6)
2022-01-19 20:36:27,719 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi20.0 = $18get_iter.7
2022-01-19 20:36:27,719 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 20
2022-01-19 20:36:27,719 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2022-01-19 20:36:27,719 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C334A4F0>
2022-01-19 20:36:27,719 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2022-01-19 20:36:27,719 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2022-01-19 20:36:27,719 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2022-01-19 20:36:27,719 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi22.1 = $20for_iter.2
2022-01-19 20:36:27,720 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $20for_iter.3, 22, 54
2022-01-19 20:36:27,720 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 22
2022-01-19 20:36:27,720 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C334A4F0>
2022-01-19 20:36:27,720 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: di = $phi22.1
2022-01-19 20:36:27,720 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $28binary_subscr.4 = getitem(value=x, index=di)
2022-01-19 20:36:27,720 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $34binary_subscr.7 = getitem(value=y, index=di)
2022-01-19 20:36:27,720 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $36binary_subtract.8 = $28binary_subscr.4 - $34binary_subscr.7
2022-01-19 20:36:27,721 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: diff = $36binary_subtract.8
2022-01-19 20:36:27,721 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46binary_multiply.12 = diff * diff
2022-01-19 20:36:27,721 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $48inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dist, rhs=$46binary_multiply.12, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:27,721 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: dist = $48inplace_add.13
2022-01-19 20:36:27,721 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: dist.1 = $48inplace_add.13
2022-01-19 20:36:27,721 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 20
2022-01-19 20:36:27,722 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2022-01-19 20:36:27,722 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C334A4F0>
2022-01-19 20:36:27,722 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=dist)
2022-01-19 20:36:27,722 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2022-01-19 20:36:27,722 [2544] DEBUG    numba.core.ssa:55: [JupyterRequire] Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x00000209C334A4C0>],
             22: [<numba.core.ir.Assign object at 0x00000209C334A5B0>]})
2022-01-19 20:36:27,722 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2022-01-19 20:36:27,722 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C334A4F0>
2022-01-19 20:36:27,723 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: x = arg(0, name=x)
2022-01-19 20:36:27,723 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: y = arg(1, name=y)
2022-01-19 20:36:27,723 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const2.0 = const(float, 0.0)
2022-01-19 20:36:27,723 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: dist = $const2.0
2022-01-19 20:36:27,723 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $6load_global.1 = global(range: <class 'range'>)
2022-01-19 20:36:27,723 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10load_attr.3 = getattr(value=x, attr=shape)
2022-01-19 20:36:27,723 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const12.4 = const(int, 0)
2022-01-19 20:36:27,723 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $14binary_subscr.5 = static_getitem(value=$10load_attr.3, index=0, index_var=$const12.4)
2022-01-19 20:36:27,724 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.6 = call $6load_global.1($14binary_subscr.5, func=$6load_global.1, args=[Var($14binary_subscr.5, dtw_variants.py:18)], kws=(), vararg=None)
2022-01-19 20:36:27,724 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $18get_iter.7 = getiter(value=$16call_function.6)
2022-01-19 20:36:27,724 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi20.0 = $18get_iter.7
2022-01-19 20:36:27,724 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 20
2022-01-19 20:36:27,724 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2022-01-19 20:36:27,724 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C334A4F0>
2022-01-19 20:36:27,724 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.1 = iternext(value=$phi20.0)
2022-01-19 20:36:27,725 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
2022-01-19 20:36:27,725 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
2022-01-19 20:36:27,725 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi22.1 = $20for_iter.2
2022-01-19 20:36:27,725 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $20for_iter.3, 22, 54
2022-01-19 20:36:27,725 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 22
2022-01-19 20:36:27,725 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C334A4F0>
2022-01-19 20:36:27,725 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: di = $phi22.1
2022-01-19 20:36:27,725 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $28binary_subscr.4 = getitem(value=x, index=di)
2022-01-19 20:36:27,725 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $34binary_subscr.7 = getitem(value=y, index=di)
2022-01-19 20:36:27,726 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $36binary_subtract.8 = $28binary_subscr.4 - $34binary_subscr.7
2022-01-19 20:36:27,726 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: diff = $36binary_subtract.8
2022-01-19 20:36:27,726 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46binary_multiply.12 = diff * diff
2022-01-19 20:36:27,726 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $48inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dist, rhs=$46binary_multiply.12, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:27,726 [2544] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='dist' stmt=$48inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dist, rhs=$46binary_multiply.12, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:27,726 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 22
2022-01-19 20:36:27,726 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 20 from label 22
2022-01-19 20:36:27,726 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 20
2022-01-19 20:36:27,726 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 20
2022-01-19 20:36:27,727 [2544] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node dist.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
2022-01-19 20:36:27,727 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 0
2022-01-19 20:36:27,727 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def dist = $const2.0
2022-01-19 20:36:27,727 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 22
2022-01-19 20:36:27,727 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def dist.1 = $48inplace_add.13
2022-01-19 20:36:27,727 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $48inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dist.2, rhs=$46binary_multiply.12, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:27,727 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: dist.1 = $48inplace_add.13
2022-01-19 20:36:27,727 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 20
2022-01-19 20:36:27,728 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2022-01-19 20:36:27,728 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C334A4F0>
2022-01-19 20:36:27,728 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=dist)
2022-01-19 20:36:27,728 [2544] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='dist' stmt=$56return_value.1 = cast(value=dist)
2022-01-19 20:36:27,728 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 54
2022-01-19 20:36:27,728 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 20 from label 54
2022-01-19 20:36:27,728 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 20
2022-01-19 20:36:27,728 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $56return_value.1 = cast(value=dist.2)
2022-01-19 20:36:27,728 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2022-01-19 20:36:27,975 [2544] DEBUG    numba.core.byteflow:74: [JupyterRequire] bytecode dump:
>          0	NOP(arg=None, lineno=3538)
           2	LOAD_GLOBAL(arg=0, lineno=3538)
           4	LOAD_METHOD(arg=1, lineno=3538)
           6	LOAD_FAST(arg=0, lineno=3538)
           8	LOAD_GLOBAL(arg=2, lineno=3538)
          10	LOAD_FAST(arg=1, lineno=3538)
          12	CALL_FUNCTION(arg=1, lineno=3538)
          14	CALL_METHOD(arg=2, lineno=3538)
          16	STORE_FAST(arg=2, lineno=3538)
          18	LOAD_GLOBAL(arg=0, lineno=3539)
          20	LOAD_METHOD(arg=3, lineno=3539)
          22	LOAD_FAST(arg=2, lineno=3539)
          24	LOAD_ATTR(arg=4, lineno=3539)
          26	CALL_METHOD(arg=1, lineno=3539)
          28	GET_ITER(arg=None, lineno=3539)
>         30	FOR_ITER(arg=12, lineno=3539)
          32	STORE_FAST(arg=3, lineno=3539)
          34	LOAD_FAST(arg=1, lineno=3540)
          36	LOAD_FAST(arg=2, lineno=3540)
          38	LOAD_FAST(arg=3, lineno=3540)
          40	STORE_SUBSCR(arg=None, lineno=3540)
          42	JUMP_ABSOLUTE(arg=30, lineno=3540)
>         44	LOAD_FAST(arg=2, lineno=3541)
          46	RETURN_VALUE(arg=None, lineno=3541)
2022-01-19 20:36:27,975 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=0 nstack_initial=0)])
2022-01-19 20:36:27,976 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:27,976 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=0, inst=NOP(arg=None, lineno=3538)
2022-01-19 20:36:27,976 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,976 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3538)
2022-01-19 20:36:27,976 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,976 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=3538)
2022-01-19 20:36:27,976 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$2load_global.0']
2022-01-19 20:36:27,976 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=3538)
2022-01-19 20:36:27,976 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_method.1']
2022-01-19 20:36:27,977 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=8, inst=LOAD_GLOBAL(arg=2, lineno=3538)
2022-01-19 20:36:27,977 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_method.1', '$shape6.2']
2022-01-19 20:36:27,977 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=10, inst=LOAD_FAST(arg=1, lineno=3538)
2022-01-19 20:36:27,977 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_method.1', '$shape6.2', '$8load_global.3']
2022-01-19 20:36:27,977 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=12, inst=CALL_FUNCTION(arg=1, lineno=3538)
2022-01-19 20:36:27,977 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_method.1', '$shape6.2', '$8load_global.3', '$value10.4']
2022-01-19 20:36:27,977 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=14, inst=CALL_METHOD(arg=2, lineno=3538)
2022-01-19 20:36:27,977 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_method.1', '$shape6.2', '$12call_function.5']
2022-01-19 20:36:27,978 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=16, inst=STORE_FAST(arg=2, lineno=3538)
2022-01-19 20:36:27,978 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$14call_method.6']
2022-01-19 20:36:27,978 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=18, inst=LOAD_GLOBAL(arg=0, lineno=3539)
2022-01-19 20:36:27,978 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,978 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=20, inst=LOAD_METHOD(arg=3, lineno=3539)
2022-01-19 20:36:27,978 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$18load_global.7']
2022-01-19 20:36:27,978 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=3539)
2022-01-19 20:36:27,978 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$20load_method.8']
2022-01-19 20:36:27,979 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=24, inst=LOAD_ATTR(arg=4, lineno=3539)
2022-01-19 20:36:27,979 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$20load_method.8', '$arr22.9']
2022-01-19 20:36:27,979 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=26, inst=CALL_METHOD(arg=1, lineno=3539)
2022-01-19 20:36:27,979 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$20load_method.8', '$24load_attr.10']
2022-01-19 20:36:27,979 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=28, inst=GET_ITER(arg=None, lineno=3539)
2022-01-19 20:36:27,979 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$26call_method.11']
2022-01-19 20:36:27,979 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=('$28get_iter.12',), blockstack=(), npush=0)]
2022-01-19 20:36:27,979 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=1)])
2022-01-19 20:36:27,980 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi30.0']
2022-01-19 20:36:27,980 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=30, inst=FOR_ITER(arg=12, lineno=3539)
2022-01-19 20:36:27,980 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi30.0']
2022-01-19 20:36:27,980 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=32, stack=('$phi30.0', '$30for_iter.2'), blockstack=(), npush=0)]
2022-01-19 20:36:27,980 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=32 nstack_initial=2)])
2022-01-19 20:36:27,980 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:27,980 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=3541)
2022-01-19 20:36:27,980 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:27,980 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=46, inst=RETURN_VALUE(arg=None, lineno=3541)
2022-01-19 20:36:27,981 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$arr44.0']
2022-01-19 20:36:27,981 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2022-01-19 20:36:27,981 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=32 nstack_initial=2)])
2022-01-19 20:36:27,981 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi32.0', '$phi32.1']
2022-01-19 20:36:27,981 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=32, inst=STORE_FAST(arg=3, lineno=3539)
2022-01-19 20:36:27,981 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi32.0', '$phi32.1']
2022-01-19 20:36:27,981 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=3540)
2022-01-19 20:36:27,981 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi32.0']
2022-01-19 20:36:27,982 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=3540)
2022-01-19 20:36:27,982 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi32.0', '$value34.2']
2022-01-19 20:36:27,982 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=38, inst=LOAD_FAST(arg=3, lineno=3540)
2022-01-19 20:36:27,982 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi32.0', '$value34.2', '$arr36.3']
2022-01-19 20:36:27,982 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=40, inst=STORE_SUBSCR(arg=None, lineno=3540)
2022-01-19 20:36:27,982 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi32.0', '$value34.2', '$arr36.3', '$idx38.4']
2022-01-19 20:36:27,982 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=42, inst=JUMP_ABSOLUTE(arg=30, lineno=3540)
2022-01-19 20:36:27,982 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi32.0']
2022-01-19 20:36:27,983 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=('$phi32.0',), blockstack=(), npush=0)]
2022-01-19 20:36:27,983 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=1)])
2022-01-19 20:36:27,983 [2544] DEBUG    numba.core.byteflow:163: [JupyterRequire] -------------------------Prune PHIs-------------------------
2022-01-19 20:36:27,983 [2544] DEBUG    numba.core.byteflow:232: [JupyterRequire] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=32 nstack_initial=2): {'$phi32.1'},
             State(pc_initial=44 nstack_initial=0): set()})
2022-01-19 20:36:27,983 [2544] DEBUG    numba.core.byteflow:189: [JupyterRequire] defmap: {'$phi30.0': State(pc_initial=0 nstack_initial=0),
 '$phi32.1': State(pc_initial=30 nstack_initial=1)}
2022-01-19 20:36:27,983 [2544] DEBUG    numba.core.byteflow:190: [JupyterRequire] phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.12',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi32.0', State(pc_initial=32 nstack_initial=2))},
             '$phi32.0': {('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2022-01-19 20:36:27,984 [2544] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.12',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=1))},
             '$phi32.0': {('$28get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2022-01-19 20:36:27,984 [2544] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2022-01-19 20:36:27,984 [2544] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$28get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.0': {('$28get_iter.12',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi32.1': {('$30for_iter.2',
                           State(pc_initial=30 nstack_initial=1))}})
2022-01-19 20:36:27,984 [2544] DEBUG    numba.core.byteflow:220: [JupyterRequire] keep phismap: {'$phi30.0': {('$28get_iter.12', State(pc_initial=0 nstack_initial=0))},
 '$phi32.1': {('$30for_iter.2', State(pc_initial=30 nstack_initial=1))}}
2022-01-19 20:36:27,985 [2544] DEBUG    numba.core.byteflow:226: [JupyterRequire] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi30.0': '$28get_iter.12'},
             State(pc_initial=30 nstack_initial=1): {'$phi32.1': '$30for_iter.2'}})
2022-01-19 20:36:27,985 [2544] DEBUG    numba.core.byteflow:236: [JupyterRequire] ----------------------DONE Prune PHIs-----------------------
2022-01-19 20:36:27,985 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$8load_global.3'}), (10, {'res': '$value10.4'}), (12, {'func': '$8load_global.3', 'args': ['$value10.4'], 'res': '$12call_function.5'}), (14, {'func': '$4load_method.1', 'args': ['$shape6.2', '$12call_function.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'}), (18, {'res': '$18load_global.7'}), (20, {'item': '$18load_global.7', 'res': '$20load_method.8'}), (22, {'res': '$arr22.9'}), (24, {'item': '$arr22.9', 'res': '$24load_attr.10'}), (26, {'func': '$20load_method.8', 'args': ['$24load_attr.10'], 'res': '$26call_method.11'}), (28, {'value': '$26call_method.11', 'res': '$28get_iter.12'})), outgoing_phis={'$phi30.0': '$28get_iter.12'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$28get_iter.12',)})
2022-01-19 20:36:27,985 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'iterator': '$phi30.0', 'pair': '$30for_iter.1', 'indval': '$30for_iter.2', 'pred': '$30for_iter.3'}),), outgoing_phis={'$phi32.1': '$30for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 32: ('$phi30.0', '$30for_iter.2')})
2022-01-19 20:36:27,985 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=32 nstack_initial=2):
AdaptBlockInfo(insts=((32, {'value': '$phi32.1'}), (34, {'res': '$value34.2'}), (36, {'res': '$arr36.3'}), (38, {'res': '$idx38.4'}), (40, {'target': '$arr36.3', 'index': '$idx38.4', 'value': '$value34.2'}), (42, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$phi32.0',)})
2022-01-19 20:36:27,985 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$arr44.0'}), (46, {'retval': '$arr44.0', 'castval': '$46return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2022-01-19 20:36:27,986 [2544] DEBUG    numba.core.interpreter:149: [JupyterRequire] label 0:
    shape = arg(0, name=shape)               ['shape']
    value = arg(1, name=value)               ['value']
    $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    $8load_global.3 = global(type: <class 'type'>) ['$8load_global.3']
    $12call_function.5 = call $8load_global.3(value, func=$8load_global.3, args=[Var(value, arrayobj.py:3538)], kws=(), vararg=None) ['$12call_function.5', '$8load_global.3', 'value']
    $14call_method.6 = call $4load_method.1(shape, $12call_function.5, func=$4load_method.1, args=[Var(shape, arrayobj.py:3538), Var($12call_function.5, arrayobj.py:3538)], kws=(), vararg=None) ['$12call_function.5', '$14call_method.6', '$4load_method.1', 'shape']
    arr = $14call_method.6                   ['$14call_method.6', 'arr']
    $18load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$18load_global.7']
    $20load_method.8 = getattr(value=$18load_global.7, attr=ndindex) ['$18load_global.7', '$20load_method.8']
    $24load_attr.10 = getattr(value=arr, attr=shape) ['$24load_attr.10', 'arr']
    $26call_method.11 = call $20load_method.8($24load_attr.10, func=$20load_method.8, args=[Var($24load_attr.10, arrayobj.py:3539)], kws=(), vararg=None) ['$20load_method.8', '$24load_attr.10', '$26call_method.11']
    $28get_iter.12 = getiter(value=$26call_method.11) ['$26call_method.11', '$28get_iter.12']
    $phi30.0 = $28get_iter.12                ['$28get_iter.12', '$phi30.0']
    jump 30                                  []
label 30:
    $30for_iter.1 = iternext(value=$phi30.0) ['$30for_iter.1', '$phi30.0']
    $30for_iter.2 = pair_first(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.2']
    $30for_iter.3 = pair_second(value=$30for_iter.1) ['$30for_iter.1', '$30for_iter.3']
    $phi32.1 = $30for_iter.2                 ['$30for_iter.2', '$phi32.1']
    branch $30for_iter.3, 32, 44             ['$30for_iter.3']
label 32:
    idx = $phi32.1                           ['$phi32.1', 'idx']
    arr[idx] = value                         ['arr', 'idx', 'value']
    jump 30                                  []
label 44:
    $46return_value.1 = cast(value=arr)      ['$46return_value.1', 'arr']
    return $46return_value.1                 ['$46return_value.1']

2022-01-19 20:36:27,997 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 0
2022-01-19 20:36:27,997 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3511B20>
2022-01-19 20:36:27,997 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: shape = arg(0, name=shape)
2022-01-19 20:36:27,997 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: value = arg(1, name=value)
2022-01-19 20:36:27,997 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $2load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:27,998 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
2022-01-19 20:36:27,998 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8load_global.3 = global(type: <class 'type'>)
2022-01-19 20:36:27,998 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12call_function.5 = call $8load_global.3(value, func=$8load_global.3, args=[Var(value, arrayobj.py:3538)], kws=(), vararg=None)
2022-01-19 20:36:27,998 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $14call_method.6 = call $4load_method.1(shape, $12call_function.5, func=$4load_method.1, args=[Var(shape, arrayobj.py:3538), Var($12call_function.5, arrayobj.py:3538)], kws=(), vararg=None)
2022-01-19 20:36:27,998 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arr = $14call_method.6
2022-01-19 20:36:27,998 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $18load_global.7 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:27,998 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $20load_method.8 = getattr(value=$18load_global.7, attr=ndindex)
2022-01-19 20:36:27,999 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24load_attr.10 = getattr(value=arr, attr=shape)
2022-01-19 20:36:27,999 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26call_method.11 = call $20load_method.8($24load_attr.10, func=$20load_method.8, args=[Var($24load_attr.10, arrayobj.py:3539)], kws=(), vararg=None)
2022-01-19 20:36:27,999 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $28get_iter.12 = getiter(value=$26call_method.11)
2022-01-19 20:36:27,999 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi30.0 = $28get_iter.12
2022-01-19 20:36:27,999 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 30
2022-01-19 20:36:27,999 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 30
2022-01-19 20:36:27,999 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3511B20>
2022-01-19 20:36:27,999 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $30for_iter.1 = iternext(value=$phi30.0)
2022-01-19 20:36:27,999 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $30for_iter.2 = pair_first(value=$30for_iter.1)
2022-01-19 20:36:28,000 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $30for_iter.3 = pair_second(value=$30for_iter.1)
2022-01-19 20:36:28,000 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi32.1 = $30for_iter.2
2022-01-19 20:36:28,000 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $30for_iter.3, 32, 44
2022-01-19 20:36:28,000 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 32
2022-01-19 20:36:28,000 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3511B20>
2022-01-19 20:36:28,000 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $phi32.1
2022-01-19 20:36:28,000 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arr[idx] = value
2022-01-19 20:36:28,000 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 30
2022-01-19 20:36:28,000 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 44
2022-01-19 20:36:28,001 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3511B20>
2022-01-19 20:36:28,001 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46return_value.1 = cast(value=arr)
2022-01-19 20:36:28,001 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $46return_value.1
2022-01-19 20:36:28,001 [2544] DEBUG    numba.core.ssa:141: [JupyterRequire] defs defaultdict(<class 'list'>,
            {'$12call_function.5': [<numba.core.ir.Assign object at 0x00000209C349A040>],
             '$14call_method.6': [<numba.core.ir.Assign object at 0x00000209C349AD00>],
             '$18load_global.7': [<numba.core.ir.Assign object at 0x00000209C349AF70>],
             '$20load_method.8': [<numba.core.ir.Assign object at 0x00000209C34A2130>],
             '$24load_attr.10': [<numba.core.ir.Assign object at 0x00000209C34A23D0>],
             '$26call_method.11': [<numba.core.ir.Assign object at 0x00000209C34A2580>],
             '$28get_iter.12': [<numba.core.ir.Assign object at 0x00000209C34A26D0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x00000209C348A370>],
             '$30for_iter.1': [<numba.core.ir.Assign object at 0x00000209C34A2970>],
             '$30for_iter.2': [<numba.core.ir.Assign object at 0x00000209C34A2A90>],
             '$30for_iter.3': [<numba.core.ir.Assign object at 0x00000209C34A2BB0>],
             '$46return_value.1': [<numba.core.ir.Assign object at 0x00000209C34A55B0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x00000209C349A3D0>],
             '$8load_global.3': [<numba.core.ir.Assign object at 0x00000209C349A970>],
             '$phi30.0': [<numba.core.ir.Assign object at 0x00000209C349A730>],
             '$phi32.1': [<numba.core.ir.Assign object at 0x00000209C34A2880>],
             'arr': [<numba.core.ir.Assign object at 0x00000209C349ADF0>],
             'idx': [<numba.core.ir.Assign object at 0x00000209C34A2E50>],
             'shape': [<numba.core.ir.Assign object at 0x00000209C348F1C0>],
             'value': [<numba.core.ir.Assign object at 0x00000209C3480850>]})
2022-01-19 20:36:28,001 [2544] DEBUG    numba.core.ssa:143: [JupyterRequire] SSA violators set()
2022-01-19 20:36:28,534 [2544] DEBUG    numba.core.byteflow:74: [JupyterRequire] bytecode dump:
>          0	NOP(arg=None, lineno=87)
           2	LOAD_FAST(arg=0, lineno=87)
           4	LOAD_ATTR(arg=0, lineno=87)
           6	UNPACK_SEQUENCE(arg=2, lineno=87)
           8	STORE_FAST(arg=1, lineno=87)
          10	STORE_FAST(arg=2, lineno=87)
          12	LOAD_FAST(arg=1, lineno=88)
          14	LOAD_CONST(arg=1, lineno=88)
          16	BINARY_SUBTRACT(arg=None, lineno=88)
          18	LOAD_FAST(arg=2, lineno=88)
          20	LOAD_CONST(arg=1, lineno=88)
          22	BINARY_SUBTRACT(arg=None, lineno=88)
          24	BUILD_TUPLE(arg=2, lineno=88)
          26	BUILD_LIST(arg=1, lineno=88)
          28	STORE_FAST(arg=3, lineno=88)
>         30	LOAD_FAST(arg=3, lineno=89)
          32	LOAD_CONST(arg=2, lineno=89)
          34	BINARY_SUBSCR(arg=None, lineno=89)
          36	LOAD_CONST(arg=3, lineno=89)
          38	COMPARE_OP(arg=3, lineno=89)
          40	POP_JUMP_IF_FALSE(arg=256, lineno=89)
          42	LOAD_FAST(arg=3, lineno=90)
          44	LOAD_CONST(arg=2, lineno=90)
          46	BINARY_SUBSCR(arg=None, lineno=90)
          48	UNPACK_SEQUENCE(arg=2, lineno=90)
          50	STORE_FAST(arg=4, lineno=90)
          52	STORE_FAST(arg=5, lineno=90)
          54	LOAD_FAST(arg=4, lineno=91)
          56	LOAD_CONST(arg=4, lineno=91)
          58	COMPARE_OP(arg=2, lineno=91)
          60	POP_JUMP_IF_FALSE(arg=82, lineno=91)
          62	LOAD_FAST(arg=3, lineno=92)
          64	LOAD_METHOD(arg=1, lineno=92)
          66	LOAD_CONST(arg=4, lineno=92)
          68	LOAD_FAST(arg=5, lineno=92)
          70	LOAD_CONST(arg=1, lineno=92)
          72	BINARY_SUBTRACT(arg=None, lineno=92)
          74	BUILD_TUPLE(arg=2, lineno=92)
          76	CALL_METHOD(arg=1, lineno=92)
          78	POP_TOP(arg=None, lineno=92)
          80	JUMP_ABSOLUTE(arg=30, lineno=92)
>         82	LOAD_FAST(arg=5, lineno=93)
          84	LOAD_CONST(arg=4, lineno=93)
          86	COMPARE_OP(arg=2, lineno=93)
          88	POP_JUMP_IF_FALSE(arg=110, lineno=93)
          90	LOAD_FAST(arg=3, lineno=94)
          92	LOAD_METHOD(arg=1, lineno=94)
          94	LOAD_FAST(arg=4, lineno=94)
          96	LOAD_CONST(arg=1, lineno=94)
          98	BINARY_SUBTRACT(arg=None, lineno=94)
         100	LOAD_CONST(arg=4, lineno=94)
         102	BUILD_TUPLE(arg=2, lineno=94)
         104	CALL_METHOD(arg=1, lineno=94)
         106	POP_TOP(arg=None, lineno=94)
         108	JUMP_ABSOLUTE(arg=30, lineno=94)
>        110	LOAD_GLOBAL(arg=2, lineno=96)
         112	LOAD_METHOD(arg=3, lineno=96)
         114	LOAD_FAST(arg=0, lineno=96)
         116	LOAD_FAST(arg=4, lineno=96)
         118	LOAD_CONST(arg=1, lineno=96)
         120	BINARY_SUBTRACT(arg=None, lineno=96)
         122	BINARY_SUBSCR(arg=None, lineno=96)
         124	LOAD_FAST(arg=5, lineno=96)
         126	LOAD_CONST(arg=1, lineno=96)
         128	BINARY_SUBTRACT(arg=None, lineno=96)
         130	BINARY_SUBSCR(arg=None, lineno=96)
         132	LOAD_FAST(arg=0, lineno=97)
         134	LOAD_FAST(arg=4, lineno=97)
         136	LOAD_CONST(arg=1, lineno=97)
         138	BINARY_SUBTRACT(arg=None, lineno=97)
         140	BINARY_SUBSCR(arg=None, lineno=97)
         142	LOAD_FAST(arg=5, lineno=97)
         144	BINARY_SUBSCR(arg=None, lineno=97)
         146	LOAD_FAST(arg=0, lineno=98)
         148	LOAD_FAST(arg=4, lineno=98)
         150	BINARY_SUBSCR(arg=None, lineno=98)
         152	LOAD_FAST(arg=5, lineno=98)
         154	LOAD_CONST(arg=1, lineno=98)
         156	BINARY_SUBTRACT(arg=None, lineno=98)
         158	BINARY_SUBSCR(arg=None, lineno=98)
         160	BUILD_LIST(arg=3, lineno=96)
         162	CALL_METHOD(arg=1, lineno=96)
         164	STORE_FAST(arg=6, lineno=96)
         166	LOAD_GLOBAL(arg=2, lineno=99)
         168	LOAD_METHOD(arg=4, lineno=99)
         170	LOAD_FAST(arg=6, lineno=99)
         172	CALL_METHOD(arg=1, lineno=99)
         174	STORE_FAST(arg=7, lineno=99)
         176	LOAD_FAST(arg=7, lineno=100)
         178	LOAD_CONST(arg=4, lineno=100)
         180	COMPARE_OP(arg=2, lineno=100)
         182	POP_JUMP_IF_FALSE(arg=208, lineno=100)
         184	LOAD_FAST(arg=3, lineno=101)
         186	LOAD_METHOD(arg=1, lineno=101)
         188	LOAD_FAST(arg=4, lineno=101)
         190	LOAD_CONST(arg=1, lineno=101)
         192	BINARY_SUBTRACT(arg=None, lineno=101)
         194	LOAD_FAST(arg=5, lineno=101)
         196	LOAD_CONST(arg=1, lineno=101)
         198	BINARY_SUBTRACT(arg=None, lineno=101)
         200	BUILD_TUPLE(arg=2, lineno=101)
         202	CALL_METHOD(arg=1, lineno=101)
         204	POP_TOP(arg=None, lineno=101)
         206	JUMP_ABSOLUTE(arg=30, lineno=101)
>        208	LOAD_FAST(arg=7, lineno=102)
         210	LOAD_CONST(arg=1, lineno=102)
         212	COMPARE_OP(arg=2, lineno=102)
         214	POP_JUMP_IF_FALSE(arg=236, lineno=102)
         216	LOAD_FAST(arg=3, lineno=103)
         218	LOAD_METHOD(arg=1, lineno=103)
         220	LOAD_FAST(arg=4, lineno=103)
         222	LOAD_CONST(arg=1, lineno=103)
         224	BINARY_SUBTRACT(arg=None, lineno=103)
         226	LOAD_FAST(arg=5, lineno=103)
         228	BUILD_TUPLE(arg=2, lineno=103)
         230	CALL_METHOD(arg=1, lineno=103)
         232	POP_TOP(arg=None, lineno=103)
         234	JUMP_ABSOLUTE(arg=30, lineno=103)
>        236	LOAD_FAST(arg=3, lineno=105)
         238	LOAD_METHOD(arg=1, lineno=105)
         240	LOAD_FAST(arg=4, lineno=105)
         242	LOAD_FAST(arg=5, lineno=105)
         244	LOAD_CONST(arg=1, lineno=105)
         246	BINARY_SUBTRACT(arg=None, lineno=105)
         248	BUILD_TUPLE(arg=2, lineno=105)
         250	CALL_METHOD(arg=1, lineno=105)
         252	POP_TOP(arg=None, lineno=105)
         254	JUMP_ABSOLUTE(arg=30, lineno=105)
>        256	LOAD_FAST(arg=3, lineno=106)
         258	LOAD_CONST(arg=0, lineno=106)
         260	LOAD_CONST(arg=0, lineno=106)
         262	LOAD_CONST(arg=2, lineno=106)
         264	BUILD_SLICE(arg=3, lineno=106)
         266	BINARY_SUBSCR(arg=None, lineno=106)
         268	RETURN_VALUE(arg=None, lineno=106)
2022-01-19 20:36:28,535 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=0 nstack_initial=0)])
2022-01-19 20:36:28,535 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,535 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=0, inst=NOP(arg=None, lineno=87)
2022-01-19 20:36:28,535 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,536 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=87)
2022-01-19 20:36:28,536 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,536 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=87)
2022-01-19 20:36:28,536 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$acc_cost_mat2.0']
2022-01-19 20:36:28,536 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=6, inst=UNPACK_SEQUENCE(arg=2, lineno=87)
2022-01-19 20:36:28,536 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_attr.1']
2022-01-19 20:36:28,537 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=8, inst=STORE_FAST(arg=1, lineno=87)
2022-01-19 20:36:28,537 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$6unpack_sequence.3', '$6unpack_sequence.2']
2022-01-19 20:36:28,537 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=10, inst=STORE_FAST(arg=2, lineno=87)
2022-01-19 20:36:28,537 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$6unpack_sequence.3']
2022-01-19 20:36:28,537 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=12, inst=LOAD_FAST(arg=1, lineno=88)
2022-01-19 20:36:28,537 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,538 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=88)
2022-01-19 20:36:28,538 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$sz112.5']
2022-01-19 20:36:28,538 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=16, inst=BINARY_SUBTRACT(arg=None, lineno=88)
2022-01-19 20:36:28,538 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$sz112.5', '$const14.6']
2022-01-19 20:36:28,538 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=88)
2022-01-19 20:36:28,539 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16binary_subtract.7']
2022-01-19 20:36:28,539 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=20, inst=LOAD_CONST(arg=1, lineno=88)
2022-01-19 20:36:28,539 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16binary_subtract.7', '$sz218.8']
2022-01-19 20:36:28,539 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=88)
2022-01-19 20:36:28,539 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16binary_subtract.7', '$sz218.8', '$const20.9']
2022-01-19 20:36:28,540 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=24, inst=BUILD_TUPLE(arg=2, lineno=88)
2022-01-19 20:36:28,540 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16binary_subtract.7', '$22binary_subtract.10']
2022-01-19 20:36:28,540 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=26, inst=BUILD_LIST(arg=1, lineno=88)
2022-01-19 20:36:28,540 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$24build_tuple.11']
2022-01-19 20:36:28,540 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=28, inst=STORE_FAST(arg=3, lineno=88)
2022-01-19 20:36:28,541 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$26build_list.12']
2022-01-19 20:36:28,541 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2022-01-19 20:36:28,541 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=0)])
2022-01-19 20:36:28,541 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,541 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=89)
2022-01-19 20:36:28,541 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,541 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=89)
2022-01-19 20:36:28,542 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path30.0']
2022-01-19 20:36:28,542 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=89)
2022-01-19 20:36:28,542 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path30.0', '$const32.1']
2022-01-19 20:36:28,542 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=89)
2022-01-19 20:36:28,542 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$34binary_subscr.2']
2022-01-19 20:36:28,543 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=38, inst=COMPARE_OP(arg=3, lineno=89)
2022-01-19 20:36:28,543 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$34binary_subscr.2', '$const36.3']
2022-01-19 20:36:28,543 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=256, lineno=89)
2022-01-19 20:36:28,543 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$38compare_op.4']
2022-01-19 20:36:28,543 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=256, stack=(), blockstack=(), npush=0)]
2022-01-19 20:36:28,543 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=256 nstack_initial=0)])
2022-01-19 20:36:28,543 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,544 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=42, inst=LOAD_FAST(arg=3, lineno=90)
2022-01-19 20:36:28,544 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,544 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=44, inst=LOAD_CONST(arg=2, lineno=90)
2022-01-19 20:36:28,544 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path42.0']
2022-01-19 20:36:28,544 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=90)
2022-01-19 20:36:28,544 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path42.0', '$const44.1']
2022-01-19 20:36:28,544 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=48, inst=UNPACK_SEQUENCE(arg=2, lineno=90)
2022-01-19 20:36:28,544 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$46binary_subscr.2']
2022-01-19 20:36:28,545 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=50, inst=STORE_FAST(arg=4, lineno=90)
2022-01-19 20:36:28,545 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$48unpack_sequence.4', '$48unpack_sequence.3']
2022-01-19 20:36:28,545 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=52, inst=STORE_FAST(arg=5, lineno=90)
2022-01-19 20:36:28,545 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$48unpack_sequence.4']
2022-01-19 20:36:28,545 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=54, inst=LOAD_FAST(arg=4, lineno=91)
2022-01-19 20:36:28,545 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,545 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=56, inst=LOAD_CONST(arg=4, lineno=91)
2022-01-19 20:36:28,545 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$i54.6']
2022-01-19 20:36:28,546 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=58, inst=COMPARE_OP(arg=2, lineno=91)
2022-01-19 20:36:28,546 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$i54.6', '$const56.7']
2022-01-19 20:36:28,546 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=82, lineno=91)
2022-01-19 20:36:28,546 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$58compare_op.8']
2022-01-19 20:36:28,546 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=82, stack=(), blockstack=(), npush=0)]
2022-01-19 20:36:28,546 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=256 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=82 nstack_initial=0)])
2022-01-19 20:36:28,546 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,547 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=256, inst=LOAD_FAST(arg=3, lineno=106)
2022-01-19 20:36:28,547 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,547 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=258, inst=LOAD_CONST(arg=0, lineno=106)
2022-01-19 20:36:28,547 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path256.0']
2022-01-19 20:36:28,547 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=260, inst=LOAD_CONST(arg=0, lineno=106)
2022-01-19 20:36:28,548 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path256.0', '$const258.1']
2022-01-19 20:36:28,548 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=262, inst=LOAD_CONST(arg=2, lineno=106)
2022-01-19 20:36:28,548 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path256.0', '$const258.1', '$const260.2']
2022-01-19 20:36:28,548 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=264, inst=BUILD_SLICE(arg=3, lineno=106)
2022-01-19 20:36:28,548 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path256.0', '$const258.1', '$const260.2', '$const262.3']
2022-01-19 20:36:28,548 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=266, inst=BINARY_SUBSCR(arg=None, lineno=106)
2022-01-19 20:36:28,548 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path256.0', '$264build_slice.5']
2022-01-19 20:36:28,549 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=268, inst=RETURN_VALUE(arg=None, lineno=106)
2022-01-19 20:36:28,549 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$266binary_subscr.6']
2022-01-19 20:36:28,549 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2022-01-19 20:36:28,549 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=82 nstack_initial=0)])
2022-01-19 20:36:28,549 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,549 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=62, inst=LOAD_FAST(arg=3, lineno=92)
2022-01-19 20:36:28,550 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,550 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=64, inst=LOAD_METHOD(arg=1, lineno=92)
2022-01-19 20:36:28,550 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path62.0']
2022-01-19 20:36:28,550 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=66, inst=LOAD_CONST(arg=4, lineno=92)
2022-01-19 20:36:28,550 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$64load_method.1']
2022-01-19 20:36:28,550 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=68, inst=LOAD_FAST(arg=5, lineno=92)
2022-01-19 20:36:28,550 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$64load_method.1', '$const66.2']
2022-01-19 20:36:28,550 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=70, inst=LOAD_CONST(arg=1, lineno=92)
2022-01-19 20:36:28,551 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$64load_method.1', '$const66.2', '$j68.3']
2022-01-19 20:36:28,551 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=72, inst=BINARY_SUBTRACT(arg=None, lineno=92)
2022-01-19 20:36:28,551 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$64load_method.1', '$const66.2', '$j68.3', '$const70.4']
2022-01-19 20:36:28,551 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=74, inst=BUILD_TUPLE(arg=2, lineno=92)
2022-01-19 20:36:28,551 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$64load_method.1', '$const66.2', '$72binary_subtract.5']
2022-01-19 20:36:28,551 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=76, inst=CALL_METHOD(arg=1, lineno=92)
2022-01-19 20:36:28,551 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$64load_method.1', '$74build_tuple.6']
2022-01-19 20:36:28,551 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=78, inst=POP_TOP(arg=None, lineno=92)
2022-01-19 20:36:28,552 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$76call_method.7']
2022-01-19 20:36:28,552 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=80, inst=JUMP_ABSOLUTE(arg=30, lineno=92)
2022-01-19 20:36:28,552 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,552 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2022-01-19 20:36:28,552 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2022-01-19 20:36:28,552 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,552 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=82, inst=LOAD_FAST(arg=5, lineno=93)
2022-01-19 20:36:28,552 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,553 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=84, inst=LOAD_CONST(arg=4, lineno=93)
2022-01-19 20:36:28,553 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$j82.0']
2022-01-19 20:36:28,553 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=86, inst=COMPARE_OP(arg=2, lineno=93)
2022-01-19 20:36:28,553 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$j82.0', '$const84.1']
2022-01-19 20:36:28,553 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=88, inst=POP_JUMP_IF_FALSE(arg=110, lineno=93)
2022-01-19 20:36:28,553 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$86compare_op.2']
2022-01-19 20:36:28,553 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=90, stack=(), blockstack=(), npush=0), Edge(pc=110, stack=(), blockstack=(), npush=0)]
2022-01-19 20:36:28,553 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=90 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2022-01-19 20:36:28,554 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=90 nstack_initial=0), State(pc_initial=110 nstack_initial=0)])
2022-01-19 20:36:28,554 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,554 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=90, inst=LOAD_FAST(arg=3, lineno=94)
2022-01-19 20:36:28,554 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,554 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=92, inst=LOAD_METHOD(arg=1, lineno=94)
2022-01-19 20:36:28,554 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path90.0']
2022-01-19 20:36:28,554 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=94, inst=LOAD_FAST(arg=4, lineno=94)
2022-01-19 20:36:28,554 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$92load_method.1']
2022-01-19 20:36:28,555 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=96, inst=LOAD_CONST(arg=1, lineno=94)
2022-01-19 20:36:28,555 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$92load_method.1', '$i94.2']
2022-01-19 20:36:28,555 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=98, inst=BINARY_SUBTRACT(arg=None, lineno=94)
2022-01-19 20:36:28,555 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$92load_method.1', '$i94.2', '$const96.3']
2022-01-19 20:36:28,555 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=100, inst=LOAD_CONST(arg=4, lineno=94)
2022-01-19 20:36:28,555 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$92load_method.1', '$98binary_subtract.4']
2022-01-19 20:36:28,555 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=102, inst=BUILD_TUPLE(arg=2, lineno=94)
2022-01-19 20:36:28,555 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$92load_method.1', '$98binary_subtract.4', '$const100.5']
2022-01-19 20:36:28,555 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=104, inst=CALL_METHOD(arg=1, lineno=94)
2022-01-19 20:36:28,556 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$92load_method.1', '$102build_tuple.6']
2022-01-19 20:36:28,556 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=106, inst=POP_TOP(arg=None, lineno=94)
2022-01-19 20:36:28,556 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$104call_method.7']
2022-01-19 20:36:28,556 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=108, inst=JUMP_ABSOLUTE(arg=30, lineno=94)
2022-01-19 20:36:28,556 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,556 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2022-01-19 20:36:28,556 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=110 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2022-01-19 20:36:28,556 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,557 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=110, inst=LOAD_GLOBAL(arg=2, lineno=96)
2022-01-19 20:36:28,557 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,557 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=112, inst=LOAD_METHOD(arg=3, lineno=96)
2022-01-19 20:36:28,557 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$110load_global.0']
2022-01-19 20:36:28,557 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=114, inst=LOAD_FAST(arg=0, lineno=96)
2022-01-19 20:36:28,557 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1']
2022-01-19 20:36:28,557 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=116, inst=LOAD_FAST(arg=4, lineno=96)
2022-01-19 20:36:28,557 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$acc_cost_mat114.2']
2022-01-19 20:36:28,557 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=118, inst=LOAD_CONST(arg=1, lineno=96)
2022-01-19 20:36:28,558 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$acc_cost_mat114.2', '$i116.3']
2022-01-19 20:36:28,558 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=120, inst=BINARY_SUBTRACT(arg=None, lineno=96)
2022-01-19 20:36:28,558 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$acc_cost_mat114.2', '$i116.3', '$const118.4']
2022-01-19 20:36:28,558 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=122, inst=BINARY_SUBSCR(arg=None, lineno=96)
2022-01-19 20:36:28,558 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$acc_cost_mat114.2', '$120binary_subtract.5']
2022-01-19 20:36:28,558 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=96)
2022-01-19 20:36:28,558 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$122binary_subscr.6']
2022-01-19 20:36:28,558 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=96)
2022-01-19 20:36:28,559 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$122binary_subscr.6', '$j124.7']
2022-01-19 20:36:28,559 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=128, inst=BINARY_SUBTRACT(arg=None, lineno=96)
2022-01-19 20:36:28,559 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$122binary_subscr.6', '$j124.7', '$const126.8']
2022-01-19 20:36:28,559 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=96)
2022-01-19 20:36:28,559 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$122binary_subscr.6', '$128binary_subtract.9']
2022-01-19 20:36:28,559 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=132, inst=LOAD_FAST(arg=0, lineno=97)
2022-01-19 20:36:28,559 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10']
2022-01-19 20:36:28,559 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=134, inst=LOAD_FAST(arg=4, lineno=97)
2022-01-19 20:36:28,559 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$acc_cost_mat132.11']
2022-01-19 20:36:28,560 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=136, inst=LOAD_CONST(arg=1, lineno=97)
2022-01-19 20:36:28,560 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$acc_cost_mat132.11', '$i134.12']
2022-01-19 20:36:28,560 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=138, inst=BINARY_SUBTRACT(arg=None, lineno=97)
2022-01-19 20:36:28,560 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$acc_cost_mat132.11', '$i134.12', '$const136.13']
2022-01-19 20:36:28,560 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=140, inst=BINARY_SUBSCR(arg=None, lineno=97)
2022-01-19 20:36:28,560 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$acc_cost_mat132.11', '$138binary_subtract.14']
2022-01-19 20:36:28,560 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=142, inst=LOAD_FAST(arg=5, lineno=97)
2022-01-19 20:36:28,560 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$140binary_subscr.15']
2022-01-19 20:36:28,561 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=144, inst=BINARY_SUBSCR(arg=None, lineno=97)
2022-01-19 20:36:28,561 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$140binary_subscr.15', '$j142.16']
2022-01-19 20:36:28,561 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=146, inst=LOAD_FAST(arg=0, lineno=98)
2022-01-19 20:36:28,561 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17']
2022-01-19 20:36:28,561 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=148, inst=LOAD_FAST(arg=4, lineno=98)
2022-01-19 20:36:28,561 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17', '$acc_cost_mat146.18']
2022-01-19 20:36:28,561 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=150, inst=BINARY_SUBSCR(arg=None, lineno=98)
2022-01-19 20:36:28,561 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17', '$acc_cost_mat146.18', '$i148.19']
2022-01-19 20:36:28,561 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=152, inst=LOAD_FAST(arg=5, lineno=98)
2022-01-19 20:36:28,562 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17', '$150binary_subscr.20']
2022-01-19 20:36:28,562 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=154, inst=LOAD_CONST(arg=1, lineno=98)
2022-01-19 20:36:28,562 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17', '$150binary_subscr.20', '$j152.21']
2022-01-19 20:36:28,562 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=156, inst=BINARY_SUBTRACT(arg=None, lineno=98)
2022-01-19 20:36:28,562 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17', '$150binary_subscr.20', '$j152.21', '$const154.22']
2022-01-19 20:36:28,562 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=158, inst=BINARY_SUBSCR(arg=None, lineno=98)
2022-01-19 20:36:28,562 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17', '$150binary_subscr.20', '$156binary_subtract.23']
2022-01-19 20:36:28,562 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=160, inst=BUILD_LIST(arg=3, lineno=96)
2022-01-19 20:36:28,563 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$130binary_subscr.10', '$144binary_subscr.17', '$158binary_subscr.24']
2022-01-19 20:36:28,563 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=162, inst=CALL_METHOD(arg=1, lineno=96)
2022-01-19 20:36:28,563 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$112load_method.1', '$160build_list.25']
2022-01-19 20:36:28,563 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=164, inst=STORE_FAST(arg=6, lineno=96)
2022-01-19 20:36:28,563 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$162call_method.26']
2022-01-19 20:36:28,563 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=166, inst=LOAD_GLOBAL(arg=2, lineno=99)
2022-01-19 20:36:28,563 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,563 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=168, inst=LOAD_METHOD(arg=4, lineno=99)
2022-01-19 20:36:28,564 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$166load_global.27']
2022-01-19 20:36:28,564 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=170, inst=LOAD_FAST(arg=6, lineno=99)
2022-01-19 20:36:28,564 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$168load_method.28']
2022-01-19 20:36:28,564 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=172, inst=CALL_METHOD(arg=1, lineno=99)
2022-01-19 20:36:28,564 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$168load_method.28', '$arr170.29']
2022-01-19 20:36:28,564 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=174, inst=STORE_FAST(arg=7, lineno=99)
2022-01-19 20:36:28,564 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$172call_method.30']
2022-01-19 20:36:28,564 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=176, inst=LOAD_FAST(arg=7, lineno=100)
2022-01-19 20:36:28,564 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,565 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=178, inst=LOAD_CONST(arg=4, lineno=100)
2022-01-19 20:36:28,565 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$argmin176.31']
2022-01-19 20:36:28,565 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=180, inst=COMPARE_OP(arg=2, lineno=100)
2022-01-19 20:36:28,565 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$argmin176.31', '$const178.32']
2022-01-19 20:36:28,565 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=182, inst=POP_JUMP_IF_FALSE(arg=208, lineno=100)
2022-01-19 20:36:28,565 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$180compare_op.33']
2022-01-19 20:36:28,565 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=184, stack=(), blockstack=(), npush=0), Edge(pc=208, stack=(), blockstack=(), npush=0)]
2022-01-19 20:36:28,565 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=208 nstack_initial=0)])
2022-01-19 20:36:28,566 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=208 nstack_initial=0)])
2022-01-19 20:36:28,566 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,566 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=184, inst=LOAD_FAST(arg=3, lineno=101)
2022-01-19 20:36:28,566 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,566 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=186, inst=LOAD_METHOD(arg=1, lineno=101)
2022-01-19 20:36:28,566 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path184.0']
2022-01-19 20:36:28,566 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=188, inst=LOAD_FAST(arg=4, lineno=101)
2022-01-19 20:36:28,566 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1']
2022-01-19 20:36:28,566 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=190, inst=LOAD_CONST(arg=1, lineno=101)
2022-01-19 20:36:28,567 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1', '$i188.2']
2022-01-19 20:36:28,567 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=192, inst=BINARY_SUBTRACT(arg=None, lineno=101)
2022-01-19 20:36:28,567 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1', '$i188.2', '$const190.3']
2022-01-19 20:36:28,567 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=194, inst=LOAD_FAST(arg=5, lineno=101)
2022-01-19 20:36:28,567 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1', '$192binary_subtract.4']
2022-01-19 20:36:28,567 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=196, inst=LOAD_CONST(arg=1, lineno=101)
2022-01-19 20:36:28,567 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1', '$192binary_subtract.4', '$j194.5']
2022-01-19 20:36:28,567 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=198, inst=BINARY_SUBTRACT(arg=None, lineno=101)
2022-01-19 20:36:28,568 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1', '$192binary_subtract.4', '$j194.5', '$const196.6']
2022-01-19 20:36:28,568 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=200, inst=BUILD_TUPLE(arg=2, lineno=101)
2022-01-19 20:36:28,568 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1', '$192binary_subtract.4', '$198binary_subtract.7']
2022-01-19 20:36:28,568 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=202, inst=CALL_METHOD(arg=1, lineno=101)
2022-01-19 20:36:28,568 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$186load_method.1', '$200build_tuple.8']
2022-01-19 20:36:28,568 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=204, inst=POP_TOP(arg=None, lineno=101)
2022-01-19 20:36:28,568 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$202call_method.9']
2022-01-19 20:36:28,568 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=206, inst=JUMP_ABSOLUTE(arg=30, lineno=101)
2022-01-19 20:36:28,568 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,569 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2022-01-19 20:36:28,569 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=208 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2022-01-19 20:36:28,569 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,569 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=208, inst=LOAD_FAST(arg=7, lineno=102)
2022-01-19 20:36:28,569 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,569 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=210, inst=LOAD_CONST(arg=1, lineno=102)
2022-01-19 20:36:28,569 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$argmin208.0']
2022-01-19 20:36:28,569 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=212, inst=COMPARE_OP(arg=2, lineno=102)
2022-01-19 20:36:28,570 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$argmin208.0', '$const210.1']
2022-01-19 20:36:28,570 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=214, inst=POP_JUMP_IF_FALSE(arg=236, lineno=102)
2022-01-19 20:36:28,570 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$212compare_op.2']
2022-01-19 20:36:28,570 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=216, stack=(), blockstack=(), npush=0), Edge(pc=236, stack=(), blockstack=(), npush=0)]
2022-01-19 20:36:28,570 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=216 nstack_initial=0), State(pc_initial=236 nstack_initial=0)])
2022-01-19 20:36:28,570 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=216 nstack_initial=0), State(pc_initial=236 nstack_initial=0)])
2022-01-19 20:36:28,570 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,570 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=216, inst=LOAD_FAST(arg=3, lineno=103)
2022-01-19 20:36:28,571 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,571 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=218, inst=LOAD_METHOD(arg=1, lineno=103)
2022-01-19 20:36:28,571 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path216.0']
2022-01-19 20:36:28,571 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=220, inst=LOAD_FAST(arg=4, lineno=103)
2022-01-19 20:36:28,571 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$218load_method.1']
2022-01-19 20:36:28,571 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=222, inst=LOAD_CONST(arg=1, lineno=103)
2022-01-19 20:36:28,571 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$218load_method.1', '$i220.2']
2022-01-19 20:36:28,571 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=224, inst=BINARY_SUBTRACT(arg=None, lineno=103)
2022-01-19 20:36:28,571 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$218load_method.1', '$i220.2', '$const222.3']
2022-01-19 20:36:28,572 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=226, inst=LOAD_FAST(arg=5, lineno=103)
2022-01-19 20:36:28,572 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$218load_method.1', '$224binary_subtract.4']
2022-01-19 20:36:28,572 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=228, inst=BUILD_TUPLE(arg=2, lineno=103)
2022-01-19 20:36:28,572 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$218load_method.1', '$224binary_subtract.4', '$j226.5']
2022-01-19 20:36:28,572 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=230, inst=CALL_METHOD(arg=1, lineno=103)
2022-01-19 20:36:28,572 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$218load_method.1', '$228build_tuple.6']
2022-01-19 20:36:28,572 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=232, inst=POP_TOP(arg=None, lineno=103)
2022-01-19 20:36:28,572 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$230call_method.7']
2022-01-19 20:36:28,572 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=234, inst=JUMP_ABSOLUTE(arg=30, lineno=103)
2022-01-19 20:36:28,573 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,573 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2022-01-19 20:36:28,573 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=236 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2022-01-19 20:36:28,573 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,573 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=236, inst=LOAD_FAST(arg=3, lineno=105)
2022-01-19 20:36:28,573 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,573 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=238, inst=LOAD_METHOD(arg=1, lineno=105)
2022-01-19 20:36:28,573 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$path236.0']
2022-01-19 20:36:28,574 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=240, inst=LOAD_FAST(arg=4, lineno=105)
2022-01-19 20:36:28,574 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$238load_method.1']
2022-01-19 20:36:28,574 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=242, inst=LOAD_FAST(arg=5, lineno=105)
2022-01-19 20:36:28,574 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$238load_method.1', '$i240.2']
2022-01-19 20:36:28,574 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=244, inst=LOAD_CONST(arg=1, lineno=105)
2022-01-19 20:36:28,574 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$238load_method.1', '$i240.2', '$j242.3']
2022-01-19 20:36:28,574 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=246, inst=BINARY_SUBTRACT(arg=None, lineno=105)
2022-01-19 20:36:28,574 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$238load_method.1', '$i240.2', '$j242.3', '$const244.4']
2022-01-19 20:36:28,575 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=248, inst=BUILD_TUPLE(arg=2, lineno=105)
2022-01-19 20:36:28,575 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$238load_method.1', '$i240.2', '$246binary_subtract.5']
2022-01-19 20:36:28,575 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=250, inst=CALL_METHOD(arg=1, lineno=105)
2022-01-19 20:36:28,575 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$238load_method.1', '$248build_tuple.6']
2022-01-19 20:36:28,575 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=252, inst=POP_TOP(arg=None, lineno=105)
2022-01-19 20:36:28,575 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$250call_method.7']
2022-01-19 20:36:28,575 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=254, inst=JUMP_ABSOLUTE(arg=30, lineno=105)
2022-01-19 20:36:28,575 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,575 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2022-01-19 20:36:28,576 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2022-01-19 20:36:28,576 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=30 nstack_initial=0)])
2022-01-19 20:36:28,576 [2544] DEBUG    numba.core.byteflow:163: [JupyterRequire] -------------------------Prune PHIs-------------------------
2022-01-19 20:36:28,576 [2544] DEBUG    numba.core.byteflow:232: [JupyterRequire] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=90 nstack_initial=0): set(),
             State(pc_initial=110 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set(),
             State(pc_initial=208 nstack_initial=0): set(),
             State(pc_initial=216 nstack_initial=0): set(),
             State(pc_initial=236 nstack_initial=0): set(),
             State(pc_initial=256 nstack_initial=0): set()})
2022-01-19 20:36:28,576 [2544] DEBUG    numba.core.byteflow:189: [JupyterRequire] defmap: {}
2022-01-19 20:36:28,577 [2544] DEBUG    numba.core.byteflow:190: [JupyterRequire] phismap: defaultdict(<class 'set'>, {})
2022-01-19 20:36:28,577 [2544] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>, {})
2022-01-19 20:36:28,577 [2544] DEBUG    numba.core.byteflow:220: [JupyterRequire] keep phismap: {}
2022-01-19 20:36:28,577 [2544] DEBUG    numba.core.byteflow:226: [JupyterRequire] new_out: defaultdict(<class 'dict'>, {})
2022-01-19 20:36:28,577 [2544] DEBUG    numba.core.byteflow:236: [JupyterRequire] ----------------------DONE Prune PHIs-----------------------
2022-01-19 20:36:28,577 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$acc_cost_mat2.0'}), (4, {'item': '$acc_cost_mat2.0', 'res': '$4load_attr.1'}), (6, {'iterable': '$4load_attr.1', 'stores': ['$6unpack_sequence.2', '$6unpack_sequence.3'], 'tupleobj': '$6unpack_sequence.4'}), (8, {'value': '$6unpack_sequence.2'}), (10, {'value': '$6unpack_sequence.3'}), (12, {'res': '$sz112.5'}), (14, {'res': '$const14.6'}), (16, {'lhs': '$sz112.5', 'rhs': '$const14.6', 'res': '$16binary_subtract.7'}), (18, {'res': '$sz218.8'}), (20, {'res': '$const20.9'}), (22, {'lhs': '$sz218.8', 'rhs': '$const20.9', 'res': '$22binary_subtract.10'}), (24, {'items': ['$16binary_subtract.7', '$22binary_subtract.10'], 'res': '$24build_tuple.11'}), (26, {'items': ['$24build_tuple.11'], 'res': '$26build_list.12'}), (28, {'value': '$26build_list.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
2022-01-19 20:36:28,577 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$path30.0'}), (32, {'res': '$const32.1'}), (34, {'index': '$const32.1', 'target': '$path30.0', 'res': '$34binary_subscr.2'}), (36, {'res': '$const36.3'}), (38, {'lhs': '$34binary_subscr.2', 'rhs': '$const36.3', 'res': '$38compare_op.4'}), (40, {'pred': '$38compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 256: ()})
2022-01-19 20:36:28,578 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$path42.0'}), (44, {'res': '$const44.1'}), (46, {'index': '$const44.1', 'target': '$path42.0', 'res': '$46binary_subscr.2'}), (48, {'iterable': '$46binary_subscr.2', 'stores': ['$48unpack_sequence.3', '$48unpack_sequence.4'], 'tupleobj': '$48unpack_sequence.5'}), (50, {'value': '$48unpack_sequence.3'}), (52, {'value': '$48unpack_sequence.4'}), (54, {'res': '$i54.6'}), (56, {'res': '$const56.7'}), (58, {'lhs': '$i54.6', 'rhs': '$const56.7', 'res': '$58compare_op.8'}), (60, {'pred': '$58compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 82: ()})
2022-01-19 20:36:28,578 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$path62.0'}), (64, {'item': '$path62.0', 'res': '$64load_method.1'}), (66, {'res': '$const66.2'}), (68, {'res': '$j68.3'}), (70, {'res': '$const70.4'}), (72, {'lhs': '$j68.3', 'rhs': '$const70.4', 'res': '$72binary_subtract.5'}), (74, {'items': ['$const66.2', '$72binary_subtract.5'], 'res': '$74build_tuple.6'}), (76, {'func': '$64load_method.1', 'args': ['$74build_tuple.6'], 'res': '$76call_method.7'}), (80, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
2022-01-19 20:36:28,578 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {'res': '$j82.0'}), (84, {'res': '$const84.1'}), (86, {'lhs': '$j82.0', 'rhs': '$const84.1', 'res': '$86compare_op.2'}), (88, {'pred': '$86compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={90: (), 110: ()})
2022-01-19 20:36:28,578 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$path90.0'}), (92, {'item': '$path90.0', 'res': '$92load_method.1'}), (94, {'res': '$i94.2'}), (96, {'res': '$const96.3'}), (98, {'lhs': '$i94.2', 'rhs': '$const96.3', 'res': '$98binary_subtract.4'}), (100, {'res': '$const100.5'}), (102, {'items': ['$98binary_subtract.4', '$const100.5'], 'res': '$102build_tuple.6'}), (104, {'func': '$92load_method.1', 'args': ['$102build_tuple.6'], 'res': '$104call_method.7'}), (108, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
2022-01-19 20:36:28,578 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=110 nstack_initial=0):
AdaptBlockInfo(insts=((110, {'res': '$110load_global.0'}), (112, {'item': '$110load_global.0', 'res': '$112load_method.1'}), (114, {'res': '$acc_cost_mat114.2'}), (116, {'res': '$i116.3'}), (118, {'res': '$const118.4'}), (120, {'lhs': '$i116.3', 'rhs': '$const118.4', 'res': '$120binary_subtract.5'}), (122, {'index': '$120binary_subtract.5', 'target': '$acc_cost_mat114.2', 'res': '$122binary_subscr.6'}), (124, {'res': '$j124.7'}), (126, {'res': '$const126.8'}), (128, {'lhs': '$j124.7', 'rhs': '$const126.8', 'res': '$128binary_subtract.9'}), (130, {'index': '$128binary_subtract.9', 'target': '$122binary_subscr.6', 'res': '$130binary_subscr.10'}), (132, {'res': '$acc_cost_mat132.11'}), (134, {'res': '$i134.12'}), (136, {'res': '$const136.13'}), (138, {'lhs': '$i134.12', 'rhs': '$const136.13', 'res': '$138binary_subtract.14'}), (140, {'index': '$138binary_subtract.14', 'target': '$acc_cost_mat132.11', 'res': '$140binary_subscr.15'}), (142, {'res': '$j142.16'}), (144, {'index': '$j142.16', 'target': '$140binary_subscr.15', 'res': '$144binary_subscr.17'}), (146, {'res': '$acc_cost_mat146.18'}), (148, {'res': '$i148.19'}), (150, {'index': '$i148.19', 'target': '$acc_cost_mat146.18', 'res': '$150binary_subscr.20'}), (152, {'res': '$j152.21'}), (154, {'res': '$const154.22'}), (156, {'lhs': '$j152.21', 'rhs': '$const154.22', 'res': '$156binary_subtract.23'}), (158, {'index': '$156binary_subtract.23', 'target': '$150binary_subscr.20', 'res': '$158binary_subscr.24'}), (160, {'items': ['$130binary_subscr.10', '$144binary_subscr.17', '$158binary_subscr.24'], 'res': '$160build_list.25'}), (162, {'func': '$112load_method.1', 'args': ['$160build_list.25'], 'res': '$162call_method.26'}), (164, {'value': '$162call_method.26'}), (166, {'res': '$166load_global.27'}), (168, {'item': '$166load_global.27', 'res': '$168load_method.28'}), (170, {'res': '$arr170.29'}), (172, {'func': '$168load_method.28', 'args': ['$arr170.29'], 'res': '$172call_method.30'}), (174, {'value': '$172call_method.30'}), (176, {'res': '$argmin176.31'}), (178, {'res': '$const178.32'}), (180, {'lhs': '$argmin176.31', 'rhs': '$const178.32', 'res': '$180compare_op.33'}), (182, {'pred': '$180compare_op.33'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={184: (), 208: ()})
2022-01-19 20:36:28,578 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$path184.0'}), (186, {'item': '$path184.0', 'res': '$186load_method.1'}), (188, {'res': '$i188.2'}), (190, {'res': '$const190.3'}), (192, {'lhs': '$i188.2', 'rhs': '$const190.3', 'res': '$192binary_subtract.4'}), (194, {'res': '$j194.5'}), (196, {'res': '$const196.6'}), (198, {'lhs': '$j194.5', 'rhs': '$const196.6', 'res': '$198binary_subtract.7'}), (200, {'items': ['$192binary_subtract.4', '$198binary_subtract.7'], 'res': '$200build_tuple.8'}), (202, {'func': '$186load_method.1', 'args': ['$200build_tuple.8'], 'res': '$202call_method.9'}), (206, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
2022-01-19 20:36:28,579 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=208 nstack_initial=0):
AdaptBlockInfo(insts=((208, {'res': '$argmin208.0'}), (210, {'res': '$const210.1'}), (212, {'lhs': '$argmin208.0', 'rhs': '$const210.1', 'res': '$212compare_op.2'}), (214, {'pred': '$212compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={216: (), 236: ()})
2022-01-19 20:36:28,579 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=216 nstack_initial=0):
AdaptBlockInfo(insts=((216, {'res': '$path216.0'}), (218, {'item': '$path216.0', 'res': '$218load_method.1'}), (220, {'res': '$i220.2'}), (222, {'res': '$const222.3'}), (224, {'lhs': '$i220.2', 'rhs': '$const222.3', 'res': '$224binary_subtract.4'}), (226, {'res': '$j226.5'}), (228, {'items': ['$224binary_subtract.4', '$j226.5'], 'res': '$228build_tuple.6'}), (230, {'func': '$218load_method.1', 'args': ['$228build_tuple.6'], 'res': '$230call_method.7'}), (234, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
2022-01-19 20:36:28,579 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=236 nstack_initial=0):
AdaptBlockInfo(insts=((236, {'res': '$path236.0'}), (238, {'item': '$path236.0', 'res': '$238load_method.1'}), (240, {'res': '$i240.2'}), (242, {'res': '$j242.3'}), (244, {'res': '$const244.4'}), (246, {'lhs': '$j242.3', 'rhs': '$const244.4', 'res': '$246binary_subtract.5'}), (248, {'items': ['$i240.2', '$246binary_subtract.5'], 'res': '$248build_tuple.6'}), (250, {'func': '$238load_method.1', 'args': ['$248build_tuple.6'], 'res': '$250call_method.7'}), (254, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
2022-01-19 20:36:28,579 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=256 nstack_initial=0):
AdaptBlockInfo(insts=((256, {'res': '$path256.0'}), (258, {'res': '$const258.1'}), (260, {'res': '$const260.2'}), (262, {'res': '$const262.3'}), (264, {'start': '$const258.1', 'stop': '$const260.2', 'step': '$const262.3', 'res': '$264build_slice.5', 'slicevar': '$264build_slice.4'}), (266, {'index': '$264build_slice.5', 'target': '$path256.0', 'res': '$266binary_subscr.6'}), (268, {'retval': '$266binary_subscr.6', 'castval': '$268return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2022-01-19 20:36:28,583 [2544] DEBUG    numba.core.interpreter:149: [JupyterRequire] label 0:
    acc_cost_mat = arg(0, name=acc_cost_mat) ['acc_cost_mat']
    $4load_attr.1 = getattr(value=acc_cost_mat, attr=shape) ['$4load_attr.1', 'acc_cost_mat']
    $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2) ['$4load_attr.1', '$6unpack_sequence.4']
    $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None) ['$6unpack_sequence.2', '$6unpack_sequence.4']
    $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None) ['$6unpack_sequence.3', '$6unpack_sequence.4']
    sz1 = $6unpack_sequence.2                ['$6unpack_sequence.2', 'sz1']
    sz2 = $6unpack_sequence.3                ['$6unpack_sequence.3', 'sz2']
    $const14.6 = const(int, 1)               ['$const14.6']
    $16binary_subtract.7 = sz1 - $const14.6  ['$16binary_subtract.7', '$const14.6', 'sz1']
    $const20.9 = const(int, 1)               ['$const20.9']
    $22binary_subtract.10 = sz2 - $const20.9 ['$22binary_subtract.10', '$const20.9', 'sz2']
    $24build_tuple.11 = build_tuple(items=[Var($16binary_subtract.7, dtw_variants.py:88), Var($22binary_subtract.10, dtw_variants.py:88)]) ['$16binary_subtract.7', '$22binary_subtract.10', '$24build_tuple.11']
    $26build_list.12 = build_list(items=[Var($24build_tuple.11, dtw_variants.py:88)]) ['$24build_tuple.11', '$26build_list.12']
    path = $26build_list.12                  ['$26build_list.12', 'path']
    jump 30                                  []
label 30:
    $const32.1 = const(int, -1)              ['$const32.1']
    $34binary_subscr.2 = getitem(value=path, index=$const32.1) ['$34binary_subscr.2', '$const32.1', 'path']
    $const_0 = const(int, 0)                 ['$const_0']
    $const_0.1 = const(int, 0)               ['$const_0.1']
    $const36.3 = build_tuple(items=[Var($const_0, dtw_variants.py:89), Var($const_0.1, dtw_variants.py:89)]) ['$const36.3', '$const_0', '$const_0.1']
    $38compare_op.4 = $34binary_subscr.2 != $const36.3 ['$34binary_subscr.2', '$38compare_op.4', '$const36.3']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($38compare_op.4, func=bool40, args=(Var($38compare_op.4, dtw_variants.py:89),), kws=(), vararg=None) ['$38compare_op.4', '$40pred', 'bool40']
    branch $40pred, 42, 256                  ['$40pred']
label 42:
    $const44.1 = const(int, -1)              ['$const44.1']
    $46binary_subscr.2 = getitem(value=path, index=$const44.1) ['$46binary_subscr.2', '$const44.1', 'path']
    $48unpack_sequence.5 = exhaust_iter(value=$46binary_subscr.2, count=2) ['$46binary_subscr.2', '$48unpack_sequence.5']
    $48unpack_sequence.3 = static_getitem(value=$48unpack_sequence.5, index=0, index_var=None) ['$48unpack_sequence.3', '$48unpack_sequence.5']
    $48unpack_sequence.4 = static_getitem(value=$48unpack_sequence.5, index=1, index_var=None) ['$48unpack_sequence.4', '$48unpack_sequence.5']
    i = $48unpack_sequence.3                 ['$48unpack_sequence.3', 'i']
    j = $48unpack_sequence.4                 ['$48unpack_sequence.4', 'j']
    $const56.7 = const(int, 0)               ['$const56.7']
    $58compare_op.8 = i == $const56.7        ['$58compare_op.8', '$const56.7', 'i']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($58compare_op.8, func=bool60, args=(Var($58compare_op.8, dtw_variants.py:91),), kws=(), vararg=None) ['$58compare_op.8', '$60pred', 'bool60']
    branch $60pred, 62, 82                   ['$60pred']
label 62:
    $64load_method.1 = getattr(value=path, attr=append) ['$64load_method.1', 'path']
    $const66.2 = const(int, 0)               ['$const66.2']
    $const70.4 = const(int, 1)               ['$const70.4']
    $72binary_subtract.5 = j - $const70.4    ['$72binary_subtract.5', '$const70.4', 'j']
    $74build_tuple.6 = build_tuple(items=[Var($const66.2, dtw_variants.py:92), Var($72binary_subtract.5, dtw_variants.py:92)]) ['$72binary_subtract.5', '$74build_tuple.6', '$const66.2']
    $76call_method.7 = call $64load_method.1($74build_tuple.6, func=$64load_method.1, args=[Var($74build_tuple.6, dtw_variants.py:92)], kws=(), vararg=None) ['$64load_method.1', '$74build_tuple.6', '$76call_method.7']
    jump 30                                  []
label 82:
    $const84.1 = const(int, 0)               ['$const84.1']
    $86compare_op.2 = j == $const84.1        ['$86compare_op.2', '$const84.1', 'j']
    bool88 = global(bool: <class 'bool'>)    ['bool88']
    $88pred = call bool88($86compare_op.2, func=bool88, args=(Var($86compare_op.2, dtw_variants.py:93),), kws=(), vararg=None) ['$86compare_op.2', '$88pred', 'bool88']
    branch $88pred, 90, 110                  ['$88pred']
label 90:
    $92load_method.1 = getattr(value=path, attr=append) ['$92load_method.1', 'path']
    $const96.3 = const(int, 1)               ['$const96.3']
    $98binary_subtract.4 = i - $const96.3    ['$98binary_subtract.4', '$const96.3', 'i']
    $const100.5 = const(int, 0)              ['$const100.5']
    $102build_tuple.6 = build_tuple(items=[Var($98binary_subtract.4, dtw_variants.py:94), Var($const100.5, dtw_variants.py:94)]) ['$102build_tuple.6', '$98binary_subtract.4', '$const100.5']
    $104call_method.7 = call $92load_method.1($102build_tuple.6, func=$92load_method.1, args=[Var($102build_tuple.6, dtw_variants.py:94)], kws=(), vararg=None) ['$102build_tuple.6', '$104call_method.7', '$92load_method.1']
    jump 30                                  []
label 110:
    $110load_global.0 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$110load_global.0']
    $112load_method.1 = getattr(value=$110load_global.0, attr=array) ['$110load_global.0', '$112load_method.1']
    $const118.4 = const(int, 1)              ['$const118.4']
    $120binary_subtract.5 = i - $const118.4  ['$120binary_subtract.5', '$const118.4', 'i']
    $122binary_subscr.6 = getitem(value=acc_cost_mat, index=$120binary_subtract.5) ['$120binary_subtract.5', '$122binary_subscr.6', 'acc_cost_mat']
    $const126.8 = const(int, 1)              ['$const126.8']
    $128binary_subtract.9 = j - $const126.8  ['$128binary_subtract.9', '$const126.8', 'j']
    $130binary_subscr.10 = getitem(value=$122binary_subscr.6, index=$128binary_subtract.9) ['$122binary_subscr.6', '$128binary_subtract.9', '$130binary_subscr.10']
    $const136.13 = const(int, 1)             ['$const136.13']
    $138binary_subtract.14 = i - $const136.13 ['$138binary_subtract.14', '$const136.13', 'i']
    $140binary_subscr.15 = getitem(value=acc_cost_mat, index=$138binary_subtract.14) ['$138binary_subtract.14', '$140binary_subscr.15', 'acc_cost_mat']
    $144binary_subscr.17 = getitem(value=$140binary_subscr.15, index=j) ['$140binary_subscr.15', '$144binary_subscr.17', 'j']
    $150binary_subscr.20 = getitem(value=acc_cost_mat, index=i) ['$150binary_subscr.20', 'acc_cost_mat', 'i']
    $const154.22 = const(int, 1)             ['$const154.22']
    $156binary_subtract.23 = j - $const154.22 ['$156binary_subtract.23', '$const154.22', 'j']
    $158binary_subscr.24 = getitem(value=$150binary_subscr.20, index=$156binary_subtract.23) ['$150binary_subscr.20', '$156binary_subtract.23', '$158binary_subscr.24']
    $160build_list.25 = build_list(items=[Var($130binary_subscr.10, dtw_variants.py:96), Var($144binary_subscr.17, dtw_variants.py:97), Var($158binary_subscr.24, dtw_variants.py:98)]) ['$130binary_subscr.10', '$144binary_subscr.17', '$158binary_subscr.24', '$160build_list.25']
    $162call_method.26 = call $112load_method.1($160build_list.25, func=$112load_method.1, args=[Var($160build_list.25, dtw_variants.py:96)], kws=(), vararg=None) ['$112load_method.1', '$160build_list.25', '$162call_method.26']
    arr = $162call_method.26                 ['$162call_method.26', 'arr']
    $166load_global.27 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$166load_global.27']
    $168load_method.28 = getattr(value=$166load_global.27, attr=argmin) ['$166load_global.27', '$168load_method.28']
    $172call_method.30 = call $168load_method.28(arr, func=$168load_method.28, args=[Var(arr, dtw_variants.py:96)], kws=(), vararg=None) ['$168load_method.28', '$172call_method.30', 'arr']
    argmin = $172call_method.30              ['$172call_method.30', 'argmin']
    $const178.32 = const(int, 0)             ['$const178.32']
    $180compare_op.33 = argmin == $const178.32 ['$180compare_op.33', '$const178.32', 'argmin']
    bool182 = global(bool: <class 'bool'>)   ['bool182']
    $182pred = call bool182($180compare_op.33, func=bool182, args=(Var($180compare_op.33, dtw_variants.py:100),), kws=(), vararg=None) ['$180compare_op.33', '$182pred', 'bool182']
    branch $182pred, 184, 208                ['$182pred']
label 184:
    $186load_method.1 = getattr(value=path, attr=append) ['$186load_method.1', 'path']
    $const190.3 = const(int, 1)              ['$const190.3']
    $192binary_subtract.4 = i - $const190.3  ['$192binary_subtract.4', '$const190.3', 'i']
    $const196.6 = const(int, 1)              ['$const196.6']
    $198binary_subtract.7 = j - $const196.6  ['$198binary_subtract.7', '$const196.6', 'j']
    $200build_tuple.8 = build_tuple(items=[Var($192binary_subtract.4, dtw_variants.py:101), Var($198binary_subtract.7, dtw_variants.py:101)]) ['$192binary_subtract.4', '$198binary_subtract.7', '$200build_tuple.8']
    $202call_method.9 = call $186load_method.1($200build_tuple.8, func=$186load_method.1, args=[Var($200build_tuple.8, dtw_variants.py:101)], kws=(), vararg=None) ['$186load_method.1', '$200build_tuple.8', '$202call_method.9']
    jump 30                                  []
label 208:
    $const210.1 = const(int, 1)              ['$const210.1']
    $212compare_op.2 = argmin == $const210.1 ['$212compare_op.2', '$const210.1', 'argmin']
    bool214 = global(bool: <class 'bool'>)   ['bool214']
    $214pred = call bool214($212compare_op.2, func=bool214, args=(Var($212compare_op.2, dtw_variants.py:102),), kws=(), vararg=None) ['$212compare_op.2', '$214pred', 'bool214']
    branch $214pred, 216, 236                ['$214pred']
label 216:
    $218load_method.1 = getattr(value=path, attr=append) ['$218load_method.1', 'path']
    $const222.3 = const(int, 1)              ['$const222.3']
    $224binary_subtract.4 = i - $const222.3  ['$224binary_subtract.4', '$const222.3', 'i']
    $228build_tuple.6 = build_tuple(items=[Var($224binary_subtract.4, dtw_variants.py:103), Var(j, dtw_variants.py:90)]) ['$224binary_subtract.4', '$228build_tuple.6', 'j']
    $230call_method.7 = call $218load_method.1($228build_tuple.6, func=$218load_method.1, args=[Var($228build_tuple.6, dtw_variants.py:103)], kws=(), vararg=None) ['$218load_method.1', '$228build_tuple.6', '$230call_method.7']
    jump 30                                  []
label 236:
    $238load_method.1 = getattr(value=path, attr=append) ['$238load_method.1', 'path']
    $const244.4 = const(int, 1)              ['$const244.4']
    $246binary_subtract.5 = j - $const244.4  ['$246binary_subtract.5', '$const244.4', 'j']
    $248build_tuple.6 = build_tuple(items=[Var(i, dtw_variants.py:90), Var($246binary_subtract.5, dtw_variants.py:105)]) ['$246binary_subtract.5', '$248build_tuple.6', 'i']
    $250call_method.7 = call $238load_method.1($248build_tuple.6, func=$238load_method.1, args=[Var($248build_tuple.6, dtw_variants.py:105)], kws=(), vararg=None) ['$238load_method.1', '$248build_tuple.6', '$250call_method.7']
    jump 30                                  []
label 256:
    $const258.1 = const(NoneType, None)      ['$const258.1']
    $const260.2 = const(NoneType, None)      ['$const260.2']
    $const262.3 = const(int, -1)             ['$const262.3']
    $264build_slice.4 = global(slice: <class 'slice'>) ['$264build_slice.4']
    $264build_slice.5 = call $264build_slice.4($const258.1, $const260.2, $const262.3, func=$264build_slice.4, args=(Var($const258.1, dtw_variants.py:106), Var($const260.2, dtw_variants.py:106), Var($const262.3, dtw_variants.py:106)), kws=(), vararg=None) ['$264build_slice.4', '$264build_slice.5', '$const258.1', '$const260.2', '$const262.3']
    $266binary_subscr.6 = getitem(value=path, index=$264build_slice.5) ['$264build_slice.5', '$266binary_subscr.6', 'path']
    $268return_value.7 = cast(value=$266binary_subscr.6) ['$266binary_subscr.6', '$268return_value.7']
    return $268return_value.7                ['$268return_value.7']

2022-01-19 20:36:28,620 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 0
2022-01-19 20:36:28,620 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA1C0>
2022-01-19 20:36:28,620 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: acc_cost_mat = arg(0, name=acc_cost_mat)
2022-01-19 20:36:28,621 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=acc_cost_mat, attr=shape)
2022-01-19 20:36:28,621 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $6unpack_sequence.4 = exhaust_iter(value=$4load_attr.1, count=2)
2022-01-19 20:36:28,621 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $6unpack_sequence.2 = static_getitem(value=$6unpack_sequence.4, index=0, index_var=None)
2022-01-19 20:36:28,621 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $6unpack_sequence.3 = static_getitem(value=$6unpack_sequence.4, index=1, index_var=None)
2022-01-19 20:36:28,621 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: sz1 = $6unpack_sequence.2
2022-01-19 20:36:28,621 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: sz2 = $6unpack_sequence.3
2022-01-19 20:36:28,621 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.6 = const(int, 1)
2022-01-19 20:36:28,622 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16binary_subtract.7 = sz1 - $const14.6
2022-01-19 20:36:28,622 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const20.9 = const(int, 1)
2022-01-19 20:36:28,622 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22binary_subtract.10 = sz2 - $const20.9
2022-01-19 20:36:28,622 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24build_tuple.11 = build_tuple(items=[Var($16binary_subtract.7, dtw_variants.py:88), Var($22binary_subtract.10, dtw_variants.py:88)])
2022-01-19 20:36:28,622 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26build_list.12 = build_list(items=[Var($24build_tuple.11, dtw_variants.py:88)])
2022-01-19 20:36:28,623 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: path = $26build_list.12
2022-01-19 20:36:28,623 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 30
2022-01-19 20:36:28,623 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 30
2022-01-19 20:36:28,623 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA1C0>
2022-01-19 20:36:28,623 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const32.1 = const(int, -1)
2022-01-19 20:36:28,623 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $34binary_subscr.2 = static_getitem(value=path, index=-1, index_var=$const32.1)
2022-01-19 20:36:28,624 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const_0 = const(int, 0)
2022-01-19 20:36:28,624 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const_0.1 = const(int, 0)
2022-01-19 20:36:28,624 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const36.3 = build_tuple(items=[Var($const_0, dtw_variants.py:89), Var($const_0.1, dtw_variants.py:89)])
2022-01-19 20:36:28,624 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $38compare_op.4 = $34binary_subscr.2 != $const36.3
2022-01-19 20:36:28,624 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool40 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,625 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $40pred = call bool40($38compare_op.4, func=bool40, args=(Var($38compare_op.4, dtw_variants.py:89),), kws=(), vararg=None)
2022-01-19 20:36:28,625 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $40pred, 42, 256
2022-01-19 20:36:28,625 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 42
2022-01-19 20:36:28,625 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA1C0>
2022-01-19 20:36:28,625 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const44.1 = const(int, -1)
2022-01-19 20:36:28,625 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46binary_subscr.2 = static_getitem(value=path, index=-1, index_var=$const44.1)
2022-01-19 20:36:28,626 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $48unpack_sequence.5 = exhaust_iter(value=$46binary_subscr.2, count=2)
2022-01-19 20:36:28,626 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $48unpack_sequence.3 = static_getitem(value=$48unpack_sequence.5, index=0, index_var=None)
2022-01-19 20:36:28,626 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $48unpack_sequence.4 = static_getitem(value=$48unpack_sequence.5, index=1, index_var=None)
2022-01-19 20:36:28,626 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: i = $48unpack_sequence.3
2022-01-19 20:36:28,626 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: j = $48unpack_sequence.4
2022-01-19 20:36:28,627 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const56.7 = const(int, 0)
2022-01-19 20:36:28,627 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $58compare_op.8 = i == $const56.7
2022-01-19 20:36:28,627 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool60 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,627 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $60pred = call bool60($58compare_op.8, func=bool60, args=(Var($58compare_op.8, dtw_variants.py:91),), kws=(), vararg=None)
2022-01-19 20:36:28,627 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $60pred, 62, 82
2022-01-19 20:36:28,627 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 62
2022-01-19 20:36:28,628 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA1C0>
2022-01-19 20:36:28,628 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_method.1 = getattr(value=path, attr=append)
2022-01-19 20:36:28,628 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const66.2 = const(int, 0)
2022-01-19 20:36:28,628 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const70.4 = const(int, 1)
2022-01-19 20:36:28,628 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72binary_subtract.5 = j - $const70.4
2022-01-19 20:36:28,628 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74build_tuple.6 = build_tuple(items=[Var($const66.2, dtw_variants.py:92), Var($72binary_subtract.5, dtw_variants.py:92)])
2022-01-19 20:36:28,629 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $76call_method.7 = call $64load_method.1($74build_tuple.6, func=$64load_method.1, args=[Var($74build_tuple.6, dtw_variants.py:92)], kws=(), vararg=None)
2022-01-19 20:36:28,629 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 257
2022-01-19 20:36:28,629 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 82
2022-01-19 20:36:28,629 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA1C0>
2022-01-19 20:36:28,630 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const84.1 = const(int, 0)
2022-01-19 20:36:28,630 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $86compare_op.2 = j == $const84.1
2022-01-19 20:36:28,630 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool88 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,630 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88pred = call bool88($86compare_op.2, func=bool88, args=(Var($86compare_op.2, dtw_variants.py:93),), kws=(), vararg=None)
2022-01-19 20:36:28,630 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $88pred, 90, 110
2022-01-19 20:36:28,631 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 90
2022-01-19 20:36:28,631 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA1C0>
2022-01-19 20:36:28,631 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $92load_method.1 = getattr(value=path, attr=append)
2022-01-19 20:36:28,631 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const96.3 = const(int, 1)
2022-01-19 20:36:28,631 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $98binary_subtract.4 = i - $const96.3
2022-01-19 20:36:28,632 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const100.5 = const(int, 0)
2022-01-19 20:36:28,632 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $102build_tuple.6 = build_tuple(items=[Var($98binary_subtract.4, dtw_variants.py:94), Var($const100.5, dtw_variants.py:94)])
2022-01-19 20:36:28,632 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $104call_method.7 = call $92load_method.1($102build_tuple.6, func=$92load_method.1, args=[Var($102build_tuple.6, dtw_variants.py:94)], kws=(), vararg=None)
2022-01-19 20:36:28,632 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 257
2022-01-19 20:36:28,632 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 110
2022-01-19 20:36:28,632 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA1C0>
2022-01-19 20:36:28,633 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110load_global.0 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,633 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $112load_method.1 = getattr(value=$110load_global.0, attr=array)
2022-01-19 20:36:28,633 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const118.4 = const(int, 1)
2022-01-19 20:36:28,633 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $120binary_subtract.5 = i - $const118.4
2022-01-19 20:36:28,633 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $122binary_subscr.6 = getitem(value=acc_cost_mat, index=$120binary_subtract.5)
2022-01-19 20:36:28,633 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const126.8 = const(int, 1)
2022-01-19 20:36:28,633 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $128binary_subtract.9 = j - $const126.8
2022-01-19 20:36:28,634 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $130binary_subscr.10 = getitem(value=$122binary_subscr.6, index=$128binary_subtract.9)
2022-01-19 20:36:28,634 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const136.13 = const(int, 1)
2022-01-19 20:36:28,634 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $138binary_subtract.14 = i - $const136.13
2022-01-19 20:36:28,634 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $140binary_subscr.15 = getitem(value=acc_cost_mat, index=$138binary_subtract.14)
2022-01-19 20:36:28,634 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $144binary_subscr.17 = getitem(value=$140binary_subscr.15, index=j)
2022-01-19 20:36:28,634 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $150binary_subscr.20 = getitem(value=acc_cost_mat, index=i)
2022-01-19 20:36:28,634 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const154.22 = const(int, 1)
2022-01-19 20:36:28,635 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $156binary_subtract.23 = j - $const154.22
2022-01-19 20:36:28,635 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $158binary_subscr.24 = getitem(value=$150binary_subscr.20, index=$156binary_subtract.23)
2022-01-19 20:36:28,635 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $160build_list.25 = build_list(items=[Var($130binary_subscr.10, dtw_variants.py:96), Var($144binary_subscr.17, dtw_variants.py:97), Var($158binary_subscr.24, dtw_variants.py:98)])
2022-01-19 20:36:28,635 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $162call_method.26 = call $112load_method.1($160build_list.25, func=$112load_method.1, args=[Var($160build_list.25, dtw_variants.py:96)], kws=(), vararg=None)
2022-01-19 20:36:28,635 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arr = $162call_method.26
2022-01-19 20:36:28,635 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $166load_global.27 = global(numpy: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,635 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $168load_method.28 = getattr(value=$166load_global.27, attr=argmin)
2022-01-19 20:36:28,636 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $172call_method.30 = call $168load_method.28(arr, func=$168load_method.28, args=[Var(arr, dtw_variants.py:96)], kws=(), vararg=None)
2022-01-19 20:36:28,636 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: argmin = $172call_method.30
2022-01-19 20:36:28,636 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const178.32 = const(int, 0)
2022-01-19 20:36:28,636 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $180compare_op.33 = argmin == $const178.32
2022-01-19 20:36:28,636 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool182 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,637 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $182pred = call bool182($180compare_op.33, func=bool182, args=(Var($180compare_op.33, dtw_variants.py:100),), kws=(), vararg=None)
2022-01-19 20:36:28,637 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $182pred, 184, 208
2022-01-19 20:36:28,637 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 184
2022-01-19 20:36:28,637 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA1C0>
2022-01-19 20:36:28,637 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $186load_method.1 = getattr(value=path, attr=append)
2022-01-19 20:36:28,637 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const190.3 = const(int, 1)
2022-01-19 20:36:28,637 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $192binary_subtract.4 = i - $const190.3
2022-01-19 20:36:28,638 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const196.6 = const(int, 1)
2022-01-19 20:36:28,638 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $198binary_subtract.7 = j - $const196.6
2022-01-19 20:36:28,638 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $200build_tuple.8 = build_tuple(items=[Var($192binary_subtract.4, dtw_variants.py:101), Var($198binary_subtract.7, dtw_variants.py:101)])
2022-01-19 20:36:28,638 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $202call_method.9 = call $186load_method.1($200build_tuple.8, func=$186load_method.1, args=[Var($200build_tuple.8, dtw_variants.py:101)], kws=(), vararg=None)
2022-01-19 20:36:28,638 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 257
2022-01-19 20:36:28,638 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 208
2022-01-19 20:36:28,639 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA1C0>
2022-01-19 20:36:28,639 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const210.1 = const(int, 1)
2022-01-19 20:36:28,639 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $212compare_op.2 = argmin == $const210.1
2022-01-19 20:36:28,639 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool214 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,639 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $214pred = call bool214($212compare_op.2, func=bool214, args=(Var($212compare_op.2, dtw_variants.py:102),), kws=(), vararg=None)
2022-01-19 20:36:28,639 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $214pred, 216, 236
2022-01-19 20:36:28,639 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 216
2022-01-19 20:36:28,639 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA1C0>
2022-01-19 20:36:28,640 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $218load_method.1 = getattr(value=path, attr=append)
2022-01-19 20:36:28,640 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const222.3 = const(int, 1)
2022-01-19 20:36:28,640 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $224binary_subtract.4 = i - $const222.3
2022-01-19 20:36:28,640 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $228build_tuple.6 = build_tuple(items=[Var($224binary_subtract.4, dtw_variants.py:103), Var(j, dtw_variants.py:90)])
2022-01-19 20:36:28,640 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $230call_method.7 = call $218load_method.1($228build_tuple.6, func=$218load_method.1, args=[Var($228build_tuple.6, dtw_variants.py:103)], kws=(), vararg=None)
2022-01-19 20:36:28,640 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 257
2022-01-19 20:36:28,641 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 236
2022-01-19 20:36:28,641 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA1C0>
2022-01-19 20:36:28,641 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $238load_method.1 = getattr(value=path, attr=append)
2022-01-19 20:36:28,641 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const244.4 = const(int, 1)
2022-01-19 20:36:28,641 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $246binary_subtract.5 = j - $const244.4
2022-01-19 20:36:28,641 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $248build_tuple.6 = build_tuple(items=[Var(i, dtw_variants.py:90), Var($246binary_subtract.5, dtw_variants.py:105)])
2022-01-19 20:36:28,641 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $250call_method.7 = call $238load_method.1($248build_tuple.6, func=$238load_method.1, args=[Var($248build_tuple.6, dtw_variants.py:105)], kws=(), vararg=None)
2022-01-19 20:36:28,642 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 257
2022-01-19 20:36:28,642 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 256
2022-01-19 20:36:28,642 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA1C0>
2022-01-19 20:36:28,642 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const258.1 = const(NoneType, None)
2022-01-19 20:36:28,642 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const260.2 = const(NoneType, None)
2022-01-19 20:36:28,642 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const262.3 = const(int, -1)
2022-01-19 20:36:28,642 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $264build_slice.4 = global(slice: <class 'slice'>)
2022-01-19 20:36:28,642 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $264build_slice.5 = call $264build_slice.4($const258.1, $const260.2, $const262.3, func=$264build_slice.4, args=(Var($const258.1, dtw_variants.py:106), Var($const260.2, dtw_variants.py:106), Var($const262.3, dtw_variants.py:106)), kws=(), vararg=None)
2022-01-19 20:36:28,643 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $266binary_subscr.6 = static_getitem(value=path, index=slice(None, None, -1), index_var=$264build_slice.5)
2022-01-19 20:36:28,643 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $268return_value.7 = cast(value=$266binary_subscr.6)
2022-01-19 20:36:28,643 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $268return_value.7
2022-01-19 20:36:28,643 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 257
2022-01-19 20:36:28,643 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C32EA1C0>
2022-01-19 20:36:28,643 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 30
2022-01-19 20:36:28,645 [2544] DEBUG    numba.core.ssa:141: [JupyterRequire] defs defaultdict(<class 'list'>,
            {'$102build_tuple.6': [<numba.core.ir.Assign object at 0x00000209C35C3970>],
             '$104call_method.7': [<numba.core.ir.Assign object at 0x00000209C35C3310>],
             '$110load_global.0': [<numba.core.ir.Assign object at 0x00000209C35C39A0>],
             '$112load_method.1': [<numba.core.ir.Assign object at 0x00000209C35C3070>],
             '$120binary_subtract.5': [<numba.core.ir.Assign object at 0x00000209C35C3C70>],
             '$122binary_subscr.6': [<numba.core.ir.Assign object at 0x00000209C35C3730>],
             '$128binary_subtract.9': [<numba.core.ir.Assign object at 0x00000209C365E310>],
             '$130binary_subscr.10': [<numba.core.ir.Assign object at 0x00000209C365E460>],
             '$138binary_subtract.14': [<numba.core.ir.Assign object at 0x00000209C365EAF0>],
             '$140binary_subscr.15': [<numba.core.ir.Assign object at 0x00000209C365ED90>],
             '$144binary_subscr.17': [<numba.core.ir.Assign object at 0x00000209C365E970>],
             '$150binary_subscr.20': [<numba.core.ir.Assign object at 0x00000209C3669220>],
             '$156binary_subtract.23': [<numba.core.ir.Assign object at 0x00000209C3669940>],
             '$158binary_subscr.24': [<numba.core.ir.Assign object at 0x00000209C3669A30>],
             '$160build_list.25': [<numba.core.ir.Assign object at 0x00000209C3669BE0>],
             '$162call_method.26': [<numba.core.ir.Assign object at 0x00000209C3669D60>],
             '$166load_global.27': [<numba.core.ir.Assign object at 0x00000209C3669F70>],
             '$168load_method.28': [<numba.core.ir.Assign object at 0x00000209C3669040>],
             '$16binary_subtract.7': [<numba.core.ir.Assign object at 0x00000209C1349040>],
             '$172call_method.30': [<numba.core.ir.Assign object at 0x00000209C3671220>],
             '$180compare_op.33': [<numba.core.ir.Assign object at 0x00000209C3671700>],
             '$182pred': [<numba.core.ir.Assign object at 0x00000209C3671C40>],
             '$186load_method.1': [<numba.core.ir.Assign object at 0x00000209C3669250>],
             '$192binary_subtract.4': [<numba.core.ir.Assign object at 0x00000209C3671D90>],
             '$198binary_subtract.7': [<numba.core.ir.Assign object at 0x00000209C36A2400>],
             '$200build_tuple.8': [<numba.core.ir.Assign object at 0x00000209C36A2580>],
             '$202call_method.9': [<numba.core.ir.Assign object at 0x00000209C36A2820>],
             '$212compare_op.2': [<numba.core.ir.Assign object at 0x00000209C36A2D30>],
             '$214pred': [<numba.core.ir.Assign object at 0x00000209C36A2E20>],
             '$218load_method.1': [<numba.core.ir.Assign object at 0x00000209C334A280>],
             '$224binary_subtract.4': [<numba.core.ir.Assign object at 0x00000209C334A8E0>],
             '$228build_tuple.6': [<numba.core.ir.Assign object at 0x00000209C3264B80>],
             '$22binary_subtract.10': [<numba.core.ir.Assign object at 0x00000209C1349760>],
             '$230call_method.7': [<numba.core.ir.Assign object at 0x00000209C3388D00>],
             '$238load_method.1': [<numba.core.ir.Assign object at 0x00000209C33882B0>],
             '$246binary_subtract.5': [<numba.core.ir.Assign object at 0x00000209C3388B50>],
             '$248build_tuple.6': [<numba.core.ir.Assign object at 0x00000209C3388D90>],
             '$24build_tuple.11': [<numba.core.ir.Assign object at 0x00000209C13490A0>],
             '$250call_method.7': [<numba.core.ir.Assign object at 0x00000209C33885B0>],
             '$264build_slice.4': [<numba.core.ir.Assign object at 0x00000209C338F550>],
             '$264build_slice.5': [<numba.core.ir.Assign object at 0x00000209C338F670>],
             '$266binary_subscr.6': [<numba.core.ir.Assign object at 0x00000209C338FE50>],
             '$268return_value.7': [<numba.core.ir.Assign object at 0x00000209C338FD00>],
             '$26build_list.12': [<numba.core.ir.Assign object at 0x00000209C1349220>],
             '$34binary_subscr.2': [<numba.core.ir.Assign object at 0x00000209C33AFCD0>],
             '$38compare_op.4': [<numba.core.ir.Assign object at 0x00000209C35CB670>],
             '$40pred': [<numba.core.ir.Assign object at 0x00000209C35CBC40>],
             '$46binary_subscr.2': [<numba.core.ir.Assign object at 0x00000209C33AFAC0>],
             '$48unpack_sequence.3': [<numba.core.ir.Assign object at 0x00000209C36204C0>],
             '$48unpack_sequence.4': [<numba.core.ir.Assign object at 0x00000209C3620AF0>],
             '$48unpack_sequence.5': [<numba.core.ir.Assign object at 0x00000209C35CBC70>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x00000209C19F3EE0>],
             '$58compare_op.8': [<numba.core.ir.Assign object at 0x00000209C3620130>],
             '$60pred': [<numba.core.ir.Assign object at 0x00000209C3620070>],
             '$64load_method.1': [<numba.core.ir.Assign object at 0x00000209C3620B50>],
             '$6unpack_sequence.2': [<numba.core.ir.Assign object at 0x00000209C19F3430>],
             '$6unpack_sequence.3': [<numba.core.ir.Assign object at 0x00000209C19F3F40>],
             '$6unpack_sequence.4': [<numba.core.ir.Assign object at 0x00000209C19F3E50>],
             '$72binary_subtract.5': [<numba.core.ir.Assign object at 0x00000209C32DA880>],
             '$74build_tuple.6': [<numba.core.ir.Assign object at 0x00000209C1BCE460>],
             '$76call_method.7': [<numba.core.ir.Assign object at 0x00000209C1BCE040>],
             '$86compare_op.2': [<numba.core.ir.Assign object at 0x00000209C1A158B0>],
             '$88pred': [<numba.core.ir.Assign object at 0x00000209C1A15A00>],
             '$92load_method.1': [<numba.core.ir.Assign object at 0x00000209C1A15B80>],
             '$98binary_subtract.4': [<numba.core.ir.Assign object at 0x00000209C1A0F3D0>],
             '$const100.5': [<numba.core.ir.Assign object at 0x00000209C35C3A90>],
             '$const118.4': [<numba.core.ir.Assign object at 0x00000209C35C3850>],
             '$const126.8': [<numba.core.ir.Assign object at 0x00000209C365E1F0>],
             '$const136.13': [<numba.core.ir.Assign object at 0x00000209C365E8B0>],
             '$const14.6': [<numba.core.ir.Assign object at 0x00000209C1349370>],
             '$const154.22': [<numba.core.ir.Assign object at 0x00000209C36696D0>],
             '$const178.32': [<numba.core.ir.Assign object at 0x00000209C36715E0>],
             '$const190.3': [<numba.core.ir.Assign object at 0x00000209C3671F70>],
             '$const196.6': [<numba.core.ir.Assign object at 0x00000209C36A2250>],
             '$const20.9': [<numba.core.ir.Assign object at 0x00000209C1349400>],
             '$const210.1': [<numba.core.ir.Assign object at 0x00000209C36A2940>],
             '$const222.3': [<numba.core.ir.Assign object at 0x00000209C334ABB0>],
             '$const244.4': [<numba.core.ir.Assign object at 0x00000209C33889D0>],
             '$const258.1': [<numba.core.ir.Assign object at 0x00000209C3388EB0>],
             '$const260.2': [<numba.core.ir.Assign object at 0x00000209C338F160>],
             '$const262.3': [<numba.core.ir.Assign object at 0x00000209C338F2E0>],
             '$const32.1': [<numba.core.ir.Assign object at 0x00000209C1349130>],
             '$const36.3': [<numba.core.ir.Assign object at 0x00000209C35CB940>],
             '$const44.1': [<numba.core.ir.Assign object at 0x00000209C35CBBB0>],
             '$const56.7': [<numba.core.ir.Assign object at 0x00000209C3620430>],
             '$const66.2': [<numba.core.ir.Assign object at 0x00000209C3620EB0>],
             '$const70.4': [<numba.core.ir.Assign object at 0x00000209C32DAA00>],
             '$const84.1': [<numba.core.ir.Assign object at 0x00000209C1BCE7C0>],
             '$const96.3': [<numba.core.ir.Assign object at 0x00000209BA111220>],
             '$const_0': [<numba.core.ir.Assign object at 0x00000209C35CBE20>],
             '$const_0.1': [<numba.core.ir.Assign object at 0x00000209C35CB850>],
             'acc_cost_mat': [<numba.core.ir.Assign object at 0x00000209C1BAA9D0>],
             'argmin': [<numba.core.ir.Assign object at 0x00000209C3671310>],
             'arr': [<numba.core.ir.Assign object at 0x00000209C3669DC0>],
             'bool182': [<numba.core.ir.Assign object at 0x00000209C3671A90>],
             'bool214': [<numba.core.ir.Assign object at 0x00000209C36A2EB0>],
             'bool40': [<numba.core.ir.Assign object at 0x00000209C35CB2E0>],
             'bool60': [<numba.core.ir.Assign object at 0x00000209C3620820>],
             'bool88': [<numba.core.ir.Assign object at 0x00000209C1A156A0>],
             'i': [<numba.core.ir.Assign object at 0x00000209C3620B20>],
             'j': [<numba.core.ir.Assign object at 0x00000209C3620BB0>],
             'path': [<numba.core.ir.Assign object at 0x00000209C1349880>],
             'sz1': [<numba.core.ir.Assign object at 0x00000209C19F3460>],
             'sz2': [<numba.core.ir.Assign object at 0x00000209C19F3D00>]})
2022-01-19 20:36:28,645 [2544] DEBUG    numba.core.ssa:143: [JupyterRequire] SSA violators set()
2022-01-19 20:36:28,779 [2544] DEBUG    numba.core.byteflow:74: [JupyterRequire] bytecode dump:
>          0	NOP(arg=None, lineno=664)
           2	LOAD_FAST(arg=0, lineno=664)
           4	LOAD_ATTR(arg=0, lineno=664)
           6	LOAD_CONST(arg=1, lineno=664)
           8	COMPARE_OP(arg=2, lineno=664)
          10	POP_JUMP_IF_FALSE(arg=20, lineno=664)
          12	LOAD_GLOBAL(arg=1, lineno=665)
          14	LOAD_CONST(arg=2, lineno=665)
          16	CALL_FUNCTION(arg=1, lineno=665)
          18	RAISE_VARARGS(arg=1, lineno=665)
>         20	LOAD_FAST(arg=0, lineno=666)
          22	LOAD_ATTR(arg=2, lineno=666)
          24	GET_ITER(arg=None, lineno=666)
>         26	FOR_ITER(arg=16, lineno=666)
          28	STORE_FAST(arg=1, lineno=666)
          30	LOAD_FAST(arg=1, lineno=667)
          32	STORE_FAST(arg=2, lineno=667)
          34	LOAD_CONST(arg=1, lineno=668)
          36	STORE_FAST(arg=3, lineno=668)
          38	POP_TOP(arg=None, lineno=669)
          40	JUMP_ABSOLUTE(arg=44, lineno=669)
          42	JUMP_ABSOLUTE(arg=26, lineno=669)
>         44	LOAD_GLOBAL(arg=3, lineno=670)
          46	LOAD_METHOD(arg=4, lineno=670)
          48	LOAD_FAST(arg=2, lineno=670)
          50	CALL_METHOD(arg=1, lineno=670)
          52	POP_JUMP_IF_FALSE(arg=58, lineno=670)
          54	LOAD_FAST(arg=3, lineno=671)
          56	RETURN_VALUE(arg=None, lineno=671)
>         58	LOAD_CONST(arg=1, lineno=673)
          60	STORE_FAST(arg=4, lineno=673)
          62	LOAD_FAST(arg=0, lineno=674)
          64	LOAD_ATTR(arg=2, lineno=674)
          66	GET_ITER(arg=None, lineno=674)
>         68	FOR_ITER(arg=46, lineno=674)
          70	STORE_FAST(arg=1, lineno=674)
          72	LOAD_GLOBAL(arg=3, lineno=675)
          74	LOAD_METHOD(arg=4, lineno=675)
          76	LOAD_FAST(arg=1, lineno=675)
          78	CALL_METHOD(arg=1, lineno=675)
          80	POP_JUMP_IF_FALSE(arg=90, lineno=675)
          82	LOAD_FAST(arg=4, lineno=676)
          84	ROT_TWO(arg=None, lineno=676)
          86	POP_TOP(arg=None, lineno=676)
          88	RETURN_VALUE(arg=None, lineno=676)
>         90	LOAD_FAST(arg=1, lineno=677)
          92	LOAD_FAST(arg=2, lineno=677)
          94	COMPARE_OP(arg=0, lineno=677)
          96	POP_JUMP_IF_FALSE(arg=106, lineno=677)
          98	LOAD_FAST(arg=1, lineno=678)
         100	STORE_FAST(arg=2, lineno=678)
         102	LOAD_FAST(arg=4, lineno=679)
         104	STORE_FAST(arg=3, lineno=679)
>        106	LOAD_FAST(arg=4, lineno=680)
         108	LOAD_CONST(arg=3, lineno=680)
         110	INPLACE_ADD(arg=None, lineno=680)
         112	STORE_FAST(arg=4, lineno=680)
         114	JUMP_ABSOLUTE(arg=68, lineno=680)
>        116	LOAD_FAST(arg=3, lineno=681)
         118	RETURN_VALUE(arg=None, lineno=681)
2022-01-19 20:36:28,779 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=0 nstack_initial=0)])
2022-01-19 20:36:28,780 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,780 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=0, inst=NOP(arg=None, lineno=664)
2022-01-19 20:36:28,780 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,780 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=664)
2022-01-19 20:36:28,780 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,780 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=664)
2022-01-19 20:36:28,780 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$arry2.0']
2022-01-19 20:36:28,780 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=664)
2022-01-19 20:36:28,781 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_attr.1']
2022-01-19 20:36:28,781 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=8, inst=COMPARE_OP(arg=2, lineno=664)
2022-01-19 20:36:28,781 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$4load_attr.1', '$const6.2']
2022-01-19 20:36:28,781 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=10, inst=POP_JUMP_IF_FALSE(arg=20, lineno=664)
2022-01-19 20:36:28,781 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$8compare_op.3']
2022-01-19 20:36:28,781 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=12, stack=(), blockstack=(), npush=0), Edge(pc=20, stack=(), blockstack=(), npush=0)]
2022-01-19 20:36:28,781 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=12 nstack_initial=0), State(pc_initial=20 nstack_initial=0)])
2022-01-19 20:36:28,781 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,782 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=665)
2022-01-19 20:36:28,782 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,782 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=665)
2022-01-19 20:36:28,782 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$12load_global.0']
2022-01-19 20:36:28,782 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=665)
2022-01-19 20:36:28,782 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$12load_global.0', '$const14.1']
2022-01-19 20:36:28,782 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=18, inst=RAISE_VARARGS(arg=1, lineno=665)
2022-01-19 20:36:28,782 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$16call_function.2']
2022-01-19 20:36:28,783 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2022-01-19 20:36:28,783 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=20 nstack_initial=0)])
2022-01-19 20:36:28,783 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,783 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=666)
2022-01-19 20:36:28,783 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,783 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=22, inst=LOAD_ATTR(arg=2, lineno=666)
2022-01-19 20:36:28,783 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$arry20.0']
2022-01-19 20:36:28,783 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=24, inst=GET_ITER(arg=None, lineno=666)
2022-01-19 20:36:28,784 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$22load_attr.1']
2022-01-19 20:36:28,784 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=26, stack=('$24get_iter.2',), blockstack=(), npush=0)]
2022-01-19 20:36:28,784 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=26 nstack_initial=1)])
2022-01-19 20:36:28,784 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi26.0']
2022-01-19 20:36:28,784 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=26, inst=FOR_ITER(arg=16, lineno=666)
2022-01-19 20:36:28,784 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi26.0']
2022-01-19 20:36:28,784 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=28, stack=('$phi26.0', '$26for_iter.2'), blockstack=(), npush=0)]
2022-01-19 20:36:28,784 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=28 nstack_initial=2)])
2022-01-19 20:36:28,785 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,785 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=44, inst=LOAD_GLOBAL(arg=3, lineno=670)
2022-01-19 20:36:28,785 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,785 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=46, inst=LOAD_METHOD(arg=4, lineno=670)
2022-01-19 20:36:28,785 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$44load_global.0']
2022-01-19 20:36:28,785 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=670)
2022-01-19 20:36:28,785 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$46load_method.1']
2022-01-19 20:36:28,785 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=50, inst=CALL_METHOD(arg=1, lineno=670)
2022-01-19 20:36:28,786 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$46load_method.1', '$min_value48.2']
2022-01-19 20:36:28,786 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=52, inst=POP_JUMP_IF_FALSE(arg=58, lineno=670)
2022-01-19 20:36:28,786 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$50call_method.3']
2022-01-19 20:36:28,786 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
2022-01-19 20:36:28,786 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=28 nstack_initial=2), State(pc_initial=54 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
2022-01-19 20:36:28,786 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi28.0', '$phi28.1']
2022-01-19 20:36:28,786 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=28, inst=STORE_FAST(arg=1, lineno=666)
2022-01-19 20:36:28,787 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi28.0', '$phi28.1']
2022-01-19 20:36:28,787 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=667)
2022-01-19 20:36:28,787 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi28.0']
2022-01-19 20:36:28,787 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=32, inst=STORE_FAST(arg=2, lineno=667)
2022-01-19 20:36:28,787 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi28.0', '$v30.2']
2022-01-19 20:36:28,787 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=34, inst=LOAD_CONST(arg=1, lineno=668)
2022-01-19 20:36:28,787 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi28.0']
2022-01-19 20:36:28,787 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=36, inst=STORE_FAST(arg=3, lineno=668)
2022-01-19 20:36:28,787 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi28.0', '$const34.3']
2022-01-19 20:36:28,788 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=38, inst=POP_TOP(arg=None, lineno=669)
2022-01-19 20:36:28,788 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi28.0']
2022-01-19 20:36:28,788 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=40, inst=JUMP_ABSOLUTE(arg=44, lineno=669)
2022-01-19 20:36:28,788 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,788 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2022-01-19 20:36:28,788 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=58 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2022-01-19 20:36:28,788 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,788 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=54, inst=LOAD_FAST(arg=3, lineno=671)
2022-01-19 20:36:28,789 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,789 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=671)
2022-01-19 20:36:28,789 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$min_idx54.0']
2022-01-19 20:36:28,789 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2022-01-19 20:36:28,789 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2022-01-19 20:36:28,789 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,789 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=58, inst=LOAD_CONST(arg=1, lineno=673)
2022-01-19 20:36:28,789 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,789 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=60, inst=STORE_FAST(arg=4, lineno=673)
2022-01-19 20:36:28,790 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$const58.0']
2022-01-19 20:36:28,790 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=674)
2022-01-19 20:36:28,790 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,790 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=64, inst=LOAD_ATTR(arg=2, lineno=674)
2022-01-19 20:36:28,790 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$arry62.1']
2022-01-19 20:36:28,790 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=66, inst=GET_ITER(arg=None, lineno=674)
2022-01-19 20:36:28,790 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$64load_attr.2']
2022-01-19 20:36:28,790 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=68, stack=('$66get_iter.3',), blockstack=(), npush=0)]
2022-01-19 20:36:28,791 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=68 nstack_initial=1)])
2022-01-19 20:36:28,791 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=68 nstack_initial=1)])
2022-01-19 20:36:28,791 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi68.0']
2022-01-19 20:36:28,791 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=68, inst=FOR_ITER(arg=46, lineno=674)
2022-01-19 20:36:28,791 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi68.0']
2022-01-19 20:36:28,791 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=116, stack=(), blockstack=(), npush=0), Edge(pc=70, stack=('$phi68.0', '$68for_iter.2'), blockstack=(), npush=0)]
2022-01-19 20:36:28,791 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=70 nstack_initial=2)])
2022-01-19 20:36:28,791 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: []
2022-01-19 20:36:28,792 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=116, inst=LOAD_FAST(arg=3, lineno=681)
2022-01-19 20:36:28,792 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack []
2022-01-19 20:36:28,792 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=118, inst=RETURN_VALUE(arg=None, lineno=681)
2022-01-19 20:36:28,792 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$min_idx116.0']
2022-01-19 20:36:28,792 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2022-01-19 20:36:28,792 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=70 nstack_initial=2)])
2022-01-19 20:36:28,792 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi70.0', '$phi70.1']
2022-01-19 20:36:28,792 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=70, inst=STORE_FAST(arg=1, lineno=674)
2022-01-19 20:36:28,792 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi70.0', '$phi70.1']
2022-01-19 20:36:28,793 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=72, inst=LOAD_GLOBAL(arg=3, lineno=675)
2022-01-19 20:36:28,793 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi70.0']
2022-01-19 20:36:28,793 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=74, inst=LOAD_METHOD(arg=4, lineno=675)
2022-01-19 20:36:28,793 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi70.0', '$72load_global.2']
2022-01-19 20:36:28,793 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=76, inst=LOAD_FAST(arg=1, lineno=675)
2022-01-19 20:36:28,793 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi70.0', '$74load_method.3']
2022-01-19 20:36:28,793 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=78, inst=CALL_METHOD(arg=1, lineno=675)
2022-01-19 20:36:28,793 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi70.0', '$74load_method.3', '$v76.4']
2022-01-19 20:36:28,794 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=90, lineno=675)
2022-01-19 20:36:28,794 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi70.0', '$78call_method.5']
2022-01-19 20:36:28,794 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=82, stack=('$phi70.0',), blockstack=(), npush=0), Edge(pc=90, stack=('$phi70.0',), blockstack=(), npush=0)]
2022-01-19 20:36:28,794 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=82 nstack_initial=1), State(pc_initial=90 nstack_initial=1)])
2022-01-19 20:36:28,794 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi82.0']
2022-01-19 20:36:28,794 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=82, inst=LOAD_FAST(arg=4, lineno=676)
2022-01-19 20:36:28,794 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi82.0']
2022-01-19 20:36:28,794 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=84, inst=ROT_TWO(arg=None, lineno=676)
2022-01-19 20:36:28,795 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi82.0', '$idx82.1']
2022-01-19 20:36:28,795 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=86, inst=POP_TOP(arg=None, lineno=676)
2022-01-19 20:36:28,795 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$idx82.1', '$phi82.0']
2022-01-19 20:36:28,795 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=88, inst=RETURN_VALUE(arg=None, lineno=676)
2022-01-19 20:36:28,795 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$idx82.1']
2022-01-19 20:36:28,795 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[]
2022-01-19 20:36:28,795 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=90 nstack_initial=1)])
2022-01-19 20:36:28,795 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi90.0']
2022-01-19 20:36:28,795 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=90, inst=LOAD_FAST(arg=1, lineno=677)
2022-01-19 20:36:28,796 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi90.0']
2022-01-19 20:36:28,796 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=677)
2022-01-19 20:36:28,796 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi90.0', '$v90.1']
2022-01-19 20:36:28,796 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=94, inst=COMPARE_OP(arg=0, lineno=677)
2022-01-19 20:36:28,796 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi90.0', '$v90.1', '$min_value92.2']
2022-01-19 20:36:28,796 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=96, inst=POP_JUMP_IF_FALSE(arg=106, lineno=677)
2022-01-19 20:36:28,796 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi90.0', '$94compare_op.3']
2022-01-19 20:36:28,796 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=98, stack=('$phi90.0',), blockstack=(), npush=0), Edge(pc=106, stack=('$phi90.0',), blockstack=(), npush=0)]
2022-01-19 20:36:28,797 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=98 nstack_initial=1), State(pc_initial=106 nstack_initial=1)])
2022-01-19 20:36:28,797 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi98.0']
2022-01-19 20:36:28,797 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=98, inst=LOAD_FAST(arg=1, lineno=678)
2022-01-19 20:36:28,797 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0']
2022-01-19 20:36:28,797 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=100, inst=STORE_FAST(arg=2, lineno=678)
2022-01-19 20:36:28,797 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$v98.1']
2022-01-19 20:36:28,797 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=102, inst=LOAD_FAST(arg=4, lineno=679)
2022-01-19 20:36:28,797 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0']
2022-01-19 20:36:28,798 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=104, inst=STORE_FAST(arg=3, lineno=679)
2022-01-19 20:36:28,798 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi98.0', '$idx102.2']
2022-01-19 20:36:28,798 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=106, stack=('$phi98.0',), blockstack=(), npush=0)]
2022-01-19 20:36:28,798 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=106 nstack_initial=1), State(pc_initial=106 nstack_initial=1)])
2022-01-19 20:36:28,798 [2544] DEBUG    numba.core.byteflow:103: [JupyterRequire] stack: ['$phi106.0']
2022-01-19 20:36:28,798 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=680)
2022-01-19 20:36:28,798 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi106.0']
2022-01-19 20:36:28,798 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=108, inst=LOAD_CONST(arg=3, lineno=680)
2022-01-19 20:36:28,798 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi106.0', '$idx106.1']
2022-01-19 20:36:28,799 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=110, inst=INPLACE_ADD(arg=None, lineno=680)
2022-01-19 20:36:28,799 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi106.0', '$idx106.1', '$const108.2']
2022-01-19 20:36:28,799 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=112, inst=STORE_FAST(arg=4, lineno=680)
2022-01-19 20:36:28,799 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi106.0', '$110inplace_add.3']
2022-01-19 20:36:28,799 [2544] DEBUG    numba.core.byteflow:262: [JupyterRequire] dispatch pc=114, inst=JUMP_ABSOLUTE(arg=68, lineno=680)
2022-01-19 20:36:28,799 [2544] DEBUG    numba.core.byteflow:263: [JupyterRequire] stack ['$phi106.0']
2022-01-19 20:36:28,799 [2544] DEBUG    numba.core.byteflow:135: [JupyterRequire] end state. edges=[Edge(pc=68, stack=('$phi106.0',), blockstack=(), npush=0)]
2022-01-19 20:36:28,799 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=106 nstack_initial=1), State(pc_initial=68 nstack_initial=1)])
2022-01-19 20:36:28,800 [2544] DEBUG    numba.core.byteflow:100: [JupyterRequire] pending: deque([State(pc_initial=68 nstack_initial=1)])
2022-01-19 20:36:28,800 [2544] DEBUG    numba.core.byteflow:163: [JupyterRequire] -------------------------Prune PHIs-------------------------
2022-01-19 20:36:28,800 [2544] DEBUG    numba.core.byteflow:232: [JupyterRequire] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=12 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=1): {'$phi26.0'},
             State(pc_initial=28 nstack_initial=2): {'$phi28.1'},
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=1): {'$phi68.0'},
             State(pc_initial=70 nstack_initial=2): {'$phi70.1'},
             State(pc_initial=82 nstack_initial=1): set(),
             State(pc_initial=90 nstack_initial=1): set(),
             State(pc_initial=98 nstack_initial=1): set(),
             State(pc_initial=106 nstack_initial=1): set(),
             State(pc_initial=116 nstack_initial=0): set()})
2022-01-19 20:36:28,800 [2544] DEBUG    numba.core.byteflow:189: [JupyterRequire] defmap: {'$phi26.0': State(pc_initial=20 nstack_initial=0),
 '$phi28.1': State(pc_initial=26 nstack_initial=1),
 '$phi68.0': State(pc_initial=58 nstack_initial=0),
 '$phi70.1': State(pc_initial=68 nstack_initial=1)}
2022-01-19 20:36:28,800 [2544] DEBUG    numba.core.byteflow:190: [JupyterRequire] phismap: defaultdict(<class 'set'>,
            {'$phi106.0': {('$phi90.0', State(pc_initial=90 nstack_initial=1)),
                           ('$phi98.0', State(pc_initial=98 nstack_initial=1))},
             '$phi26.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.0': {('$phi26.0', State(pc_initial=26 nstack_initial=1))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))},
             '$phi68.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0)),
                          ('$phi106.0',
                           State(pc_initial=106 nstack_initial=1))},
             '$phi70.0': {('$phi68.0', State(pc_initial=68 nstack_initial=1))},
             '$phi70.1': {('$68for_iter.2',
                           State(pc_initial=68 nstack_initial=1))},
             '$phi82.0': {('$phi70.0', State(pc_initial=70 nstack_initial=2))},
             '$phi90.0': {('$phi70.0', State(pc_initial=70 nstack_initial=2))},
             '$phi98.0': {('$phi90.0', State(pc_initial=90 nstack_initial=1))}})
2022-01-19 20:36:28,801 [2544] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi106.0': {('$phi70.0', State(pc_initial=70 nstack_initial=2))},
             '$phi26.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))},
             '$phi68.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0)),
                          ('$phi70.0', State(pc_initial=70 nstack_initial=2))},
             '$phi70.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0)),
                          ('$phi70.0', State(pc_initial=70 nstack_initial=2))},
             '$phi70.1': {('$68for_iter.2',
                           State(pc_initial=68 nstack_initial=1))},
             '$phi82.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi90.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi98.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))}})
2022-01-19 20:36:28,801 [2544] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi106.0': {('$66get_iter.3',
                            State(pc_initial=58 nstack_initial=0))},
             '$phi26.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))},
             '$phi68.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi70.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi70.1': {('$68for_iter.2',
                           State(pc_initial=68 nstack_initial=1))},
             '$phi82.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi90.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi98.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))}})
2022-01-19 20:36:28,802 [2544] DEBUG    numba.core.byteflow:211: [JupyterRequire] changing phismap: defaultdict(<class 'set'>,
            {'$phi106.0': {('$66get_iter.3',
                            State(pc_initial=58 nstack_initial=0))},
             '$phi26.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.0': {('$24get_iter.2',
                           State(pc_initial=20 nstack_initial=0))},
             '$phi28.1': {('$26for_iter.2',
                           State(pc_initial=26 nstack_initial=1))},
             '$phi68.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi70.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi70.1': {('$68for_iter.2',
                           State(pc_initial=68 nstack_initial=1))},
             '$phi82.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi90.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))},
             '$phi98.0': {('$66get_iter.3',
                           State(pc_initial=58 nstack_initial=0))}})
2022-01-19 20:36:28,802 [2544] DEBUG    numba.core.byteflow:220: [JupyterRequire] keep phismap: {'$phi26.0': {('$24get_iter.2', State(pc_initial=20 nstack_initial=0))},
 '$phi28.1': {('$26for_iter.2', State(pc_initial=26 nstack_initial=1))},
 '$phi68.0': {('$66get_iter.3', State(pc_initial=58 nstack_initial=0))},
 '$phi70.1': {('$68for_iter.2', State(pc_initial=68 nstack_initial=1))}}
2022-01-19 20:36:28,802 [2544] DEBUG    numba.core.byteflow:226: [JupyterRequire] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=20 nstack_initial=0): {'$phi26.0': '$24get_iter.2'},
             State(pc_initial=26 nstack_initial=1): {'$phi28.1': '$26for_iter.2'},
             State(pc_initial=58 nstack_initial=0): {'$phi68.0': '$66get_iter.3'},
             State(pc_initial=68 nstack_initial=1): {'$phi70.1': '$68for_iter.2'}})
2022-01-19 20:36:28,803 [2544] DEBUG    numba.core.byteflow:236: [JupyterRequire] ----------------------DONE Prune PHIs-----------------------
2022-01-19 20:36:28,803 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arry2.0'}), (4, {'item': '$arry2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'lhs': '$4load_attr.1', 'rhs': '$const6.2', 'res': '$8compare_op.3'}), (10, {'pred': '$8compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={12: (), 20: ()})
2022-01-19 20:36:28,803 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=12 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$const14.1'}), (16, {'func': '$12load_global.0', 'args': ['$const14.1'], 'res': '$16call_function.2'}), (18, {'exc': '$16call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2022-01-19 20:36:28,803 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$arry20.0'}), (22, {'item': '$arry20.0', 'res': '$22load_attr.1'}), (24, {'value': '$22load_attr.1', 'res': '$24get_iter.2'})), outgoing_phis={'$phi26.0': '$24get_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ('$24get_iter.2',)})
2022-01-19 20:36:28,803 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=26 nstack_initial=1):
AdaptBlockInfo(insts=((26, {'iterator': '$phi26.0', 'pair': '$26for_iter.1', 'indval': '$26for_iter.2', 'pred': '$26for_iter.3'}),), outgoing_phis={'$phi28.1': '$26for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 28: ('$phi26.0', '$26for_iter.2')})
2022-01-19 20:36:28,803 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=28 nstack_initial=2):
AdaptBlockInfo(insts=((28, {'value': '$phi28.1'}), (30, {'res': '$v30.2'}), (32, {'value': '$v30.2'}), (34, {'res': '$const34.3'}), (36, {'value': '$const34.3'}), (40, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2022-01-19 20:36:28,804 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'item': '$44load_global.0', 'res': '$46load_method.1'}), (48, {'res': '$min_value48.2'}), (50, {'func': '$46load_method.1', 'args': ['$min_value48.2'], 'res': '$50call_method.3'}), (52, {'pred': '$50call_method.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={54: (), 58: ()})
2022-01-19 20:36:28,804 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$min_idx54.0'}), (56, {'retval': '$min_idx54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2022-01-19 20:36:28,804 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$const58.0'}), (60, {'value': '$const58.0'}), (62, {'res': '$arry62.1'}), (64, {'item': '$arry62.1', 'res': '$64load_attr.2'}), (66, {'value': '$64load_attr.2', 'res': '$66get_iter.3'})), outgoing_phis={'$phi68.0': '$66get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: ('$66get_iter.3',)})
2022-01-19 20:36:28,804 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=68 nstack_initial=1):
AdaptBlockInfo(insts=((68, {'iterator': '$phi68.0', 'pair': '$68for_iter.1', 'indval': '$68for_iter.2', 'pred': '$68for_iter.3'}),), outgoing_phis={'$phi70.1': '$68for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={116: (), 70: ('$phi68.0', '$68for_iter.2')})
2022-01-19 20:36:28,804 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=70 nstack_initial=2):
AdaptBlockInfo(insts=((70, {'value': '$phi70.1'}), (72, {'res': '$72load_global.2'}), (74, {'item': '$72load_global.2', 'res': '$74load_method.3'}), (76, {'res': '$v76.4'}), (78, {'func': '$74load_method.3', 'args': ['$v76.4'], 'res': '$78call_method.5'}), (80, {'pred': '$78call_method.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: ('$phi70.0',), 90: ('$phi70.0',)})
2022-01-19 20:36:28,804 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=82 nstack_initial=1):
AdaptBlockInfo(insts=((82, {'res': '$idx82.1'}), (88, {'retval': '$idx82.1', 'castval': '$88return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2022-01-19 20:36:28,804 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=90 nstack_initial=1):
AdaptBlockInfo(insts=((90, {'res': '$v90.1'}), (92, {'res': '$min_value92.2'}), (94, {'lhs': '$v90.1', 'rhs': '$min_value92.2', 'res': '$94compare_op.3'}), (96, {'pred': '$94compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: ('$phi90.0',), 106: ('$phi90.0',)})
2022-01-19 20:36:28,805 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=98 nstack_initial=1):
AdaptBlockInfo(insts=((98, {'res': '$v98.1'}), (100, {'value': '$v98.1'}), (102, {'res': '$idx102.2'}), (104, {'value': '$idx102.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ('$phi98.0',)})
2022-01-19 20:36:28,805 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=106 nstack_initial=1):
AdaptBlockInfo(insts=((106, {'res': '$idx106.1'}), (108, {'res': '$const108.2'}), (110, {'lhs': '$idx106.1', 'rhs': '$const108.2', 'res': '$110inplace_add.3'}), (112, {'value': '$110inplace_add.3'}), (114, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={68: ('$phi106.0',)})
2022-01-19 20:36:28,805 [2544] DEBUG    numba.core.byteflow:147: [JupyterRequire] block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'res': '$min_idx116.0'}), (118, {'retval': '$min_idx116.0', 'castval': '$118return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2022-01-19 20:36:28,807 [2544] DEBUG    numba.core.interpreter:149: [JupyterRequire] label 0:
    arry = arg(0, name=arry)                 ['arry']
    $4load_attr.1 = getattr(value=arry, attr=size) ['$4load_attr.1', 'arry']
    $const6.2 = const(int, 0)                ['$const6.2']
    $8compare_op.3 = $4load_attr.1 == $const6.2 ['$4load_attr.1', '$8compare_op.3', '$const6.2']
    bool10 = global(bool: <class 'bool'>)    ['bool10']
    $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None) ['$10pred', '$8compare_op.3', 'bool10']
    branch $10pred, 12, 20                   ['$10pred']
label 12:
    $12load_global.0 = global(ValueError: <class 'ValueError'>) ['$12load_global.0']
    $const14.1 = const(str, attempt to get argmin of an empty sequence) ['$const14.1']
    $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None) ['$12load_global.0', '$16call_function.2', '$const14.1']
    raise $16call_function.2                 ['$16call_function.2']
label 20:
    $22load_attr.1 = getattr(value=arry, attr=flat) ['$22load_attr.1', 'arry']
    $24get_iter.2 = getiter(value=$22load_attr.1) ['$22load_attr.1', '$24get_iter.2']
    $phi26.0 = $24get_iter.2                 ['$24get_iter.2', '$phi26.0']
    jump 26                                  []
label 26:
    $26for_iter.1 = iternext(value=$phi26.0) ['$26for_iter.1', '$phi26.0']
    $26for_iter.2 = pair_first(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.2']
    $26for_iter.3 = pair_second(value=$26for_iter.1) ['$26for_iter.1', '$26for_iter.3']
    $phi28.1 = $26for_iter.2                 ['$26for_iter.2', '$phi28.1']
    branch $26for_iter.3, 28, 44             ['$26for_iter.3']
label 28:
    v = $phi28.1                             ['$phi28.1', 'v']
    min_value = v                            ['min_value', 'v']
    $const34.3 = const(int, 0)               ['$const34.3']
    min_idx = $const34.3                     ['$const34.3', 'min_idx']
    jump 44                                  []
label 44:
    $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$44load_global.0']
    $46load_method.1 = getattr(value=$44load_global.0, attr=isnan) ['$44load_global.0', '$46load_method.1']
    $50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None) ['$46load_method.1', '$50call_method.3', 'min_value']
    bool52 = global(bool: <class 'bool'>)    ['bool52']
    $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None) ['$50call_method.3', '$52pred', 'bool52']
    branch $52pred, 54, 58                   ['$52pred']
label 54:
    $56return_value.1 = cast(value=min_idx)  ['$56return_value.1', 'min_idx']
    return $56return_value.1                 ['$56return_value.1']
label 58:
    $const58.0 = const(int, 0)               ['$const58.0']
    idx = $const58.0                         ['$const58.0', 'idx']
    $64load_attr.2 = getattr(value=arry, attr=flat) ['$64load_attr.2', 'arry']
    $66get_iter.3 = getiter(value=$64load_attr.2) ['$64load_attr.2', '$66get_iter.3']
    $phi68.0 = $66get_iter.3                 ['$66get_iter.3', '$phi68.0']
    jump 68                                  []
label 68:
    $68for_iter.1 = iternext(value=$phi68.0) ['$68for_iter.1', '$phi68.0']
    $68for_iter.2 = pair_first(value=$68for_iter.1) ['$68for_iter.1', '$68for_iter.2']
    $68for_iter.3 = pair_second(value=$68for_iter.1) ['$68for_iter.1', '$68for_iter.3']
    $phi70.1 = $68for_iter.2                 ['$68for_iter.2', '$phi70.1']
    branch $68for_iter.3, 70, 116            ['$68for_iter.3']
label 70:
    v = $phi70.1                             ['$phi70.1', 'v']
    $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>) ['$72load_global.2']
    $74load_method.3 = getattr(value=$72load_global.2, attr=isnan) ['$72load_global.2', '$74load_method.3']
    $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None) ['$74load_method.3', '$78call_method.5', 'v']
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None) ['$78call_method.5', '$80pred', 'bool80']
    branch $80pred, 82, 90                   ['$80pred']
label 82:
    $88return_value.2 = cast(value=idx)      ['$88return_value.2', 'idx']
    return $88return_value.2                 ['$88return_value.2']
label 90:
    $94compare_op.3 = v < min_value          ['$94compare_op.3', 'min_value', 'v']
    bool96 = global(bool: <class 'bool'>)    ['bool96']
    $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None) ['$94compare_op.3', '$96pred', 'bool96']
    branch $96pred, 98, 106                  ['$96pred']
label 98:
    min_value = v                            ['min_value', 'v']
    min_idx = idx                            ['idx', 'min_idx']
    jump 106                                 []
label 106:
    $const108.2 = const(int, 1)              ['$const108.2']
    $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined) ['$110inplace_add.3', '$const108.2', 'idx']
    idx = $110inplace_add.3                  ['$110inplace_add.3', 'idx']
    jump 68                                  []
label 116:
    $118return_value.1 = cast(value=min_idx) ['$118return_value.1', 'min_idx']
    return $118return_value.1                ['$118return_value.1']

2022-01-19 20:36:28,824 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 0
2022-01-19 20:36:28,824 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,824 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2022-01-19 20:36:28,824 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2022-01-19 20:36:28,824 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2022-01-19 20:36:28,825 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2022-01-19 20:36:28,825 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,825 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2022-01-19 20:36:28,825 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2022-01-19 20:36:28,825 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 12
2022-01-19 20:36:28,825 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,825 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2022-01-19 20:36:28,825 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2022-01-19 20:36:28,826 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2022-01-19 20:36:28,826 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2022-01-19 20:36:28,826 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 20
2022-01-19 20:36:28,826 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,826 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,826 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2022-01-19 20:36:28,826 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2022-01-19 20:36:28,826 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2022-01-19 20:36:28,827 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 26
2022-01-19 20:36:28,827 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,827 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2022-01-19 20:36:28,827 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2022-01-19 20:36:28,827 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2022-01-19 20:36:28,827 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2022-01-19 20:36:28,827 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2022-01-19 20:36:28,827 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 28
2022-01-19 20:36:28,828 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,828 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2022-01-19 20:36:28,828 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,828 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2022-01-19 20:36:28,828 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2022-01-19 20:36:28,828 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2022-01-19 20:36:28,828 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 44
2022-01-19 20:36:28,828 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,828 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,829 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2022-01-19 20:36:28,829 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None)
2022-01-19 20:36:28,829 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,829 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2022-01-19 20:36:28,829 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2022-01-19 20:36:28,829 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 54
2022-01-19 20:36:28,829 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,829 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx)
2022-01-19 20:36:28,830 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2022-01-19 20:36:28,830 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 58
2022-01-19 20:36:28,830 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,830 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2022-01-19 20:36:28,830 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2022-01-19 20:36:28,830 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,830 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2022-01-19 20:36:28,831 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2022-01-19 20:36:28,831 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,831 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 68
2022-01-19 20:36:28,831 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,831 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2022-01-19 20:36:28,831 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2022-01-19 20:36:28,831 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2022-01-19 20:36:28,831 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2022-01-19 20:36:28,831 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2022-01-19 20:36:28,832 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 70
2022-01-19 20:36:28,832 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,832 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi70.1
2022-01-19 20:36:28,832 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,832 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2022-01-19 20:36:28,832 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2022-01-19 20:36:28,832 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,832 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2022-01-19 20:36:28,833 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2022-01-19 20:36:28,833 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 82
2022-01-19 20:36:28,833 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,833 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx)
2022-01-19 20:36:28,833 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2022-01-19 20:36:28,833 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 90
2022-01-19 20:36:28,833 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,833 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v < min_value
2022-01-19 20:36:28,833 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,834 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2022-01-19 20:36:28,834 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2022-01-19 20:36:28,834 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 98
2022-01-19 20:36:28,834 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,834 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,834 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = idx
2022-01-19 20:36:28,834 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2022-01-19 20:36:28,834 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 106
2022-01-19 20:36:28,834 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,835 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2022-01-19 20:36:28,835 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:28,835 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $110inplace_add.3
2022-01-19 20:36:28,835 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,835 [2544] DEBUG    numba.core.ssa:149: [JupyterRequire] ==== SSA block analysis pass on 116
2022-01-19 20:36:28,835 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._GatherDefsHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,835 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx)
2022-01-19 20:36:28,835 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2022-01-19 20:36:28,836 [2544] DEBUG    numba.core.ssa:141: [JupyterRequire] defs defaultdict(<class 'list'>,
            {'$10pred': [<numba.core.ir.Assign object at 0x00000209C33F56A0>],
             '$110inplace_add.3': [<numba.core.ir.Assign object at 0x00000209C35B7280>],
             '$118return_value.1': [<numba.core.ir.Assign object at 0x00000209C35B3460>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x00000209C33F53D0>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x00000209C33F5880>],
             '$22load_attr.1': [<numba.core.ir.Assign object at 0x00000209C33F5C70>],
             '$24get_iter.2': [<numba.core.ir.Assign object at 0x00000209C33F5DF0>],
             '$26for_iter.1': [<numba.core.ir.Assign object at 0x00000209C35EF190>],
             '$26for_iter.2': [<numba.core.ir.Assign object at 0x00000209C35EF2B0>],
             '$26for_iter.3': [<numba.core.ir.Assign object at 0x00000209C35EF3D0>],
             '$44load_global.0': [<numba.core.ir.Assign object at 0x00000209C35EFDF0>],
             '$46load_method.1': [<numba.core.ir.Assign object at 0x00000209C35EFF70>],
             '$4load_attr.1': [<numba.core.ir.Assign object at 0x00000209C378D8B0>],
             '$50call_method.3': [<numba.core.ir.Assign object at 0x00000209C35C8280>],
             '$52pred': [<numba.core.ir.Assign object at 0x00000209C35C84F0>],
             '$56return_value.1': [<numba.core.ir.Assign object at 0x00000209C35C8850>],
             '$64load_attr.2': [<numba.core.ir.Assign object at 0x00000209C35C8E50>],
             '$66get_iter.3': [<numba.core.ir.Assign object at 0x00000209C35C8FD0>],
             '$68for_iter.1': [<numba.core.ir.Assign object at 0x00000209C33D79A0>],
             '$68for_iter.2': [<numba.core.ir.Assign object at 0x00000209C37D61C0>],
             '$68for_iter.3': [<numba.core.ir.Assign object at 0x00000209C35C71C0>],
             '$72load_global.2': [<numba.core.ir.Assign object at 0x00000209C35C7580>],
             '$74load_method.3': [<numba.core.ir.Assign object at 0x00000209C35C7700>],
             '$78call_method.5': [<numba.core.ir.Assign object at 0x00000209C35C79D0>],
             '$80pred': [<numba.core.ir.Assign object at 0x00000209C35C7C40>],
             '$88return_value.2': [<numba.core.ir.Assign object at 0x00000209C35C7FA0>],
             '$8compare_op.3': [<numba.core.ir.Assign object at 0x00000209C33F52E0>],
             '$94compare_op.3': [<numba.core.ir.Assign object at 0x00000209C35B75E0>],
             '$96pred': [<numba.core.ir.Assign object at 0x00000209C35B7910>],
             '$const108.2': [<numba.core.ir.Assign object at 0x00000209C35B7C40>],
             '$const14.1': [<numba.core.ir.Assign object at 0x00000209C33F5070>],
             '$const34.3': [<numba.core.ir.Assign object at 0x00000209C35EFA30>],
             '$const58.0': [<numba.core.ir.Assign object at 0x00000209C35C8A90>],
             '$const6.2': [<numba.core.ir.Assign object at 0x00000209C3528970>],
             '$phi26.0': [<numba.core.ir.Assign object at 0x00000209C33F55B0>],
             '$phi28.1': [<numba.core.ir.Assign object at 0x00000209C35EF0A0>],
             '$phi68.0': [<numba.core.ir.Assign object at 0x00000209C35C85E0>],
             '$phi70.1': [<numba.core.ir.Assign object at 0x00000209C33D77F0>],
             'arry': [<numba.core.ir.Assign object at 0x00000209C3772F10>],
             'bool10': [<numba.core.ir.Assign object at 0x00000209C33F5310>],
             'bool52': [<numba.core.ir.Assign object at 0x00000209C35C83D0>],
             'bool80': [<numba.core.ir.Assign object at 0x00000209C35C7B20>],
             'bool96': [<numba.core.ir.Assign object at 0x00000209C35B7730>],
             'idx': [<numba.core.ir.Assign object at 0x00000209C35C8BB0>,
                     <numba.core.ir.Assign object at 0x00000209C35B30A0>],
             'min_idx': [<numba.core.ir.Assign object at 0x00000209C35EFB50>,
                         <numba.core.ir.Assign object at 0x00000209C35B7D00>],
             'min_value': [<numba.core.ir.Assign object at 0x00000209C35EF8B0>,
                           <numba.core.ir.Assign object at 0x00000209C35B7B20>],
             'v': [<numba.core.ir.Assign object at 0x00000209C35EF670>,
                   <numba.core.ir.Assign object at 0x00000209C35C7400>]})
2022-01-19 20:36:28,836 [2544] DEBUG    numba.core.ssa:143: [JupyterRequire] SSA violators {'idx', 'min_idx', 'v', 'min_value'}
2022-01-19 20:36:28,837 [2544] DEBUG    numba.core.ssa:49: [JupyterRequire] Fix SSA violator on var idx
2022-01-19 20:36:28,837 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2022-01-19 20:36:28,837 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,837 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2022-01-19 20:36:28,837 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2022-01-19 20:36:28,837 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2022-01-19 20:36:28,837 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2022-01-19 20:36:28,837 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,838 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2022-01-19 20:36:28,838 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2022-01-19 20:36:28,838 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2022-01-19 20:36:28,838 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,838 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2022-01-19 20:36:28,838 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2022-01-19 20:36:28,838 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2022-01-19 20:36:28,838 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2022-01-19 20:36:28,839 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2022-01-19 20:36:28,839 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,839 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,839 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2022-01-19 20:36:28,839 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2022-01-19 20:36:28,839 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2022-01-19 20:36:28,839 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2022-01-19 20:36:28,839 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,839 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2022-01-19 20:36:28,840 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2022-01-19 20:36:28,840 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2022-01-19 20:36:28,840 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2022-01-19 20:36:28,840 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2022-01-19 20:36:28,840 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2022-01-19 20:36:28,840 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,840 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2022-01-19 20:36:28,840 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,840 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2022-01-19 20:36:28,841 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2022-01-19 20:36:28,841 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2022-01-19 20:36:28,841 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2022-01-19 20:36:28,841 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,841 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,841 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2022-01-19 20:36:28,841 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None)
2022-01-19 20:36:28,841 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,842 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2022-01-19 20:36:28,842 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2022-01-19 20:36:28,842 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2022-01-19 20:36:28,842 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,842 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx)
2022-01-19 20:36:28,842 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2022-01-19 20:36:28,842 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2022-01-19 20:36:28,842 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,842 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2022-01-19 20:36:28,843 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2022-01-19 20:36:28,843 [2544] DEBUG    numba.core.ssa:256: [JupyterRequire] first assign: idx
2022-01-19 20:36:28,843 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: idx = $const58.0
2022-01-19 20:36:28,843 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,843 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2022-01-19 20:36:28,843 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2022-01-19 20:36:28,843 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,843 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2022-01-19 20:36:28,843 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,844 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2022-01-19 20:36:28,844 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2022-01-19 20:36:28,844 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2022-01-19 20:36:28,844 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2022-01-19 20:36:28,844 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2022-01-19 20:36:28,844 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2022-01-19 20:36:28,844 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,844 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi70.1
2022-01-19 20:36:28,844 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,845 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2022-01-19 20:36:28,845 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2022-01-19 20:36:28,845 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,845 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2022-01-19 20:36:28,845 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2022-01-19 20:36:28,845 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2022-01-19 20:36:28,845 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,845 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx)
2022-01-19 20:36:28,846 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2022-01-19 20:36:28,846 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2022-01-19 20:36:28,846 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,846 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v < min_value
2022-01-19 20:36:28,846 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,846 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2022-01-19 20:36:28,846 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2022-01-19 20:36:28,846 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2022-01-19 20:36:28,847 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,847 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,847 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = idx
2022-01-19 20:36:28,847 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2022-01-19 20:36:28,847 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2022-01-19 20:36:28,847 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,847 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2022-01-19 20:36:28,847 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:28,847 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $110inplace_add.3
2022-01-19 20:36:28,848 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: idx.1 = $110inplace_add.3
2022-01-19 20:36:28,848 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,848 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2022-01-19 20:36:28,848 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428AF0>
2022-01-19 20:36:28,848 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx)
2022-01-19 20:36:28,848 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2022-01-19 20:36:28,848 [2544] DEBUG    numba.core.ssa:55: [JupyterRequire] Replaced assignments: defaultdict(<class 'list'>,
            {58: [<numba.core.ir.Assign object at 0x00000209C35B3AC0>],
             106: [<numba.core.ir.Assign object at 0x00000209C35B3220>]})
2022-01-19 20:36:28,849 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2022-01-19 20:36:28,849 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,849 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2022-01-19 20:36:28,849 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2022-01-19 20:36:28,849 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2022-01-19 20:36:28,849 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2022-01-19 20:36:28,849 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,850 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2022-01-19 20:36:28,850 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2022-01-19 20:36:28,850 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2022-01-19 20:36:28,850 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,850 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2022-01-19 20:36:28,850 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2022-01-19 20:36:28,850 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2022-01-19 20:36:28,851 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2022-01-19 20:36:28,851 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2022-01-19 20:36:28,851 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,851 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,851 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2022-01-19 20:36:28,851 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2022-01-19 20:36:28,851 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2022-01-19 20:36:28,851 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2022-01-19 20:36:28,852 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,852 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2022-01-19 20:36:28,852 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2022-01-19 20:36:28,852 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2022-01-19 20:36:28,852 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2022-01-19 20:36:28,852 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2022-01-19 20:36:28,852 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2022-01-19 20:36:28,852 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,853 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2022-01-19 20:36:28,853 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,853 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2022-01-19 20:36:28,853 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2022-01-19 20:36:28,853 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2022-01-19 20:36:28,853 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2022-01-19 20:36:28,854 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,854 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,855 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2022-01-19 20:36:28,855 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None)
2022-01-19 20:36:28,856 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,856 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2022-01-19 20:36:28,856 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2022-01-19 20:36:28,856 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2022-01-19 20:36:28,857 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,857 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx)
2022-01-19 20:36:28,857 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2022-01-19 20:36:28,857 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2022-01-19 20:36:28,857 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,857 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2022-01-19 20:36:28,857 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2022-01-19 20:36:28,857 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,857 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2022-01-19 20:36:28,858 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2022-01-19 20:36:28,858 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,858 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2022-01-19 20:36:28,858 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,858 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2022-01-19 20:36:28,858 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2022-01-19 20:36:28,858 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2022-01-19 20:36:28,858 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2022-01-19 20:36:28,859 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2022-01-19 20:36:28,859 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2022-01-19 20:36:28,859 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,859 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi70.1
2022-01-19 20:36:28,859 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,859 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2022-01-19 20:36:28,859 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2022-01-19 20:36:28,859 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,860 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2022-01-19 20:36:28,860 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2022-01-19 20:36:28,860 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2022-01-19 20:36:28,860 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,860 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx)
2022-01-19 20:36:28,860 [2544] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='idx' stmt=$88return_value.2 = cast(value=idx)
2022-01-19 20:36:28,860 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 82
2022-01-19 20:36:28,860 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 82
2022-01-19 20:36:28,861 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2022-01-19 20:36:28,861 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 70
2022-01-19 20:36:28,861 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 68 from label 70
2022-01-19 20:36:28,861 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 68
2022-01-19 20:36:28,861 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 68
2022-01-19 20:36:28,861 [2544] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node idx.2 = phi(incoming_values=[], incoming_blocks=[]) at 68
2022-01-19 20:36:28,861 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 58
2022-01-19 20:36:28,861 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def idx = $const58.0
2022-01-19 20:36:28,861 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 106
2022-01-19 20:36:28,862 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def idx.1 = $110inplace_add.3
2022-01-19 20:36:28,862 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $88return_value.2 = cast(value=idx.2)
2022-01-19 20:36:28,862 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2022-01-19 20:36:28,862 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2022-01-19 20:36:28,862 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,862 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v < min_value
2022-01-19 20:36:28,862 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,862 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2022-01-19 20:36:28,863 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2022-01-19 20:36:28,863 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2022-01-19 20:36:28,863 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,863 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,863 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = idx
2022-01-19 20:36:28,863 [2544] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='idx' stmt=min_idx = idx
2022-01-19 20:36:28,863 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 98
2022-01-19 20:36:28,863 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 90 from label 98
2022-01-19 20:36:28,864 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 90
2022-01-19 20:36:28,864 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 90
2022-01-19 20:36:28,864 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 90
2022-01-19 20:36:28,864 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2022-01-19 20:36:28,864 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 70
2022-01-19 20:36:28,864 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 68 from label 70
2022-01-19 20:36:28,864 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 68
2022-01-19 20:36:28,864 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: min_idx = idx.2
2022-01-19 20:36:28,864 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2022-01-19 20:36:28,864 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2022-01-19 20:36:28,865 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,865 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2022-01-19 20:36:28,865 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:28,865 [2544] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='idx' stmt=$110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:28,865 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 106
2022-01-19 20:36:28,865 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 90 from label 106
2022-01-19 20:36:28,865 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 90
2022-01-19 20:36:28,865 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 90
2022-01-19 20:36:28,865 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 90
2022-01-19 20:36:28,866 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2022-01-19 20:36:28,866 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 70
2022-01-19 20:36:28,866 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 68 from label 70
2022-01-19 20:36:28,866 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 68
2022-01-19 20:36:28,866 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:28,866 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx.1 = $110inplace_add.3
2022-01-19 20:36:28,866 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,866 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2022-01-19 20:36:28,867 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C35B3D90>
2022-01-19 20:36:28,867 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx)
2022-01-19 20:36:28,867 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2022-01-19 20:36:28,867 [2544] DEBUG    numba.core.ssa:49: [JupyterRequire] Fix SSA violator on var min_idx
2022-01-19 20:36:28,867 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2022-01-19 20:36:28,867 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,867 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2022-01-19 20:36:28,867 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2022-01-19 20:36:28,868 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2022-01-19 20:36:28,868 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2022-01-19 20:36:28,868 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,868 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2022-01-19 20:36:28,868 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2022-01-19 20:36:28,868 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2022-01-19 20:36:28,868 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,868 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2022-01-19 20:36:28,869 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2022-01-19 20:36:28,869 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2022-01-19 20:36:28,869 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2022-01-19 20:36:28,869 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2022-01-19 20:36:28,869 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,869 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,869 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2022-01-19 20:36:28,869 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2022-01-19 20:36:28,869 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2022-01-19 20:36:28,870 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2022-01-19 20:36:28,870 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,870 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2022-01-19 20:36:28,870 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2022-01-19 20:36:28,870 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2022-01-19 20:36:28,870 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2022-01-19 20:36:28,870 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2022-01-19 20:36:28,870 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2022-01-19 20:36:28,870 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,871 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2022-01-19 20:36:28,871 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,871 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2022-01-19 20:36:28,871 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2022-01-19 20:36:28,871 [2544] DEBUG    numba.core.ssa:256: [JupyterRequire] first assign: min_idx
2022-01-19 20:36:28,871 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: min_idx = $const34.3
2022-01-19 20:36:28,871 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2022-01-19 20:36:28,871 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2022-01-19 20:36:28,871 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,872 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,872 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2022-01-19 20:36:28,872 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None)
2022-01-19 20:36:28,872 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,872 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2022-01-19 20:36:28,872 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2022-01-19 20:36:28,872 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2022-01-19 20:36:28,872 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,873 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx)
2022-01-19 20:36:28,873 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2022-01-19 20:36:28,873 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2022-01-19 20:36:28,873 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,873 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2022-01-19 20:36:28,873 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2022-01-19 20:36:28,873 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,873 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2022-01-19 20:36:28,873 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2022-01-19 20:36:28,874 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,874 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2022-01-19 20:36:28,874 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,874 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx.2 = phi(incoming_values=[Var(idx, arraymath.py:673), Var(idx.1, arraymath.py:680)], incoming_blocks=[58, 106])
2022-01-19 20:36:28,874 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2022-01-19 20:36:28,874 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2022-01-19 20:36:28,874 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2022-01-19 20:36:28,874 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2022-01-19 20:36:28,875 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2022-01-19 20:36:28,875 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2022-01-19 20:36:28,875 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,875 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi70.1
2022-01-19 20:36:28,875 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,875 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2022-01-19 20:36:28,875 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2022-01-19 20:36:28,875 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,875 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2022-01-19 20:36:28,876 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2022-01-19 20:36:28,876 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2022-01-19 20:36:28,876 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,876 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx.2)
2022-01-19 20:36:28,876 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2022-01-19 20:36:28,876 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2022-01-19 20:36:28,876 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,876 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v < min_value
2022-01-19 20:36:28,876 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,877 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2022-01-19 20:36:28,877 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2022-01-19 20:36:28,877 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2022-01-19 20:36:28,877 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,877 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,877 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = idx.2
2022-01-19 20:36:28,877 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: min_idx.1 = idx.2
2022-01-19 20:36:28,877 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2022-01-19 20:36:28,878 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2022-01-19 20:36:28,878 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,878 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2022-01-19 20:36:28,878 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:28,878 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx.1 = $110inplace_add.3
2022-01-19 20:36:28,878 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,878 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2022-01-19 20:36:28,878 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C35B3DC0>
2022-01-19 20:36:28,878 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx)
2022-01-19 20:36:28,879 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2022-01-19 20:36:28,879 [2544] DEBUG    numba.core.ssa:55: [JupyterRequire] Replaced assignments: defaultdict(<class 'list'>,
            {28: [<numba.core.ir.Assign object at 0x00000209C35B3700>],
             98: [<numba.core.ir.Assign object at 0x00000209C355F850>]})
2022-01-19 20:36:28,879 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2022-01-19 20:36:28,879 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,879 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2022-01-19 20:36:28,879 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2022-01-19 20:36:28,880 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2022-01-19 20:36:28,880 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2022-01-19 20:36:28,880 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,880 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2022-01-19 20:36:28,880 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2022-01-19 20:36:28,880 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2022-01-19 20:36:28,880 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,880 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2022-01-19 20:36:28,881 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2022-01-19 20:36:28,881 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2022-01-19 20:36:28,881 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2022-01-19 20:36:28,881 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2022-01-19 20:36:28,881 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,881 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,881 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2022-01-19 20:36:28,881 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2022-01-19 20:36:28,882 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2022-01-19 20:36:28,882 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2022-01-19 20:36:28,882 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,882 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2022-01-19 20:36:28,882 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2022-01-19 20:36:28,882 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2022-01-19 20:36:28,882 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2022-01-19 20:36:28,882 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2022-01-19 20:36:28,883 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2022-01-19 20:36:28,883 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,883 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2022-01-19 20:36:28,883 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,883 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2022-01-19 20:36:28,883 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2022-01-19 20:36:28,883 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2022-01-19 20:36:28,883 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2022-01-19 20:36:28,883 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,884 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,884 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2022-01-19 20:36:28,884 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None)
2022-01-19 20:36:28,884 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,884 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2022-01-19 20:36:28,884 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2022-01-19 20:36:28,884 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2022-01-19 20:36:28,884 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,885 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx)
2022-01-19 20:36:28,885 [2544] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='min_idx' stmt=$56return_value.1 = cast(value=min_idx)
2022-01-19 20:36:28,885 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 54
2022-01-19 20:36:28,885 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 44 from label 54
2022-01-19 20:36:28,885 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 44
2022-01-19 20:36:28,885 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 44
2022-01-19 20:36:28,885 [2544] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node min_idx.2 = phi(incoming_values=[], incoming_blocks=[]) at 44
2022-01-19 20:36:28,885 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 26
2022-01-19 20:36:28,885 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 26
2022-01-19 20:36:28,886 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 20 from label 26
2022-01-19 20:36:28,886 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 20
2022-01-19 20:36:28,886 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 20
2022-01-19 20:36:28,886 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 0 from label 20
2022-01-19 20:36:28,886 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 0
2022-01-19 20:36:28,886 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 0
2022-01-19 20:36:28,886 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def <class 'numba.core.ssa.UndefinedVariable'>
2022-01-19 20:36:28,886 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 28
2022-01-19 20:36:28,887 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_idx = $const34.3
2022-01-19 20:36:28,887 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $56return_value.1 = cast(value=min_idx.2)
2022-01-19 20:36:28,887 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2022-01-19 20:36:28,887 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2022-01-19 20:36:28,887 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,887 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2022-01-19 20:36:28,887 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2022-01-19 20:36:28,887 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,888 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2022-01-19 20:36:28,888 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2022-01-19 20:36:28,888 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,888 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2022-01-19 20:36:28,888 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,888 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx.2 = phi(incoming_values=[Var(idx, arraymath.py:673), Var(idx.1, arraymath.py:680)], incoming_blocks=[58, 106])
2022-01-19 20:36:28,888 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2022-01-19 20:36:28,888 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2022-01-19 20:36:28,888 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2022-01-19 20:36:28,889 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2022-01-19 20:36:28,889 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2022-01-19 20:36:28,889 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2022-01-19 20:36:28,889 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,889 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi70.1
2022-01-19 20:36:28,889 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,889 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2022-01-19 20:36:28,889 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2022-01-19 20:36:28,890 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,890 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2022-01-19 20:36:28,890 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2022-01-19 20:36:28,890 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2022-01-19 20:36:28,890 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,890 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx.2)
2022-01-19 20:36:28,890 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2022-01-19 20:36:28,890 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2022-01-19 20:36:28,891 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,891 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v < min_value
2022-01-19 20:36:28,891 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,891 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2022-01-19 20:36:28,891 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2022-01-19 20:36:28,891 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2022-01-19 20:36:28,891 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,891 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,891 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.1 = idx.2
2022-01-19 20:36:28,892 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2022-01-19 20:36:28,892 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2022-01-19 20:36:28,892 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,892 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2022-01-19 20:36:28,892 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:28,892 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx.1 = $110inplace_add.3
2022-01-19 20:36:28,892 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,892 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2022-01-19 20:36:28,893 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33CA7C0>
2022-01-19 20:36:28,893 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx)
2022-01-19 20:36:28,893 [2544] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='min_idx' stmt=$118return_value.1 = cast(value=min_idx)
2022-01-19 20:36:28,893 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 116
2022-01-19 20:36:28,893 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 68 from label 116
2022-01-19 20:36:28,893 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 68
2022-01-19 20:36:28,893 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 68
2022-01-19 20:36:28,893 [2544] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node min_idx.3 = phi(incoming_values=[], incoming_blocks=[]) at 68
2022-01-19 20:36:28,893 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 58
2022-01-19 20:36:28,894 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 58
2022-01-19 20:36:28,894 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 44 from label 58
2022-01-19 20:36:28,894 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 44
2022-01-19 20:36:28,894 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_idx.2 = phi(incoming_values=[Undefined, Var(min_idx, arraymath.py:668)], incoming_blocks=[26, 28])
2022-01-19 20:36:28,894 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 106
2022-01-19 20:36:28,894 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 106
2022-01-19 20:36:28,894 [2544] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node min_idx.4 = phi(incoming_values=[], incoming_blocks=[]) at 106
2022-01-19 20:36:28,894 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 90
2022-01-19 20:36:28,894 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 90
2022-01-19 20:36:28,895 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 90
2022-01-19 20:36:28,895 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2022-01-19 20:36:28,895 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 70
2022-01-19 20:36:28,895 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 68 from label 70
2022-01-19 20:36:28,895 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 68
2022-01-19 20:36:28,895 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_idx.3 = phi(incoming_values=[Var(min_idx.2, arraymath.py:671)], incoming_blocks=[58])
2022-01-19 20:36:28,895 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 98
2022-01-19 20:36:28,895 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_idx.1 = idx.2
2022-01-19 20:36:28,896 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_idx.4 = phi(incoming_values=[Var(min_idx.3, arraymath.py:681), Var(min_idx.1, arraymath.py:679)], incoming_blocks=[90, 98])
2022-01-19 20:36:28,896 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $118return_value.1 = cast(value=min_idx.3)
2022-01-19 20:36:28,896 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2022-01-19 20:36:28,896 [2544] DEBUG    numba.core.ssa:49: [JupyterRequire] Fix SSA violator on var v
2022-01-19 20:36:28,896 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2022-01-19 20:36:28,896 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,896 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2022-01-19 20:36:28,896 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2022-01-19 20:36:28,896 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2022-01-19 20:36:28,897 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2022-01-19 20:36:28,897 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,897 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2022-01-19 20:36:28,897 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2022-01-19 20:36:28,897 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2022-01-19 20:36:28,897 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,897 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2022-01-19 20:36:28,897 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2022-01-19 20:36:28,898 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2022-01-19 20:36:28,898 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2022-01-19 20:36:28,898 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2022-01-19 20:36:28,898 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,898 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,898 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2022-01-19 20:36:28,898 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2022-01-19 20:36:28,898 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2022-01-19 20:36:28,899 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2022-01-19 20:36:28,899 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,899 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2022-01-19 20:36:28,899 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2022-01-19 20:36:28,899 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2022-01-19 20:36:28,899 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2022-01-19 20:36:28,899 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2022-01-19 20:36:28,899 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2022-01-19 20:36:28,900 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,900 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2022-01-19 20:36:28,900 [2544] DEBUG    numba.core.ssa:256: [JupyterRequire] first assign: v
2022-01-19 20:36:28,900 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: v = $phi28.1
2022-01-19 20:36:28,900 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,900 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2022-01-19 20:36:28,901 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2022-01-19 20:36:28,901 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2022-01-19 20:36:28,901 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2022-01-19 20:36:28,901 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,901 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.2 = phi(incoming_values=[Undefined, Var(min_idx, arraymath.py:668)], incoming_blocks=[26, 28])
2022-01-19 20:36:28,901 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,902 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2022-01-19 20:36:28,902 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None)
2022-01-19 20:36:28,902 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,902 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2022-01-19 20:36:28,902 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2022-01-19 20:36:28,902 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2022-01-19 20:36:28,903 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,903 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx.2)
2022-01-19 20:36:28,903 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2022-01-19 20:36:28,903 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2022-01-19 20:36:28,903 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,903 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2022-01-19 20:36:28,903 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2022-01-19 20:36:28,903 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,903 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2022-01-19 20:36:28,904 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2022-01-19 20:36:28,904 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,904 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2022-01-19 20:36:28,904 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,904 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.3 = phi(incoming_values=[Var(min_idx.2, arraymath.py:671), Var(min_idx.4, arraymath.py:681)], incoming_blocks=[58, 106])
2022-01-19 20:36:28,904 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx.2 = phi(incoming_values=[Var(idx, arraymath.py:673), Var(idx.1, arraymath.py:680)], incoming_blocks=[58, 106])
2022-01-19 20:36:28,904 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2022-01-19 20:36:28,904 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2022-01-19 20:36:28,905 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2022-01-19 20:36:28,905 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2022-01-19 20:36:28,905 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2022-01-19 20:36:28,905 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2022-01-19 20:36:28,905 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,905 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi70.1
2022-01-19 20:36:28,905 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: v.1 = $phi70.1
2022-01-19 20:36:28,905 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,905 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2022-01-19 20:36:28,906 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2022-01-19 20:36:28,906 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,906 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2022-01-19 20:36:28,906 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2022-01-19 20:36:28,906 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2022-01-19 20:36:28,906 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,906 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx.2)
2022-01-19 20:36:28,907 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2022-01-19 20:36:28,907 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2022-01-19 20:36:28,907 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,907 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v < min_value
2022-01-19 20:36:28,907 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,907 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2022-01-19 20:36:28,907 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2022-01-19 20:36:28,907 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2022-01-19 20:36:28,907 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,908 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,908 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.1 = idx.2
2022-01-19 20:36:28,908 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2022-01-19 20:36:28,908 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2022-01-19 20:36:28,908 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,908 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.4 = phi(incoming_values=[Var(min_idx.3, arraymath.py:681), Var(min_idx.1, arraymath.py:679)], incoming_blocks=[90, 98])
2022-01-19 20:36:28,908 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2022-01-19 20:36:28,908 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:28,908 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx.1 = $110inplace_add.3
2022-01-19 20:36:28,909 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,909 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2022-01-19 20:36:28,909 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3428A00>
2022-01-19 20:36:28,909 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx.3)
2022-01-19 20:36:28,909 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2022-01-19 20:36:28,909 [2544] DEBUG    numba.core.ssa:55: [JupyterRequire] Replaced assignments: defaultdict(<class 'list'>,
            {28: [<numba.core.ir.Assign object at 0x00000209C35B3730>],
             70: [<numba.core.ir.Assign object at 0x00000209C35B39D0>]})
2022-01-19 20:36:28,910 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2022-01-19 20:36:28,910 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,910 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2022-01-19 20:36:28,910 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2022-01-19 20:36:28,910 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2022-01-19 20:36:28,910 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2022-01-19 20:36:28,910 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,911 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2022-01-19 20:36:28,911 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2022-01-19 20:36:28,911 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2022-01-19 20:36:28,911 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,912 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2022-01-19 20:36:28,912 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2022-01-19 20:36:28,912 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2022-01-19 20:36:28,912 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2022-01-19 20:36:28,912 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2022-01-19 20:36:28,912 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,912 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,913 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2022-01-19 20:36:28,913 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2022-01-19 20:36:28,913 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2022-01-19 20:36:28,913 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2022-01-19 20:36:28,913 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,913 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2022-01-19 20:36:28,913 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2022-01-19 20:36:28,913 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2022-01-19 20:36:28,913 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2022-01-19 20:36:28,914 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2022-01-19 20:36:28,914 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2022-01-19 20:36:28,914 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,914 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2022-01-19 20:36:28,914 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,914 [2544] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='v' stmt=min_value = v
2022-01-19 20:36:28,914 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2022-01-19 20:36:28,915 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2022-01-19 20:36:28,915 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2022-01-19 20:36:28,915 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2022-01-19 20:36:28,915 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,915 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.2 = phi(incoming_values=[Undefined, Var(min_idx, arraymath.py:668)], incoming_blocks=[26, 28])
2022-01-19 20:36:28,915 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,915 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2022-01-19 20:36:28,915 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None)
2022-01-19 20:36:28,916 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,916 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2022-01-19 20:36:28,916 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2022-01-19 20:36:28,916 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2022-01-19 20:36:28,916 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,916 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx.2)
2022-01-19 20:36:28,916 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2022-01-19 20:36:28,916 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2022-01-19 20:36:28,917 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,917 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2022-01-19 20:36:28,917 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2022-01-19 20:36:28,917 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,917 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2022-01-19 20:36:28,917 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2022-01-19 20:36:28,917 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,917 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2022-01-19 20:36:28,918 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,918 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.3 = phi(incoming_values=[Var(min_idx.2, arraymath.py:671), Var(min_idx.4, arraymath.py:681)], incoming_blocks=[58, 106])
2022-01-19 20:36:28,918 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx.2 = phi(incoming_values=[Var(idx, arraymath.py:673), Var(idx.1, arraymath.py:680)], incoming_blocks=[58, 106])
2022-01-19 20:36:28,918 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2022-01-19 20:36:28,918 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2022-01-19 20:36:28,918 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2022-01-19 20:36:28,918 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2022-01-19 20:36:28,918 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2022-01-19 20:36:28,918 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2022-01-19 20:36:28,919 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,919 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v.1 = $phi70.1
2022-01-19 20:36:28,919 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,919 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2022-01-19 20:36:28,919 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2022-01-19 20:36:28,919 [2544] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='v' stmt=$78call_method.5 = call $74load_method.3(v, func=$74load_method.3, args=[Var(v, arraymath.py:666)], kws=(), vararg=None)
2022-01-19 20:36:28,919 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $78call_method.5 = call $74load_method.3(v.1, func=$74load_method.3, args=[Var(v.1, arraymath.py:674)], kws=(), vararg=None)
2022-01-19 20:36:28,920 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,920 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2022-01-19 20:36:28,920 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2022-01-19 20:36:28,920 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2022-01-19 20:36:28,920 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,920 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx.2)
2022-01-19 20:36:28,920 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2022-01-19 20:36:28,920 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2022-01-19 20:36:28,921 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,921 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v < min_value
2022-01-19 20:36:28,921 [2544] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='v' stmt=$94compare_op.3 = v < min_value
2022-01-19 20:36:28,921 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 90
2022-01-19 20:36:28,921 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 90
2022-01-19 20:36:28,921 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2022-01-19 20:36:28,921 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $94compare_op.3 = v.1 < min_value
2022-01-19 20:36:28,921 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,921 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2022-01-19 20:36:28,922 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2022-01-19 20:36:28,922 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2022-01-19 20:36:28,922 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,922 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,922 [2544] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='v' stmt=min_value = v
2022-01-19 20:36:28,922 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 98
2022-01-19 20:36:28,922 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 90 from label 98
2022-01-19 20:36:28,922 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 90
2022-01-19 20:36:28,923 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 90
2022-01-19 20:36:28,923 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 90
2022-01-19 20:36:28,923 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2022-01-19 20:36:28,923 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: min_value = v.1
2022-01-19 20:36:28,923 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.1 = idx.2
2022-01-19 20:36:28,923 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2022-01-19 20:36:28,923 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2022-01-19 20:36:28,923 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,923 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.4 = phi(incoming_values=[Var(min_idx.3, arraymath.py:681), Var(min_idx.1, arraymath.py:679)], incoming_blocks=[90, 98])
2022-01-19 20:36:28,924 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2022-01-19 20:36:28,924 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:28,924 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx.1 = $110inplace_add.3
2022-01-19 20:36:28,924 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,924 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2022-01-19 20:36:28,924 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C3419850>
2022-01-19 20:36:28,924 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx.3)
2022-01-19 20:36:28,924 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2022-01-19 20:36:28,925 [2544] DEBUG    numba.core.ssa:49: [JupyterRequire] Fix SSA violator on var min_value
2022-01-19 20:36:28,925 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2022-01-19 20:36:28,925 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,925 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2022-01-19 20:36:28,925 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2022-01-19 20:36:28,925 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2022-01-19 20:36:28,925 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2022-01-19 20:36:28,925 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,926 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2022-01-19 20:36:28,926 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2022-01-19 20:36:28,926 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2022-01-19 20:36:28,926 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,926 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2022-01-19 20:36:28,926 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2022-01-19 20:36:28,926 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2022-01-19 20:36:28,926 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2022-01-19 20:36:28,926 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2022-01-19 20:36:28,927 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,927 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,927 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2022-01-19 20:36:28,927 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2022-01-19 20:36:28,927 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2022-01-19 20:36:28,927 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2022-01-19 20:36:28,927 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,927 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2022-01-19 20:36:28,927 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2022-01-19 20:36:28,928 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2022-01-19 20:36:28,928 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2022-01-19 20:36:28,928 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2022-01-19 20:36:28,928 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2022-01-19 20:36:28,928 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,928 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2022-01-19 20:36:28,928 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,928 [2544] DEBUG    numba.core.ssa:256: [JupyterRequire] first assign: min_value
2022-01-19 20:36:28,929 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: min_value = v
2022-01-19 20:36:28,929 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2022-01-19 20:36:28,929 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2022-01-19 20:36:28,929 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2022-01-19 20:36:28,929 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2022-01-19 20:36:28,929 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,929 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.2 = phi(incoming_values=[Undefined, Var(min_idx, arraymath.py:668)], incoming_blocks=[26, 28])
2022-01-19 20:36:28,929 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,929 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2022-01-19 20:36:28,930 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None)
2022-01-19 20:36:28,930 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,930 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2022-01-19 20:36:28,930 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2022-01-19 20:36:28,930 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2022-01-19 20:36:28,930 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,930 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx.2)
2022-01-19 20:36:28,930 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2022-01-19 20:36:28,931 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2022-01-19 20:36:28,931 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,931 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2022-01-19 20:36:28,931 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2022-01-19 20:36:28,931 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,931 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2022-01-19 20:36:28,931 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2022-01-19 20:36:28,931 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,931 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2022-01-19 20:36:28,932 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,932 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.3 = phi(incoming_values=[Var(min_idx.2, arraymath.py:671), Var(min_idx.4, arraymath.py:681)], incoming_blocks=[58, 106])
2022-01-19 20:36:28,932 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx.2 = phi(incoming_values=[Var(idx, arraymath.py:673), Var(idx.1, arraymath.py:680)], incoming_blocks=[58, 106])
2022-01-19 20:36:28,932 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2022-01-19 20:36:28,932 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2022-01-19 20:36:28,932 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2022-01-19 20:36:28,932 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2022-01-19 20:36:28,932 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2022-01-19 20:36:28,933 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2022-01-19 20:36:28,933 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,933 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v.1 = $phi70.1
2022-01-19 20:36:28,933 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,933 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2022-01-19 20:36:28,933 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v.1, func=$74load_method.3, args=[Var(v.1, arraymath.py:674)], kws=(), vararg=None)
2022-01-19 20:36:28,933 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,933 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2022-01-19 20:36:28,933 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2022-01-19 20:36:28,934 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2022-01-19 20:36:28,934 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,934 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx.2)
2022-01-19 20:36:28,934 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2022-01-19 20:36:28,934 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2022-01-19 20:36:28,934 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,934 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v.1 < min_value
2022-01-19 20:36:28,934 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,934 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2022-01-19 20:36:28,935 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2022-01-19 20:36:28,935 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2022-01-19 20:36:28,935 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,935 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v.1
2022-01-19 20:36:28,935 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: min_value.1 = v.1
2022-01-19 20:36:28,935 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.1 = idx.2
2022-01-19 20:36:28,935 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2022-01-19 20:36:28,935 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2022-01-19 20:36:28,936 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,936 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.4 = phi(incoming_values=[Var(min_idx.3, arraymath.py:681), Var(min_idx.1, arraymath.py:679)], incoming_blocks=[90, 98])
2022-01-19 20:36:28,936 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2022-01-19 20:36:28,936 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:28,936 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx.1 = $110inplace_add.3
2022-01-19 20:36:28,936 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,936 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2022-01-19 20:36:28,936 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FreshVarHandler object at 0x00000209C3419790>
2022-01-19 20:36:28,937 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx.3)
2022-01-19 20:36:28,937 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2022-01-19 20:36:28,937 [2544] DEBUG    numba.core.ssa:55: [JupyterRequire] Replaced assignments: defaultdict(<class 'list'>,
            {28: [<numba.core.ir.Assign object at 0x00000209C354F5B0>],
             98: [<numba.core.ir.Assign object at 0x00000209C354FC10>]})
2022-01-19 20:36:28,937 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 0
2022-01-19 20:36:28,937 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,937 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: arry = arg(0, name=arry)
2022-01-19 20:36:28,937 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $4load_attr.1 = getattr(value=arry, attr=size)
2022-01-19 20:36:28,938 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const6.2 = const(int, 0)
2022-01-19 20:36:28,938 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $8compare_op.3 = $4load_attr.1 == $const6.2
2022-01-19 20:36:28,938 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool10 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,938 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $10pred = call bool10($8compare_op.3, func=bool10, args=(Var($8compare_op.3, arraymath.py:664),), kws=(), vararg=None)
2022-01-19 20:36:28,938 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $10pred, 12, 20
2022-01-19 20:36:28,938 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 12
2022-01-19 20:36:28,938 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,938 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $12load_global.0 = global(ValueError: <class 'ValueError'>)
2022-01-19 20:36:28,939 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const14.1 = const(str, attempt to get argmin of an empty sequence)
2022-01-19 20:36:28,939 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $16call_function.2 = call $12load_global.0($const14.1, func=$12load_global.0, args=[Var($const14.1, arraymath.py:665)], kws=(), vararg=None)
2022-01-19 20:36:28,939 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: <static> raise <class 'ValueError'>('attempt to get argmin of an empty sequence')
2022-01-19 20:36:28,939 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 20
2022-01-19 20:36:28,939 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,939 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $22load_attr.1 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,939 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $24get_iter.2 = getiter(value=$22load_attr.1)
2022-01-19 20:36:28,939 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi26.0 = $24get_iter.2
2022-01-19 20:36:28,940 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 26
2022-01-19 20:36:28,940 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 26
2022-01-19 20:36:28,940 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,940 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.1 = iternext(value=$phi26.0)
2022-01-19 20:36:28,940 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.2 = pair_first(value=$26for_iter.1)
2022-01-19 20:36:28,940 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $26for_iter.3 = pair_second(value=$26for_iter.1)
2022-01-19 20:36:28,940 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi28.1 = $26for_iter.2
2022-01-19 20:36:28,941 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $26for_iter.3, 28, 44
2022-01-19 20:36:28,941 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 28
2022-01-19 20:36:28,941 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,941 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v = $phi28.1
2022-01-19 20:36:28,941 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value = v
2022-01-19 20:36:28,941 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const34.3 = const(int, 0)
2022-01-19 20:36:28,942 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx = $const34.3
2022-01-19 20:36:28,942 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 44
2022-01-19 20:36:28,942 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 44
2022-01-19 20:36:28,942 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,942 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.2 = phi(incoming_values=[Undefined, Var(min_idx, arraymath.py:668)], incoming_blocks=[26, 28])
2022-01-19 20:36:28,943 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $44load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,943 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $46load_method.1 = getattr(value=$44load_global.0, attr=isnan)
2022-01-19 20:36:28,943 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None)
2022-01-19 20:36:28,943 [2544] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='min_value' stmt=$50call_method.3 = call $46load_method.1(min_value, func=$46load_method.1, args=[Var(min_value, arraymath.py:667)], kws=(), vararg=None)
2022-01-19 20:36:28,943 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 44
2022-01-19 20:36:28,943 [2544] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node min_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 44
2022-01-19 20:36:28,943 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 26
2022-01-19 20:36:28,943 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 26
2022-01-19 20:36:28,944 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 20 from label 26
2022-01-19 20:36:28,944 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 20
2022-01-19 20:36:28,944 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 20
2022-01-19 20:36:28,944 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 0 from label 20
2022-01-19 20:36:28,944 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 0
2022-01-19 20:36:28,944 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 0
2022-01-19 20:36:28,944 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def <class 'numba.core.ssa.UndefinedVariable'>
2022-01-19 20:36:28,944 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 28
2022-01-19 20:36:28,944 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_value = v
2022-01-19 20:36:28,945 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $50call_method.3 = call $46load_method.1(min_value.2, func=$46load_method.1, args=[Var(min_value.2, arraymath.py:670)], kws=(), vararg=None)
2022-01-19 20:36:28,945 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool52 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,945 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $52pred = call bool52($50call_method.3, func=bool52, args=(Var($50call_method.3, arraymath.py:670),), kws=(), vararg=None)
2022-01-19 20:36:28,945 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $52pred, 54, 58
2022-01-19 20:36:28,945 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 54
2022-01-19 20:36:28,945 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,945 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $56return_value.1 = cast(value=min_idx.2)
2022-01-19 20:36:28,946 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $56return_value.1
2022-01-19 20:36:28,946 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 58
2022-01-19 20:36:28,946 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,946 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const58.0 = const(int, 0)
2022-01-19 20:36:28,946 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx = $const58.0
2022-01-19 20:36:28,946 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $64load_attr.2 = getattr(value=arry, attr=flat)
2022-01-19 20:36:28,946 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $66get_iter.3 = getiter(value=$64load_attr.2)
2022-01-19 20:36:28,946 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi68.0 = $66get_iter.3
2022-01-19 20:36:28,947 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,947 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 68
2022-01-19 20:36:28,947 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,947 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.3 = phi(incoming_values=[Var(min_idx.2, arraymath.py:671), Var(min_idx.4, arraymath.py:681)], incoming_blocks=[58, 106])
2022-01-19 20:36:28,947 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx.2 = phi(incoming_values=[Var(idx, arraymath.py:673), Var(idx.1, arraymath.py:680)], incoming_blocks=[58, 106])
2022-01-19 20:36:28,947 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.1 = iternext(value=$phi68.0)
2022-01-19 20:36:28,947 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.2 = pair_first(value=$68for_iter.1)
2022-01-19 20:36:28,947 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $68for_iter.3 = pair_second(value=$68for_iter.1)
2022-01-19 20:36:28,948 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $phi70.1 = $68for_iter.2
2022-01-19 20:36:28,948 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $68for_iter.3, 70, 116
2022-01-19 20:36:28,948 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 70
2022-01-19 20:36:28,948 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,948 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: v.1 = $phi70.1
2022-01-19 20:36:28,948 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $72load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\numpy\\__init__.py'>)
2022-01-19 20:36:28,948 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $74load_method.3 = getattr(value=$72load_global.2, attr=isnan)
2022-01-19 20:36:28,948 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $78call_method.5 = call $74load_method.3(v.1, func=$74load_method.3, args=[Var(v.1, arraymath.py:674)], kws=(), vararg=None)
2022-01-19 20:36:28,948 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool80 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,949 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $80pred = call bool80($78call_method.5, func=bool80, args=(Var($78call_method.5, arraymath.py:675),), kws=(), vararg=None)
2022-01-19 20:36:28,949 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $80pred, 82, 90
2022-01-19 20:36:28,949 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 82
2022-01-19 20:36:28,949 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,949 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $88return_value.2 = cast(value=idx.2)
2022-01-19 20:36:28,949 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $88return_value.2
2022-01-19 20:36:28,949 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 90
2022-01-19 20:36:28,949 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,950 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $94compare_op.3 = v.1 < min_value
2022-01-19 20:36:28,950 [2544] DEBUG    numba.core.ssa:332: [JupyterRequire] find_def var='min_value' stmt=$94compare_op.3 = v.1 < min_value
2022-01-19 20:36:28,950 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 90
2022-01-19 20:36:28,950 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 90
2022-01-19 20:36:28,950 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2022-01-19 20:36:28,950 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 70
2022-01-19 20:36:28,950 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 68 from label 70
2022-01-19 20:36:28,950 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 68
2022-01-19 20:36:28,950 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 68
2022-01-19 20:36:28,951 [2544] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node min_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 68
2022-01-19 20:36:28,951 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 58
2022-01-19 20:36:28,951 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 58
2022-01-19 20:36:28,951 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 44 from label 58
2022-01-19 20:36:28,951 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 44
2022-01-19 20:36:28,951 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_value.2 = phi(incoming_values=[Undefined, Var(min_value, arraymath.py:667)], incoming_blocks=[26, 28])
2022-01-19 20:36:28,951 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 106
2022-01-19 20:36:28,951 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 106
2022-01-19 20:36:28,951 [2544] DEBUG    numba.core.ssa:380: [JupyterRequire] insert phi node min_value.4 = phi(incoming_values=[], incoming_blocks=[]) at 106
2022-01-19 20:36:28,952 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 90
2022-01-19 20:36:28,952 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 90
2022-01-19 20:36:28,952 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 70 from label 90
2022-01-19 20:36:28,952 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 70
2022-01-19 20:36:28,952 [2544] DEBUG    numba.core.ssa:363: [JupyterRequire] find_def_from_top label 70
2022-01-19 20:36:28,952 [2544] DEBUG    numba.core.ssa:400: [JupyterRequire] idom 68 from label 70
2022-01-19 20:36:28,952 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 68
2022-01-19 20:36:28,952 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_value.3 = phi(incoming_values=[Var(min_value.2, arraymath.py:670)], incoming_blocks=[58])
2022-01-19 20:36:28,953 [2544] DEBUG    numba.core.ssa:406: [JupyterRequire] find_def_from_bottom label 98
2022-01-19 20:36:28,953 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_value.1 = v.1
2022-01-19 20:36:28,953 [2544] DEBUG    numba.core.ssa:388: [JupyterRequire] incoming_def min_value.4 = phi(incoming_values=[Var(min_value.3, arraymath.py:677), Var(min_value.1, arraymath.py:678)], incoming_blocks=[90, 98])
2022-01-19 20:36:28,953 [2544] DEBUG    numba.core.ssa:186: [JupyterRequire] replaced with: $94compare_op.3 = v.1 < min_value.3
2022-01-19 20:36:28,953 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: bool96 = global(bool: <class 'bool'>)
2022-01-19 20:36:28,953 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $96pred = call bool96($94compare_op.3, func=bool96, args=(Var($94compare_op.3, arraymath.py:677),), kws=(), vararg=None)
2022-01-19 20:36:28,953 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: branch $96pred, 98, 106
2022-01-19 20:36:28,953 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 98
2022-01-19 20:36:28,954 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,954 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_value.1 = v.1
2022-01-19 20:36:28,954 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.1 = idx.2
2022-01-19 20:36:28,954 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 106
2022-01-19 20:36:28,954 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 106
2022-01-19 20:36:28,954 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,954 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: min_idx.4 = phi(incoming_values=[Var(min_idx.3, arraymath.py:681), Var(min_idx.1, arraymath.py:679)], incoming_blocks=[90, 98])
2022-01-19 20:36:28,954 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $const108.2 = const(int, 1)
2022-01-19 20:36:28,954 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $110inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=idx.2, rhs=$const108.2, static_lhs=Undefined, static_rhs=Undefined)
2022-01-19 20:36:28,955 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: idx.1 = $110inplace_add.3
2022-01-19 20:36:28,955 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: jump 68
2022-01-19 20:36:28,955 [2544] DEBUG    numba.core.ssa:157: [JupyterRequire] ==== SSA block rewrite pass on 116
2022-01-19 20:36:28,955 [2544] DEBUG    numba.core.ssa:178: [JupyterRequire] Running <numba.core.ssa._FixSSAVars object at 0x00000209C33FBF40>
2022-01-19 20:36:28,955 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: $118return_value.1 = cast(value=min_idx.3)
2022-01-19 20:36:28,955 [2544] DEBUG    numba.core.ssa:180: [JupyterRequire] on stmt: return $118return_value.1
2022-01-19 20:41:01,435 [13528] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-01-19 20:41:01,436 [13528] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-01-19 20:41:01,437 [13528] INFO     root:247: [JupyterRequire] Initializing comms.
2022-01-19 20:41:01,442 [13528] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-01-19 20:41:01,443 [13528] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-01-19 20:41:01,444 [13528] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-01-19 20:41:02,028 [13528] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-01-19 20:41:02,028 [13528] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-01-19 20:41:02,028 [13528] INFO     root:247: [JupyterRequire] Initializing comms.
2022-01-19 20:41:02,032 [13528] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-01-19 20:41:02,033 [13528] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-01-19 20:41:02,034 [13528] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-01-19 20:44:14,828 [13528] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2022-01-19 20:44:14,829 [13528] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2022-01-19 20:44:14,842 [13528] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=C:\Users\sasha\.matplotlib
2022-01-19 20:44:14,852 [13528] DEBUG    matplotlib:1471: [JupyterRequire] matplotlib version 3.3.2
2022-01-19 20:44:14,853 [13528] DEBUG    matplotlib:1472: [JupyterRequire] interactive is False
2022-01-19 20:44:14,854 [13528] DEBUG    matplotlib:1473: [JupyterRequire] platform is win32
2022-01-19 20:44:14,855 [13528] DEBUG    matplotlib:1474: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1251', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'pprint', 'locale', 'gettext', 'argparse', 'ipython_genutils._version', 'ipython_genutils', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', '_struct', 'struct', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_21', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'ipython_genutils.importstring', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'configparser', 'isort.stdlibs.py27', 'isort.stdlibs.py2', 'isort.stdlibs.py35', 'isort.stdlibs.py36', 'isort.stdlibs.py37', 'isort.stdlibs.py38', 'isort.stdlibs.py39', 'isort.stdlibs.py3', 'isort.stdlibs.all', 'isort.stdlibs', 'dataclasses', 'isort._future', 'isort._vendored', 'isort._vendored.toml.tz', 'isort._vendored.toml.decoder', 'isort._vendored.toml.encoder', 'isort._vendored.toml', 'isort.profiles', 'isort.exceptions', 'isort.sections', 'isort.comments', 'isort.wrap_modes', 'isort.settings', 'isort._version', 'isort.literal', 'isort.format', 'isort.utils', 'isort.place', 'isort.deprecated', 'isort.deprecated.finders', 'isort.parse', 'isort.sorting', 'isort.wrap', 'isort.output', 'isort.core', 'isort.io', 'isort.api', 'isort', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'autoreload', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_20', 'numpy.random._common', 'secrets', 'numpy.random._bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'matplotlib', 'gzip', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2022-01-19 20:44:14,970 [13528] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=C:\Users\sasha\.matplotlib
2022-01-19 20:44:14,977 [13528] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from C:\Users\sasha\.matplotlib\fontlist-v330.json
2022-01-19 20:44:15,699 [13528] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-01-19 20:44:15,728 [13528] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-01-19 20:47:07,204 [13528] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2022-01-19 20:47:07,204 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,204 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,205 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,205 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,205 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,205 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,205 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,205 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,205 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,206 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,206 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,206 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,206 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,206 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 20:47:07,206 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,206 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,207 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,207 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,207 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,207 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,207 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,207 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,208 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 20:47:07,208 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,208 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,208 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,208 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,208 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,208 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,209 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 20:47:07,209 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 20:47:07,209 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,209 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,209 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,209 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,209 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 20:47:07,210 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,210 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 20:47:07,210 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,210 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,210 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-01-19 20:47:07,210 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,210 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,211 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,211 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,211 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-01-19 20:47:07,211 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:47:07,211 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,211 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-01-19 20:47:07,212 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,212 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,212 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,212 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,212 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,212 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-01-19 20:47:07,212 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,212 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:47:07,213 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,213 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,213 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,213 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,213 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,213 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,214 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,214 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-01-19 20:47:07,214 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,214 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:47:07,214 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,215 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,215 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,215 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,215 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-01-19 20:47:07,215 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,215 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,215 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,215 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,216 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,216 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,216 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,216 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,216 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,216 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,217 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,217 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,217 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,217 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,217 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,217 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,217 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,218 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,218 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,218 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,218 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,218 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:47:07,218 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,218 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,219 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,219 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,219 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,219 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,219 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,219 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,219 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,220 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-01-19 20:47:07,220 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,220 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-01-19 20:47:07,220 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,220 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,220 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,221 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,221 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 20:47:07,221 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,221 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:47:07,221 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,221 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:47:07,221 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,222 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-01-19 20:47:07,222 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,222 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,222 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,222 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,222 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:47:07,222 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,223 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,223 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-01-19 20:47:07,223 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,223 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,223 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,223 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-01-19 20:47:07,223 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,224 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,224 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-01-19 20:47:07,224 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:47:07,224 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,224 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 20:47:07,224 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,224 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,225 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,225 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,225 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:47:07,225 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,225 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-01-19 20:47:07,225 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,225 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-01-19 20:47:07,226 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,226 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,226 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,226 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,226 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-01-19 20:47:07,226 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,226 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,227 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,227 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:47:07,227 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-01-19 20:47:07,227 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,227 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,227 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,228 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,228 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,228 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,228 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,228 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-01-19 20:47:07,229 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,229 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,229 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,229 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,229 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,229 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-01-19 20:47:07,230 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,230 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,230 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:47:07,230 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,230 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-01-19 20:47:07,230 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:47:07,231 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-01-19 20:47:07,231 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,231 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,231 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,231 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,231 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,231 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,232 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:47:07,232 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-01-19 20:47:07,232 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,232 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,232 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,232 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,233 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:47:07,233 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 20:47:07,233 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-01-19 20:47:07,233 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,233 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,234 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,234 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,234 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,234 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,234 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,234 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,235 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 20:47:07,235 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,235 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 20:47:07,235 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,235 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,235 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,236 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,236 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,236 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 20:47:07,236 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,236 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,236 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,236 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-01-19 20:47:07,237 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,237 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,237 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:47:07,237 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:47:07,237 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,237 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,237 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,237 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,238 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,238 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,238 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:47:07,238 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,238 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-01-19 20:47:07,238 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,238 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-01-19 20:47:07,239 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,239 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,239 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,239 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:47:07,239 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-01-19 20:47:07,239 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,239 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,240 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,240 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-01-19 20:47:07,240 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,240 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,240 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,240 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-01-19 20:47:07,240 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-01-19 20:47:07,241 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-01-19 20:47:07,241 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 20:47:07,241 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,241 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,241 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,241 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,242 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,242 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-01-19 20:47:07,242 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,242 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,242 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,242 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,242 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,243 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,243 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,243 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,243 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,243 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-01-19 20:47:07,243 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-01-19 20:47:07,243 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,244 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,244 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 20:47:07,244 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,244 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-01-19 20:47:07,244 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,244 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,244 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-01-19 20:47:07,245 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,245 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,245 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,245 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,245 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-01-19 20:47:07,245 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,245 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,246 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-01-19 20:47:07,246 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,246 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,246 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,246 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,246 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,246 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,247 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,247 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,247 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,247 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:47:07,247 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,247 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,247 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,248 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,248 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,248 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,248 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,248 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,248 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,248 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,249 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-01-19 20:47:07,249 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 20:47:07,249 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,249 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,249 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,249 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,249 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 20:47:07,250 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,250 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,250 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,250 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,250 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,250 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 20:47:07,251 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,251 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,251 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,251 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-01-19 20:47:07,251 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,251 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:47:07,252 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-01-19 20:47:07,252 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,252 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,252 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-01-19 20:47:07,252 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,252 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,252 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,253 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,253 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,253 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,253 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,253 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 20:47:07,253 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,253 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,253 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,254 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,254 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-01-19 20:47:07,254 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-01-19 20:47:07,254 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,254 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,254 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,254 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,255 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,255 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,255 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,255 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,255 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-01-19 20:47:07,255 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,256 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,256 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,256 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-01-19 20:47:07,256 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,256 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,256 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-01-19 20:47:07,256 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,257 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-01-19 20:47:07,257 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,257 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,257 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2022-01-19 20:47:07,257 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-01-19 20:47:07,257 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,257 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,257 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,258 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,258 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,258 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,258 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,258 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,258 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 20:47:07,259 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,259 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,259 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,259 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,259 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 20:47:07,259 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-01-19 20:47:07,259 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,260 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,260 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,260 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,260 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-01-19 20:47:07,260 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,260 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,260 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,261 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,261 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,261 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-01-19 20:47:07,261 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 20:47:07,261 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,261 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,262 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,262 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,262 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,262 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 20:47:07,262 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,262 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,263 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 20:47:07,263 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,263 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-01-19 20:47:07,263 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-01-19 20:47:07,263 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-01-19 20:47:07,263 [13528] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-01-19 20:47:07,264 [13528] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2022-01-19 20:47:34,309 [13528] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2022-01-19 20:47:35,386 [13528] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2022-01-19 20:47:38,801 [13528] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\typing.py
2022-01-19 20:47:39,473 [13528] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2022-01-19 20:47:40,889 [13528] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2022-01-19 20:47:40,890 [13528] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2022-01-19 20:47:40,890 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2022-01-19 20:47:40,891 [13528] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2022-01-19 20:47:40,891 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2022-01-19 20:47:40,892 [13528] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 7 (to 6 in part parser)
2022-01-19 20:47:40,892 [13528] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2022-01-19 20:48:16,240 [13528] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2022-01-19 20:48:16,241 [13528] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2022-01-19 20:48:16,241 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2022-01-19 20:48:16,241 [13528] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2022-01-19 20:48:16,241 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2022-01-19 20:48:16,242 [13528] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 7 (to 6 in part parser)
2022-01-19 20:48:16,242 [13528] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2022-01-19 20:48:21,000 [13528] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2022-01-19 20:48:21,000 [13528] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2022-01-19 20:48:21,000 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2022-01-19 20:48:21,001 [13528] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2022-01-19 20:48:21,002 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2022-01-19 20:48:21,002 [13528] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 8 (to 6 in part parser)
2022-01-19 20:48:21,002 [13528] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2022-01-19 20:48:21,561 [13528] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2022-01-19 20:48:21,561 [13528] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2022-01-19 20:48:21,562 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2022-01-19 20:48:21,562 [13528] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2022-01-19 20:48:21,563 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2022-01-19 20:48:21,564 [13528] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 8 (to 6 in part parser)
2022-01-19 20:48:21,564 [13528] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2022-01-19 20:48:41,817 [13528] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2022-01-19 20:48:41,818 [13528] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 6
2022-01-19 20:48:41,819 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:5] new[1:5]
2022-01-19 20:48:41,819 [13528] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:4] new[1:4]
2022-01-19 20:48:41,821 [13528] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 5 to 6 (to 5 in part parser)
2022-01-19 20:48:41,822 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[6:7] new[6:6]
2022-01-19 20:48:41,822 [13528] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2022-01-19 20:48:42,171 [13528] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2022-01-19 20:48:42,171 [13528] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 6; new: 6
2022-01-19 20:48:42,172 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:5] new[1:5]
2022-01-19 20:48:42,173 [13528] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:4] new[1:4]
2022-01-19 20:48:42,173 [13528] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 5 to 6 (to 5 in part parser)
2022-01-19 20:48:42,173 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[6:6] new[6:6]
2022-01-19 20:48:42,173 [13528] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2022-01-19 20:49:39,683 [13528] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2022-01-19 20:49:39,683 [13528] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 6; new: 7
2022-01-19 20:49:39,684 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:5] new[1:5]
2022-01-19 20:49:39,684 [13528] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:4] new[1:4]
2022-01-19 20:49:39,685 [13528] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 5 to 6 (to 6 in part parser)
2022-01-19 20:49:39,685 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[6:6] new[6:7]
2022-01-19 20:49:39,686 [13528] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 7 (to 6 in part parser)
2022-01-19 20:49:39,686 [13528] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2022-01-19 20:49:40,326 [13528] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2022-01-19 20:49:40,327 [13528] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2022-01-19 20:49:40,327 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2022-01-19 20:49:40,327 [13528] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2022-01-19 20:49:40,328 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2022-01-19 20:49:40,329 [13528] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 7 (to 6 in part parser)
2022-01-19 20:49:40,329 [13528] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2022-01-19 20:49:41,748 [13528] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2022-01-19 20:49:41,749 [13528] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2022-01-19 20:49:41,749 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2022-01-19 20:49:41,749 [13528] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2022-01-19 20:49:41,749 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2022-01-19 20:49:41,750 [13528] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 7 (to 6 in part parser)
2022-01-19 20:49:41,750 [13528] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2022-01-19 20:50:01,242 [13528] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2022-01-19 20:50:01,243 [13528] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 7; new: 7
2022-01-19 20:50:01,243 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:6] new[1:6]
2022-01-19 20:50:01,244 [13528] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2022-01-19 20:50:01,244 [13528] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[7:7] new[7:7]
2022-01-19 20:50:01,245 [13528] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 7 (to 6 in part parser)
2022-01-19 20:50:01,245 [13528] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2022-01-19 20:50:30,896 [13528] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2022-01-19 20:50:31,365 [13528] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2022-01-19 20:50:31,365 [13528] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2022-01-19 20:50:31,365 [13528] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2022-01-19 20:50:31,366 [13528] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2022-01-19 20:59:25,082 [15256] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-01-19 20:59:25,082 [15256] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-01-19 20:59:25,082 [15256] INFO     root:247: [JupyterRequire] Initializing comms.
2022-01-19 20:59:25,084 [15256] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-01-19 20:59:25,085 [15256] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-01-19 20:59:25,085 [15256] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-01-19 20:59:25,663 [15256] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-01-19 20:59:25,663 [15256] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-01-19 20:59:25,663 [15256] INFO     root:247: [JupyterRequire] Initializing comms.
2022-01-19 20:59:25,665 [15256] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-01-19 20:59:25,665 [15256] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-01-19 20:59:25,665 [15256] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-01-19 21:00:12,062 [15256] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2022-01-19 21:00:14,916 [15256] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2022-01-19 21:00:14,917 [15256] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2022-01-19 21:00:14,921 [15256] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=C:\Users\sasha\.matplotlib
2022-01-19 21:00:14,924 [15256] DEBUG    matplotlib:1471: [JupyterRequire] matplotlib version 3.3.2
2022-01-19 21:00:14,925 [15256] DEBUG    matplotlib:1472: [JupyterRequire] interactive is False
2022-01-19 21:00:14,925 [15256] DEBUG    matplotlib:1473: [JupyterRequire] platform is win32
2022-01-19 21:00:14,925 [15256] DEBUG    matplotlib:1474: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1251', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'pprint', 'locale', 'gettext', 'argparse', 'ipython_genutils._version', 'ipython_genutils', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', '_struct', 'struct', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_21', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'ipython_genutils.importstring', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'configparser', 'isort.stdlibs.py27', 'isort.stdlibs.py2', 'isort.stdlibs.py35', 'isort.stdlibs.py36', 'isort.stdlibs.py37', 'isort.stdlibs.py38', 'isort.stdlibs.py39', 'isort.stdlibs.py3', 'isort.stdlibs.all', 'isort.stdlibs', 'dataclasses', 'isort._future', 'isort._vendored', 'isort._vendored.toml.tz', 'isort._vendored.toml.decoder', 'isort._vendored.toml.encoder', 'isort._vendored.toml', 'isort.profiles', 'isort.exceptions', 'isort.sections', 'isort.comments', 'isort.wrap_modes', 'isort.settings', 'isort._version', 'isort.literal', 'isort.format', 'isort.utils', 'isort.place', 'isort.deprecated', 'isort.deprecated.finders', 'isort.parse', 'isort.sorting', 'isort.wrap', 'isort.output', 'isort.core', 'isort.io', 'isort.api', 'isort', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy.version', 'mkl._mklinit', 'mkl._py_mkl_service', 'mkl', 'numpy._distributor_init', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._asarray', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core.machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.twodim_base', 'numpy.linalg.lapack_lite', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.stride_tricks', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.financial', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_20', 'numpy.random._common', 'secrets', 'numpy.random._bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', '_cython_0_29_24', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'gzip', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.testing._private.utils', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._continuous_distns', 'scipy.stats._discrete_distns', 'scipy.stats.distributions', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._multivariate', 'scipy.stats', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2022-01-19 21:00:15,027 [15256] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=C:\Users\sasha\.matplotlib
2022-01-19 21:00:15,031 [15256] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from C:\Users\sasha\.matplotlib\fontlist-v330.json
2022-01-19 21:00:15,346 [15256] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-01-19 21:00:15,350 [15256] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-01-19 21:00:15,616 [15256] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-01-19 21:00:17,742 [15256] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2022-01-19 21:00:17,743 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,743 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,743 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,744 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,744 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,744 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,744 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,744 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,745 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,745 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,745 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,745 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,745 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,745 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 21:00:17,745 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,746 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,746 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,746 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,746 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,746 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,746 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,746 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,747 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 21:00:17,747 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,747 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,747 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,747 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,747 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,747 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,748 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 21:00:17,748 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 21:00:17,748 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,748 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,748 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,748 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,749 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 21:00:17,749 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,749 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 21:00:17,749 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,749 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,749 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-01-19 21:00:17,749 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,750 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,750 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,750 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,750 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-01-19 21:00:17,750 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-01-19 21:00:17,750 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,750 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-01-19 21:00:17,751 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,751 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,751 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,751 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,751 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,751 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-01-19 21:00:17,752 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,752 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 21:00:17,752 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,752 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,752 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,752 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,752 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,753 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,753 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,753 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-01-19 21:00:17,753 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,753 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 21:00:17,753 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,753 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,754 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,754 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,754 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-01-19 21:00:17,754 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,754 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,754 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,754 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,755 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,755 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,755 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,755 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,755 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,755 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,755 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,756 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,756 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,756 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,756 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,756 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,756 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,756 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,756 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,757 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,757 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,757 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 21:00:17,757 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,757 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,757 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,757 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,758 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,758 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,758 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,758 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,758 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,758 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-01-19 21:00:17,759 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,759 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-01-19 21:00:17,759 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,759 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,759 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,759 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,759 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 21:00:17,760 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,760 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 21:00:17,760 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,760 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 21:00:17,760 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,760 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-01-19 21:00:17,760 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,761 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,761 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,761 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,761 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 21:00:17,761 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,761 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,761 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-01-19 21:00:17,762 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,762 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,762 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,762 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-01-19 21:00:17,762 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,762 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,762 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-01-19 21:00:17,763 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 21:00:17,763 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,763 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 21:00:17,763 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,763 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,763 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,763 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,764 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-01-19 21:00:17,764 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,764 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-01-19 21:00:17,764 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,764 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-01-19 21:00:17,764 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,764 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,765 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,765 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,765 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-01-19 21:00:17,765 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,765 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,765 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,765 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-01-19 21:00:17,766 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-01-19 21:00:17,766 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,766 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,766 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,766 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,766 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,766 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,767 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,767 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-01-19 21:00:17,767 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,767 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,767 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,767 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,767 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,768 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-01-19 21:00:17,768 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,768 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,768 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-01-19 21:00:17,768 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,768 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-01-19 21:00:17,768 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-01-19 21:00:17,769 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-01-19 21:00:17,769 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,769 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,769 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,769 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,769 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,769 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,770 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 21:00:17,770 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-01-19 21:00:17,770 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,770 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,770 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,770 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,770 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 21:00:17,770 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-01-19 21:00:17,771 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-01-19 21:00:17,771 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,771 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,771 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,771 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,771 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,772 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,772 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,772 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,772 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 21:00:17,772 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,772 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-01-19 21:00:17,772 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,772 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,774 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,774 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,774 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,774 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 21:00:17,774 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,774 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,775 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,775 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-01-19 21:00:17,775 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,775 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,775 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 21:00:17,775 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-01-19 21:00:17,776 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,776 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,776 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,776 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,776 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,776 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,776 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 21:00:17,777 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,777 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-01-19 21:00:17,777 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,777 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-01-19 21:00:17,777 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,777 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,778 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,778 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-01-19 21:00:17,778 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-01-19 21:00:17,778 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,778 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,778 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,778 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-01-19 21:00:17,779 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,779 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,779 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,779 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-01-19 21:00:17,779 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-01-19 21:00:17,779 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-01-19 21:00:17,779 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-01-19 21:00:17,780 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,780 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,780 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,780 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,780 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,780 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-01-19 21:00:17,780 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,781 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,781 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,781 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,781 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,781 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,781 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,781 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,781 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,782 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-01-19 21:00:17,782 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-01-19 21:00:17,782 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,782 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,782 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 21:00:17,782 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,783 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-01-19 21:00:17,783 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,783 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,783 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-01-19 21:00:17,783 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,783 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,783 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,784 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,784 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-01-19 21:00:17,784 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,784 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,784 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-01-19 21:00:17,784 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,784 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,785 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,785 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,785 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,785 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,785 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,785 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,785 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,785 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-01-19 21:00:17,786 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,786 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,786 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,786 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,786 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,786 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,786 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,787 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,787 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,787 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,787 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-01-19 21:00:17,787 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-01-19 21:00:17,787 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,787 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,788 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,788 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,788 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-01-19 21:00:17,788 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,788 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,788 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,788 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,789 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,789 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-01-19 21:00:17,789 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,789 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,789 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,789 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-01-19 21:00:17,789 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,790 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-01-19 21:00:17,790 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-01-19 21:00:17,790 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,790 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,790 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-01-19 21:00:17,790 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,790 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,791 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,791 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,791 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,791 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,791 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,791 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-01-19 21:00:17,791 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,792 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,792 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,792 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,792 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-01-19 21:00:17,792 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-01-19 21:00:17,792 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,792 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,793 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,793 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,793 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,793 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,793 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,793 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,793 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-01-19 21:00:17,794 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,794 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,794 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,794 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-01-19 21:00:17,794 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,794 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,794 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-01-19 21:00:17,795 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,795 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-01-19 21:00:17,795 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,795 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,795 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2022-01-19 21:00:17,795 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-01-19 21:00:17,795 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,796 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,796 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,796 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,796 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,796 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,796 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,796 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,797 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 21:00:17,797 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,797 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,797 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,797 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,797 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-01-19 21:00:17,797 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-01-19 21:00:17,798 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,798 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,798 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,798 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,798 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-01-19 21:00:17,798 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,798 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,799 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,799 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,799 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,799 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-01-19 21:00:17,799 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-01-19 21:00:17,799 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,799 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,799 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,800 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,800 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,800 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-01-19 21:00:17,800 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,800 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,800 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-01-19 21:00:17,800 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,801 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-01-19 21:00:17,801 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-01-19 21:00:17,801 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-01-19 21:00:17,801 [15256] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-01-19 21:00:17,801 [15256] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2022-05-07 15:10:58,506 [14600] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-05-07 15:10:58,509 [14600] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-05-07 15:10:58,510 [14600] INFO     root:247: [JupyterRequire] Initializing comms.
2022-05-07 15:10:58,524 [14600] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-05-07 15:10:58,526 [14600] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-05-07 15:10:58,527 [14600] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-05-07 15:10:59,449 [14600] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-05-07 15:10:59,450 [14600] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-05-07 15:10:59,451 [14600] INFO     root:247: [JupyterRequire] Initializing comms.
2022-05-07 15:10:59,458 [14600] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-05-07 15:10:59,460 [14600] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-05-07 15:10:59,461 [14600] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-05-07 23:12:01,757 [15112] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-05-07 23:12:01,759 [15112] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-05-07 23:12:01,760 [15112] INFO     root:247: [JupyterRequire] Initializing comms.
2022-05-07 23:12:01,762 [15112] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-05-07 23:12:01,763 [15112] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-05-07 23:12:01,764 [15112] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-05-07 23:12:03,296 [15112] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-05-07 23:12:03,296 [15112] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-05-07 23:12:03,296 [15112] INFO     root:247: [JupyterRequire] Initializing comms.
2022-05-07 23:12:03,298 [15112] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-05-07 23:12:03,299 [15112] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-05-07 23:12:03,299 [15112] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-05-09 20:39:51,758 [6580] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-05-09 20:39:51,758 [6580] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-05-09 20:39:51,758 [6580] INFO     root:247: [JupyterRequire] Initializing comms.
2022-05-09 20:39:51,760 [6580] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-05-09 20:39:51,761 [6580] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-05-09 20:39:51,761 [6580] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-05-09 20:39:52,359 [6580] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-05-09 20:39:52,359 [6580] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-05-09 20:39:52,359 [6580] INFO     root:247: [JupyterRequire] Initializing comms.
2022-05-09 20:39:52,362 [6580] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-05-09 20:39:52,362 [6580] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-05-09 20:39:52,364 [6580] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-05-10 07:59:25,877 [6848] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-05-10 07:59:25,877 [6848] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-05-10 07:59:25,878 [6848] INFO     root:247: [JupyterRequire] Initializing comms.
2022-05-10 07:59:25,879 [6848] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-05-10 07:59:25,880 [6848] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-05-10 07:59:25,881 [6848] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-05-10 07:59:26,474 [6848] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-05-10 07:59:26,475 [6848] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-05-10 07:59:26,475 [6848] INFO     root:247: [JupyterRequire] Initializing comms.
2022-05-10 07:59:26,478 [6848] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-05-10 07:59:26,478 [6848] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-05-10 07:59:26,479 [6848] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-05-10 09:54:54,775 [6848] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-05-10 09:54:54,775 [6848] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-05-10 09:54:54,776 [6848] INFO     root:247: [JupyterRequire] Initializing comms.
2022-05-10 09:54:54,779 [6848] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-05-10 09:54:54,780 [6848] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-05-10 09:54:54,780 [6848] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-05-10 10:51:37,698 [13100] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-05-10 10:51:37,698 [13100] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-05-10 10:51:37,698 [13100] INFO     root:247: [JupyterRequire] Initializing comms.
2022-05-10 10:51:37,700 [13100] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-05-10 10:51:37,701 [13100] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-05-10 10:51:37,701 [13100] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-05-10 10:51:38,226 [13100] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-05-10 10:51:38,226 [13100] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-05-10 10:51:38,226 [13100] INFO     root:247: [JupyterRequire] Initializing comms.
2022-05-10 10:51:38,229 [13100] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-05-10 10:51:38,230 [13100] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-05-10 10:51:38,230 [13100] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-05-11 12:17:29,080 [12212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-05-11 12:17:29,082 [12212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-05-11 12:17:29,082 [12212] INFO     root:247: [JupyterRequire] Initializing comms.
2022-05-11 12:17:29,085 [12212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-05-11 12:17:29,086 [12212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-05-11 12:17:29,087 [12212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-05-11 12:17:29,621 [12212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-05-11 12:17:29,621 [12212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-05-11 12:17:29,622 [12212] INFO     root:247: [JupyterRequire] Initializing comms.
2022-05-11 12:17:29,624 [12212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-05-11 12:17:29,624 [12212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-05-11 12:17:29,625 [12212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-05-11 19:08:30,646 [12212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-05-11 19:08:30,647 [12212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-05-11 19:08:30,647 [12212] INFO     root:247: [JupyterRequire] Initializing comms.
2022-05-11 19:08:30,672 [12212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-05-11 19:08:30,673 [12212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-05-11 19:08:30,674 [12212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-06-14 20:17:07,945 [21816] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-06-14 20:17:07,945 [21816] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-06-14 20:17:07,946 [21816] INFO     root:247: [JupyterRequire] Initializing comms.
2022-06-14 20:17:07,947 [21816] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-06-14 20:17:07,948 [21816] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-06-14 20:17:07,949 [21816] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-06-14 20:17:09,067 [21816] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-06-14 20:17:09,067 [21816] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-06-14 20:17:09,068 [21816] INFO     root:247: [JupyterRequire] Initializing comms.
2022-06-14 20:17:09,070 [21816] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-06-14 20:17:09,071 [21816] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-06-14 20:17:09,071 [21816] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-06-14 20:19:34,535 [8004] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-06-14 20:19:34,536 [8004] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-06-14 20:19:34,536 [8004] INFO     root:247: [JupyterRequire] Initializing comms.
2022-06-14 20:19:34,538 [8004] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-06-14 20:19:34,539 [8004] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-06-14 20:19:34,539 [8004] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-06-14 20:19:35,415 [8004] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-06-14 20:19:35,415 [8004] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-06-14 20:19:35,415 [8004] INFO     root:247: [JupyterRequire] Initializing comms.
2022-06-14 20:19:35,418 [8004] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-06-14 20:19:35,419 [8004] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-06-14 20:19:35,419 [8004] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-06-14 20:26:34,130 [21596] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-06-14 20:26:34,130 [21596] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-06-14 20:26:34,130 [21596] INFO     root:247: [JupyterRequire] Initializing comms.
2022-06-14 20:26:34,132 [21596] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-06-14 20:26:34,133 [21596] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-06-14 20:26:34,133 [21596] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-06-14 21:01:28,655 [8004] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sasha\anaconda3\lib\site-packages\numpy\_distributor_init.py:30: UserWarning: loaded more than 1 DLL from .libs:
C:\Users\sasha\anaconda3\lib\site-packages\numpy\.libs\libopenblas.EL2C6PLE4ZYW3ECEVIV3OXXGRN2NRFM2.gfortran-win_amd64.dll
C:\Users\sasha\anaconda3\lib\site-packages\numpy\.libs\libopenblas.QVLO2T66WEPI7JZ63PS3HMOHFEY472BC.gfortran-win_amd64.dll
  warnings.warn("loaded more than 1 DLL from .libs:"

2022-06-14 21:01:29,552 [8004] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2022-06-14 21:01:31,009 [8004] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2022-06-14 21:01:31,009 [8004] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2022-06-14 21:01:31,014 [8004] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=C:\Users\sasha\.matplotlib
2022-06-14 21:01:31,017 [8004] DEBUG    matplotlib:1471: [JupyterRequire] matplotlib version 3.3.2
2022-06-14 21:01:31,017 [8004] DEBUG    matplotlib:1472: [JupyterRequire] interactive is False
2022-06-14 21:01:31,017 [8004] DEBUG    matplotlib:1473: [JupyterRequire] platform is win32
2022-06-14 21:01:31,018 [8004] DEBUG    matplotlib:1474: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1251', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'pprint', 'locale', 'gettext', 'argparse', 'ipython_genutils._version', 'ipython_genutils', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', '_struct', 'struct', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_21', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'ipython_genutils.importstring', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'configparser', 'isort.stdlibs.py27', 'isort.stdlibs.py2', 'isort.stdlibs.py35', 'isort.stdlibs.py36', 'isort.stdlibs.py37', 'isort.stdlibs.py38', 'isort.stdlibs.py39', 'isort.stdlibs.py3', 'isort.stdlibs.all', 'isort.stdlibs', 'dataclasses', 'isort._future', 'isort._vendored', 'isort._vendored.toml.tz', 'isort._vendored.toml.decoder', 'isort._vendored.toml.encoder', 'isort._vendored.toml', 'isort.profiles', 'isort.exceptions', 'isort.sections', 'isort.comments', 'isort.wrap_modes', 'isort.settings', 'isort._version', 'isort.literal', 'isort.format', 'isort.utils', 'isort.place', 'isort.deprecated', 'isort.deprecated.finders', 'isort.parse', 'isort.sorting', 'isort.wrap', 'isort.output', 'isort.core', 'isort.io', 'isort.api', 'isort', 'toml.tz', 'toml.decoder', 'toml.encoder', 'toml', 'optparse', 'pycodestyle', 'autopep8', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy._distributor_init', 'numpy._version', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core._machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_24', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'gzip', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2022-06-14 21:01:31,087 [8004] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=C:\Users\sasha\.matplotlib
2022-06-14 21:01:31,287 [8004] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from C:\Users\sasha\.matplotlib\fontlist-v330.json
2022-06-14 21:01:31,712 [8004] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-06-14 21:01:31,716 [8004] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-06-14 21:01:34,892 [8004] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-06-14 21:05:24,428 [8004] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-06-14 21:05:26,356 [8004] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0.
2022-06-14 21:05:26,357 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,357 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,357 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,357 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,358 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,358 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,358 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,358 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,358 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,358 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,359 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,359 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,359 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,359 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-06-14 21:05:26,359 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,360 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,360 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,360 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,360 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,361 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,361 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,361 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,361 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-06-14 21:05:26,362 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,362 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,362 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,362 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,362 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,362 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,363 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-06-14 21:05:26,363 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-06-14 21:05:26,363 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,363 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,363 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,363 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,363 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-06-14 21:05:26,364 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,364 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-06-14 21:05:26,364 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,364 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,364 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-06-14 21:05:26,365 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,365 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,365 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,365 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,365 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-06-14 21:05:26,365 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,366 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,366 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-06-14 21:05:26,366 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,366 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,366 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,367 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,367 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,367 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-06-14 21:05:26,367 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,367 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-06-14 21:05:26,367 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,367 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,368 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,368 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,368 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,368 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,368 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,369 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-06-14 21:05:26,369 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,369 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-06-14 21:05:26,369 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,369 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,370 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,370 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,370 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-06-14 21:05:26,370 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,370 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,371 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,371 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,371 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,371 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,371 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,371 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,372 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,372 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,372 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,372 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,372 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,372 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,373 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,373 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,373 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,373 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,373 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,373 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,373 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,374 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-06-14 21:05:26,374 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,374 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,374 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,374 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,374 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,374 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,375 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,375 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,375 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,375 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-06-14 21:05:26,375 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,375 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-06-14 21:05:26,375 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,376 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,376 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,376 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,376 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-06-14 21:05:26,377 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,377 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-06-14 21:05:26,377 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,377 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-06-14 21:05:26,377 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,378 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-06-14 21:05:26,378 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,378 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,378 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,379 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,379 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-06-14 21:05:26,379 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,379 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,380 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-06-14 21:05:26,380 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,380 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,380 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,381 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-06-14 21:05:26,381 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,381 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,381 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-06-14 21:05:26,382 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-06-14 21:05:26,382 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,382 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-06-14 21:05:26,382 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,382 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,383 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,383 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,383 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-06-14 21:05:26,383 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,383 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-06-14 21:05:26,384 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,384 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-06-14 21:05:26,384 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,385 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,385 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,385 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,385 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-06-14 21:05:26,386 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,386 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,386 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,386 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,387 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-06-14 21:05:26,387 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,387 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,387 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,387 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,388 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,388 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,388 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,388 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-06-14 21:05:26,388 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,389 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,389 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,389 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,389 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,389 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-06-14 21:05:26,389 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,390 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,390 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,390 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,390 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-06-14 21:05:26,390 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,390 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-06-14 21:05:26,391 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,391 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,391 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,391 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,391 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,392 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,392 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-06-14 21:05:26,392 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-06-14 21:05:26,392 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,392 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,392 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,393 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,393 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-06-14 21:05:26,393 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-06-14 21:05:26,393 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-06-14 21:05:26,393 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,393 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,394 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,394 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,394 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,394 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,394 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,394 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,394 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-06-14 21:05:26,395 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,395 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-06-14 21:05:26,395 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,395 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,395 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,395 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,396 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,396 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-06-14 21:05:26,396 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,396 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,396 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,396 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-06-14 21:05:26,396 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,397 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,397 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-06-14 21:05:26,397 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,397 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,397 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,397 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,397 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,398 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,398 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,398 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-06-14 21:05:26,398 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,398 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-06-14 21:05:26,398 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,398 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-06-14 21:05:26,399 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,399 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,399 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,399 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-06-14 21:05:26,399 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-06-14 21:05:26,400 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,400 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,400 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,400 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,400 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,401 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,401 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,401 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-06-14 21:05:26,401 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-06-14 21:05:26,401 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-06-14 21:05:26,401 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-06-14 21:05:26,402 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,402 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,402 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,402 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,402 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,403 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-06-14 21:05:26,403 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,403 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,403 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,403 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,403 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,404 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,404 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,404 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,404 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,404 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-06-14 21:05:26,404 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-06-14 21:05:26,405 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,405 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,405 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-06-14 21:05:26,405 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,405 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-06-14 21:05:26,405 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,406 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,406 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-06-14 21:05:26,406 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,406 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,406 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,406 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,407 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-06-14 21:05:26,407 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,407 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,407 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-06-14 21:05:26,407 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,407 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,407 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,408 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,408 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,408 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,408 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,408 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,408 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,408 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,409 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,409 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,409 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,409 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,409 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,409 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,410 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,410 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,410 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,410 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,410 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-06-14 21:05:26,410 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-06-14 21:05:26,410 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,411 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,411 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,411 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,411 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-06-14 21:05:26,411 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,411 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,411 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,412 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,412 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,412 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-06-14 21:05:26,412 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,412 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,412 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,412 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-06-14 21:05:26,413 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,413 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,413 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-06-14 21:05:26,413 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,413 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,413 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-06-14 21:05:26,414 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,414 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,414 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,414 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,414 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,414 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,414 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,415 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-06-14 21:05:26,415 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,415 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,415 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,415 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,415 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,416 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,416 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,416 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,416 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,416 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,416 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,417 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,417 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,417 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,417 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-06-14 21:05:26,417 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,417 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,417 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,418 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-06-14 21:05:26,418 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,418 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,418 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-06-14 21:05:26,418 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,418 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-06-14 21:05:26,418 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,419 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,419 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2022-06-14 21:05:26,419 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-06-14 21:05:26,419 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,419 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,419 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,420 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,420 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,420 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,420 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,420 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,420 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-06-14 21:05:26,420 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,421 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,421 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,421 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,421 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,421 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-06-14 21:05:26,421 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,421 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,422 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,422 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,422 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-06-14 21:05:26,422 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,422 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,422 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,423 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,423 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,423 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-06-14 21:05:26,423 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-06-14 21:05:26,423 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,423 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,423 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,424 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,424 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,424 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,424 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,424 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,424 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,424 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,425 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-06-14 21:05:26,425 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-06-14 21:05:26,425 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,425 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-06-14 21:05:26,425 [8004] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=14.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2022-06-14 21:05:26,444 [8004] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2022-06-14 21:05:26,444 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,445 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,445 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,445 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,445 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,445 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,445 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,445 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,446 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,446 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,446 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,446 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,446 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,446 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-06-14 21:05:26,446 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,447 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,447 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,447 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,447 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,447 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,447 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,448 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,448 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-06-14 21:05:26,448 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,448 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,449 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,449 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,449 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,449 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,449 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-06-14 21:05:26,449 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-06-14 21:05:26,450 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,450 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,450 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,450 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,450 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-06-14 21:05:26,450 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,451 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-06-14 21:05:26,451 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,451 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,451 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-06-14 21:05:26,451 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,451 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,452 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,452 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,452 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-06-14 21:05:26,452 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,452 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,452 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-06-14 21:05:26,452 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,453 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,453 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,453 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,453 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,453 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-06-14 21:05:26,453 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,453 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-06-14 21:05:26,454 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,454 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,454 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,454 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,454 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,454 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,454 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,455 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-06-14 21:05:26,455 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,455 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-06-14 21:05:26,455 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,455 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,455 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,455 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,456 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-06-14 21:05:26,456 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,456 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,456 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,456 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,456 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,456 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,457 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,457 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,457 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,457 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,457 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,457 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,457 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,458 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,458 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,458 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,458 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,458 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,458 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,458 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,459 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,459 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-06-14 21:05:26,459 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,459 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,459 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,459 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,460 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,460 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,460 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,460 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,460 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,460 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-06-14 21:05:26,461 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,461 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-06-14 21:05:26,461 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,461 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,461 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,461 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,462 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-06-14 21:05:26,462 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,462 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-06-14 21:05:26,462 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,462 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-06-14 21:05:26,462 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,463 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-06-14 21:05:26,463 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,463 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,463 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,463 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,463 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-06-14 21:05:26,463 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,464 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,464 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-06-14 21:05:26,464 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,464 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,465 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,465 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-06-14 21:05:26,465 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,465 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,465 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-06-14 21:05:26,465 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-06-14 21:05:26,466 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,466 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-06-14 21:05:26,466 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,466 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,467 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,467 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,467 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-06-14 21:05:26,467 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,467 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-06-14 21:05:26,467 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,468 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-06-14 21:05:26,468 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,468 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,468 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,468 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,468 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-06-14 21:05:26,468 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,469 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,469 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,469 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,469 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-06-14 21:05:26,469 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,469 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,469 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,470 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,470 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,470 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,470 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,470 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-06-14 21:05:26,470 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,470 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,471 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,471 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,471 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,471 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-06-14 21:05:26,471 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,471 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,472 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,472 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,472 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-06-14 21:05:26,472 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,472 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-06-14 21:05:26,472 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,472 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,473 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,473 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,473 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,473 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,473 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-06-14 21:05:26,473 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-06-14 21:05:26,474 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,474 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,474 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,474 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,474 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-06-14 21:05:26,474 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-06-14 21:05:26,474 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-06-14 21:05:26,475 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,475 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,475 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,475 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,475 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,475 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,475 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,476 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,476 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-06-14 21:05:26,476 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,476 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-06-14 21:05:26,476 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,476 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,476 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,477 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,477 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,477 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-06-14 21:05:26,477 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,478 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,478 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,478 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-06-14 21:05:26,478 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,478 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,478 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-06-14 21:05:26,478 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,479 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,479 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,479 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,479 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,479 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,479 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,479 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-06-14 21:05:26,480 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,480 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-06-14 21:05:26,480 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,480 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-06-14 21:05:26,480 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,480 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,481 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,481 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-06-14 21:05:26,481 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-06-14 21:05:26,481 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,481 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,481 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,481 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,482 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,482 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,482 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,482 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-06-14 21:05:26,482 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-06-14 21:05:26,482 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-06-14 21:05:26,483 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-06-14 21:05:26,483 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,483 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,483 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,483 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,483 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,483 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-06-14 21:05:26,484 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,484 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,484 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,484 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,484 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,484 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,484 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,485 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,485 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,485 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-06-14 21:05:26,485 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-06-14 21:05:26,485 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,485 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,485 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-06-14 21:05:26,486 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,486 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-06-14 21:05:26,486 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,486 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,486 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-06-14 21:05:26,486 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,486 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,487 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,487 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,487 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-06-14 21:05:26,487 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,487 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,487 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-06-14 21:05:26,488 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,488 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,488 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,488 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,488 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,488 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,488 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,489 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,489 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,489 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,489 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,489 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,489 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,489 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,490 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,490 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,490 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,490 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,490 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,490 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,491 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-06-14 21:05:26,491 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-06-14 21:05:26,491 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,491 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,491 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,491 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,492 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-06-14 21:05:26,492 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,492 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,492 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,492 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,492 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,492 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-06-14 21:05:26,493 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,493 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,493 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,493 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-06-14 21:05:26,493 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,493 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,493 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-06-14 21:05:26,494 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,494 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,494 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-06-14 21:05:26,494 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,494 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,494 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,495 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,495 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,495 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,495 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,495 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-06-14 21:05:26,495 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,496 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,496 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,496 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,496 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,496 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-06-14 21:05:26,496 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,496 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,497 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,497 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,497 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,497 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,497 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,497 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,497 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-06-14 21:05:26,498 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,498 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,498 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,498 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-06-14 21:05:26,498 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,498 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,498 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-06-14 21:05:26,499 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,499 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-06-14 21:05:26,499 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,499 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,499 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2022-06-14 21:05:26,500 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-06-14 21:05:26,500 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,500 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,500 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,500 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,500 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,501 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,501 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,501 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,501 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-06-14 21:05:26,501 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,501 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,501 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,502 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,502 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-06-14 21:05:26,502 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-06-14 21:05:26,502 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,502 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,502 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,502 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,503 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-06-14 21:05:26,503 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,503 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,503 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,503 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,503 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,503 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-06-14 21:05:26,504 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-06-14 21:05:26,504 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,504 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,504 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,505 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,505 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,505 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-06-14 21:05:26,505 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,505 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,505 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-06-14 21:05:26,506 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,506 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-06-14 21:05:26,506 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-06-14 21:05:26,506 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-06-14 21:05:26,506 [8004] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-06-14 21:05:26,506 [8004] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2022-06-14 21:06:26,665 [8004] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2022-06-14 21:06:27,614 [8004] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2022-06-14 21:06:42,766 [8004] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2022-06-14 21:06:42,822 [8004] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 5; new: 5
2022-06-14 21:06:42,823 [8004] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:4] new[1:4]
2022-06-14 21:06:42,823 [8004] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:1] new[1:1]
2022-06-14 21:06:42,824 [8004] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 2 to 5 (to 4 in part parser)
2022-06-14 21:06:42,825 [8004] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[5:5] new[5:5]
2022-06-14 21:06:42,825 [8004] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2022-06-14 21:06:49,035 [8004] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\typing.py
2022-06-14 21:06:54,041 [8004] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\typing.pyi
2022-06-14 21:10:20,242 [8304] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-06-14 21:10:20,242 [8304] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-06-14 21:10:20,242 [8304] INFO     root:247: [JupyterRequire] Initializing comms.
2022-06-14 21:10:20,244 [8304] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-06-14 21:10:20,245 [8304] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-06-14 21:10:20,245 [8304] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-06-14 21:10:53,079 [8304] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-06-14 21:10:53,079 [8304] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-06-14 21:10:53,079 [8304] INFO     root:247: [JupyterRequire] Initializing comms.
2022-06-14 21:10:53,085 [8304] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-06-14 21:10:53,087 [8304] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-06-14 21:10:53,087 [8304] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-06-14 21:18:15,080 [21596] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sasha\anaconda3\lib\site-packages\numpy\_distributor_init.py:30: UserWarning: loaded more than 1 DLL from .libs:
C:\Users\sasha\anaconda3\lib\site-packages\numpy\.libs\libopenblas.EL2C6PLE4ZYW3ECEVIV3OXXGRN2NRFM2.gfortran-win_amd64.dll
C:\Users\sasha\anaconda3\lib\site-packages\numpy\.libs\libopenblas.QVLO2T66WEPI7JZ63PS3HMOHFEY472BC.gfortran-win_amd64.dll
  warnings.warn("loaded more than 1 DLL from .libs:"

2022-06-14 21:18:17,873 [21596] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2022-06-14 21:18:20,269 [21596] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2022-06-14 21:18:20,270 [21596] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2022-06-14 21:18:20,276 [21596] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=C:\Users\sasha\.matplotlib
2022-06-14 21:18:20,279 [21596] DEBUG    matplotlib:1471: [JupyterRequire] matplotlib version 3.3.2
2022-06-14 21:18:20,279 [21596] DEBUG    matplotlib:1472: [JupyterRequire] interactive is False
2022-06-14 21:18:20,279 [21596] DEBUG    matplotlib:1473: [JupyterRequire] platform is win32
2022-06-14 21:18:20,280 [21596] DEBUG    matplotlib:1474: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1251', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'pprint', 'locale', 'gettext', 'argparse', 'ipython_genutils._version', 'ipython_genutils', 'math', '_bisect', 'bisect', '_sha512', '_random', 'random', 'ipython_genutils.encoding', 'platform', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'traitlets.config.loader', 'textwrap', 'ipython_genutils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_ctypes', '_struct', 'struct', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'typing.io', 'typing.re', 'typing', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', '_compat_pickle', '_pickle', 'pickle', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'select', 'selectors', 'socket', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', '_queue', 'queue', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_21', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'ipython_genutils.importstring', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'logging.handlers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'configparser', 'isort.stdlibs.py27', 'isort.stdlibs.py2', 'isort.stdlibs.py35', 'isort.stdlibs.py36', 'isort.stdlibs.py37', 'isort.stdlibs.py38', 'isort.stdlibs.py39', 'isort.stdlibs.py3', 'isort.stdlibs.all', 'isort.stdlibs', 'dataclasses', 'isort._future', 'isort._vendored', 'isort._vendored.toml.tz', 'isort._vendored.toml.decoder', 'isort._vendored.toml.encoder', 'isort._vendored.toml', 'isort.profiles', 'isort.exceptions', 'isort.sections', 'isort.comments', 'isort.wrap_modes', 'isort.settings', 'isort._version', 'isort.literal', 'isort.format', 'isort.utils', 'isort.place', 'isort.deprecated', 'isort.deprecated.finders', 'isort.parse', 'isort.sorting', 'isort.wrap', 'isort.output', 'isort.core', 'isort.io', 'isort.api', 'isort', 'toml.tz', 'toml.decoder', 'toml.encoder', 'toml', 'optparse', 'pycodestyle', 'autopep8', 'socketserver', 'logging.config', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'numpy._globals', 'numpy.__config__', 'numpy._distributor_init', 'numpy._version', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core._machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_24', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'gzip', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.linalg.lapack_lite', 'numpy.testing._private.utils', 'numpy.testing._private.extbuild', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._continuous_distns', 'scipy.stats._discrete_distns', 'scipy.stats.distributions', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._multivariate', 'scipy.stats', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2022-06-14 21:18:20,337 [21596] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=C:\Users\sasha\.matplotlib
2022-06-14 21:18:20,341 [21596] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from C:\Users\sasha\.matplotlib\fontlist-v330.json
2022-06-14 21:18:21,038 [21596] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-06-14 21:18:21,041 [21596] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-06-14 21:20:37,061 [21596] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2022-06-14 21:24:26,562 [8304] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-06-14 21:24:26,563 [8304] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-06-14 21:24:26,563 [8304] INFO     root:247: [JupyterRequire] Initializing comms.
2022-06-14 21:24:26,567 [8304] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-06-14 21:24:26,567 [8304] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-06-14 21:24:26,568 [8304] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-06-14 21:24:29,554 [8304] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-06-14 21:24:29,555 [8304] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-06-14 21:24:29,555 [8304] INFO     root:247: [JupyterRequire] Initializing comms.
2022-06-14 21:24:29,559 [8304] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-06-14 21:24:29,560 [8304] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-06-14 21:24:29,560 [8304] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-06-14 21:24:29,704 [21596] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2022-06-14 21:24:29,705 [21596] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 10; new: 13
2022-06-14 21:24:29,705 [21596] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:9] new[1:9]
2022-06-14 21:24:29,706 [21596] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:6] new[1:6]
2022-06-14 21:24:29,709 [21596] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 7 to 10 (to 11 in part parser)
2022-06-14 21:24:29,709 [21596] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[10:10] new[10:13]
2022-06-14 21:24:29,711 [21596] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 11 to 13 (to 12 in part parser)
2022-06-14 21:24:29,712 [21596] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2022-06-14 21:24:29,783 [21596] DEBUG    parso.cache:143: [JupyterRequire] pickle loaded: C:\Users\sasha\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2022-06-14 21:24:44,251 [21596] DEBUG    parso.python.diff:282: [JupyterRequire] diff parser start
2022-06-14 21:24:44,252 [21596] DEBUG    parso.python.diff:293: [JupyterRequire] line_lengths old: 13; new: 13
2022-06-14 21:24:44,252 [21596] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[equal] old[1:11] new[1:11]
2022-06-14 21:24:44,253 [21596] DEBUG    parso.python.diff:378: [JupyterRequire] copy old[1:10] new[1:10]
2022-06-14 21:24:44,254 [21596] DEBUG    parso.python.diff:421: [JupyterRequire] parse_part from 11 to 13 (to 12 in part parser)
2022-06-14 21:24:44,254 [21596] DEBUG    parso.python.diff:296: [JupyterRequire] -> code[replace] old[12:13] new[12:13]
2022-06-14 21:24:44,255 [21596] DEBUG    parso.python.diff:339: [JupyterRequire] diff parser end
2022-06-15 00:13:05,958 [8304] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-06-15 00:13:05,962 [8304] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-06-15 00:13:05,986 [8304] INFO     root:247: [JupyterRequire] Initializing comms.
2022-06-15 00:13:06,339 [8304] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-06-15 00:13:06,340 [8304] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-06-15 00:13:06,340 [8304] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-06-15 00:13:21,969 [21596] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-06-15 00:13:22,012 [21596] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-06-15 00:13:22,045 [21596] INFO     root:247: [JupyterRequire] Initializing comms.
2022-06-15 00:13:23,327 [21596] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-06-15 00:13:23,339 [21596] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-06-15 00:13:23,340 [21596] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-06-15 00:13:29,727 [8304] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-06-15 00:13:29,727 [8304] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-06-15 00:13:29,727 [8304] INFO     root:247: [JupyterRequire] Initializing comms.
2022-06-15 00:13:29,730 [8304] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-06-15 00:13:29,730 [8304] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-06-15 00:13:29,730 [8304] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-06-15 00:13:41,744 [8004] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-06-15 00:13:41,923 [8004] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-06-15 00:13:41,923 [8004] INFO     root:247: [JupyterRequire] Initializing comms.
2022-06-15 00:13:42,678 [8004] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-06-15 00:13:42,706 [8004] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-06-15 00:13:42,733 [8004] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-10-26 20:01:51,206 [17116] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-10-26 20:01:51,207 [17116] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-10-26 20:01:51,207 [17116] INFO     root:247: [JupyterRequire] Initializing comms.
2022-10-26 20:01:51,209 [17116] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-10-26 20:01:51,210 [17116] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-10-26 20:01:51,211 [17116] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-10-26 20:39:43,146 [17116] WARNING  py.warnings:109: [JupyterRequire] C:\Users\sasha\anaconda3\lib\site-packages\numpy\_distributor_init.py:30: UserWarning: loaded more than 1 DLL from .libs:
C:\Users\sasha\anaconda3\lib\site-packages\numpy\.libs\libopenblas.EL2C6PLE4ZYW3ECEVIV3OXXGRN2NRFM2.gfortran-win_amd64.dll
C:\Users\sasha\anaconda3\lib\site-packages\numpy\.libs\libopenblas.QVLO2T66WEPI7JZ63PS3HMOHFEY472BC.gfortran-win_amd64.dll
  warnings.warn("loaded more than 1 DLL from .libs:"

2022-10-26 20:39:43,982 [17116] INFO     numexpr.utils:141: [JupyterRequire] NumExpr defaulting to 8 threads.
2022-10-26 20:39:46,090 [17116] DEBUG    matplotlib:241: [JupyterRequire] (private) matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2022-10-26 20:39:46,091 [17116] DEBUG    matplotlib:241: [JupyterRequire] matplotlib data path: C:\Users\sasha\anaconda3\lib\site-packages\matplotlib\mpl-data
2022-10-26 20:39:46,096 [17116] DEBUG    matplotlib:241: [JupyterRequire] CONFIGDIR=C:\Users\sasha\.matplotlib
2022-10-26 20:39:46,098 [17116] DEBUG    matplotlib:1471: [JupyterRequire] matplotlib version 3.3.2
2022-10-26 20:39:46,099 [17116] DEBUG    matplotlib:1472: [JupyterRequire] interactive is False
2022-10-26 20:39:46,099 [17116] DEBUG    matplotlib:1473: [JupyterRequire] platform is win32
2022-10-26 20:39:46,099 [17116] DEBUG    matplotlib:1474: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_warnings', '_frozen_importlib_external', '_io', 'marshal', 'nt', '_thread', '_weakref', 'winreg', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', 'encodings.cp1251', '_signal', '__main__', 'encodings.latin_1', '_abc', 'abc', 'io', '_stat', 'stat', '_collections_abc', 'genericpath', 'ntpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', 'importlib.abc', '_operator', 'operator', 'keyword', '_heapq', 'heapq', 'itertools', 'reprlib', '_collections', 'collections', '_functools', 'functools', 'contextlib', 'importlib.util', 'google', 'google.logging', 'mpl_toolkits', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '__future__', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'msvcrt', '_winapi', 'subprocess', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'atexit', 'copy', 'posixpath', 'fnmatch', 'glob', 'token', 'tokenize', 'linecache', 'traceback', 'collections.abc', '_string', 'string', 'logging', 'zlib', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', '_opcode', 'opcode', 'dis', 'inspect', 'typing.io', 'typing.re', 'typing', '_ast', 'ast', 'traitlets.utils', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.traitlets', 'traitlets._version', 'traitlets.utils.decorators', 'traitlets', 'pprint', '_socket', 'math', 'select', 'selectors', 'socket', '_struct', 'struct', '_compat_pickle', '_pickle', 'pickle', '_queue', 'queue', 'logging.handlers', 'socketserver', 'logging.config', 'textwrap', 'traitlets.utils.text', 'locale', 'gettext', 'argparse', 'traitlets.config.loader', 'traitlets.config.configurable', 'traitlets.utils.nested_update', 'traitlets.config.application', 'traitlets.config', 'platform', 'sysconfig', 'urllib', 'urllib.parse', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', '_bisect', 'bisect', '_sha512', '_random', 'random', '_ctypes', 'ctypes._endian', 'ctypes', 'ctypes.wintypes', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_win32', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'tempfile', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', '_hashlib', '_blake2', '_sha3', 'hashlib', 'IPython.core.compilerop', 'IPython.core.error', 'pathlib', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'binascii', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'getpass', 'IPython.lib.security', 'IPython.lib', '_datetime', 'datetime', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'html.entities', 'html', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'concurrent', 'concurrent.futures._base', 'concurrent.futures', '_ssl', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', '_overlapped', 'asyncio.base_subprocess', 'asyncio.proactor_events', 'asyncio.selector_events', 'asyncio.windows_utils', 'asyncio.windows_events', 'asyncio', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.patch_stdout', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'array', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso._compatibility', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.file_io', 'jedi._compatibility', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.common', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.api.completion', 'filecmp', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.lib.clipboard', 'IPython.terminal.shortcuts', 'IPython.terminal.debugger', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'email', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'calendar', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', 'nturl2path', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipython_genutils._version', 'ipython_genutils', 'ipython_genutils.encoding', 'ipython_genutils.py3compat', 'ipython_genutils.path', 'jupyter_client._version', 'zmq.backend.select', 'cython_runtime', 'zmq.backend.cython.constants', '_cython_0_29_21', 'zmq.backend.cython.error', 'zmq.error', 'zmq.backend.cython.message', 'zmq.backend.cython.context', 'zmq.backend.cython.socket', 'zmq.backend.cython.utils', 'zmq.backend.cython._poll', 'zmq.backend.cython._version', 'zmq.backend.cython._device', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython', 'zmq.backend', 'zmq.utils', 'zmq.utils.constant_names', 'zmq.sugar.constants', 'zmq.sugar.attrsettr', 'zmq.sugar.poll', 'zmq.utils.strtypes', 'zmq.utils.jsonapi', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'jupyter_client.localinterfaces', 'jupyter_core.version', 'jupyter_core', 'distutils', 'distutils.errors', 'distutils.dep_util', 'distutils.debug', 'distutils.log', 'distutils.spawn', 'distutils.util', 'jupyter_core.paths', 'jupyter_client.connect', 'traitlets.log', 'jupyter_client.launcher', 'jupyter_client.channelsabc', 'jupyter_client.channels', 'jupyter_client.clientabc', 'jupyter_client.client', 'ipython_genutils.importstring', 'jupyter_client.kernelspec', 'jupyter_client.managerabc', 'jupyter_client.manager', 'jupyter_client.blocking.channels', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'zmq._future', 'zmq.asyncio', 'jupyter_client.asynchronous.channels', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'uuid', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'tornado', 'numbers', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'imp', 'hmac', 'dateutil._version', 'dateutil', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.win', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.adapter', 'jupyter_client.session', 'ipykernel.iostream', 'ipykernel.heartbeat', 'IPython.utils.tokenutil', 'tornado.locks', 'tornado.queues', 'ipykernel.jsonutil', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'distutils.version', 'ipykernel.eventloops', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'win32api', 'win32security', 'ntsecuritycon', 'faulthandler', 'ipykernel.codeutil', 'ipykernel.pickleutil', 'ipykernel.serialize', 'ipykernel.datapub', 'IPython.core.completerlib', 'storemagic', 'configparser', 'isort.stdlibs.py27', 'isort.stdlibs.py2', 'isort.stdlibs.py35', 'isort.stdlibs.py36', 'isort.stdlibs.py37', 'isort.stdlibs.py38', 'isort.stdlibs.py39', 'isort.stdlibs.py3', 'isort.stdlibs.all', 'isort.stdlibs', 'dataclasses', 'isort._future', 'isort._vendored', 'isort._vendored.toml.tz', 'isort._vendored.toml.decoder', 'isort._vendored.toml.encoder', 'isort._vendored.toml', 'isort.profiles', 'isort.exceptions', 'isort.sections', 'isort.comments', 'isort.wrap_modes', 'isort.settings', 'isort._version', 'isort.literal', 'isort.format', 'isort.utils', 'isort.place', 'isort.deprecated', 'isort.deprecated.finders', 'isort.parse', 'isort.sorting', 'isort.wrap', 'isort.output', 'isort.core', 'isort.io', 'isort.api', 'isort', 'toml.tz', 'toml.decoder', 'toml.encoder', 'toml', 'optparse', 'pycodestyle', 'autopep8', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_require', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'numpy._globals', 'numpy.__config__', 'numpy._distributor_init', 'numpy._version', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core._ufunc_config', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core._machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_24', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'mmap', 'pandas._typing', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.nattype', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._libs.tslibs.tzconversion', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.tslib', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.util.version', 'pandas.compat.numpy', 'pyarrow._generated_version', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.serialization', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.util._exceptions', 'pandas.util._validators', 'pandas.core.dtypes.cast', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.compat.numpy.function', 'pandas.compat._optional', 'pandas.core.missing', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.__config__', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.utils', 'numexpr.necompiler', 'numexpr.version', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.sorting', 'pandas.core.arrays.base', 'bottleneck.reduce', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.move', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck._pytesttester', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arraylike', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', '_csv', 'csv', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.accessor', 'pandas.core.strings.base', 'pandas.core.strings', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.tseries', 'pandas.tseries.frequencies', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.core.arrays.numeric', 'pandas.core.tools', 'pandas.core.tools.numeric', 'pandas.core.arrays.integer', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.join', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.dtypes.concat', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.indexes.base', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas.core.arrays.string_', 'pyarrow._compute', 'pyarrow.compute', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.numeric', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.range', 'pandas.core.indexes.api', 'pandas.core.aggregation', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexing', 'pandas.core.reshape', 'pandas._libs.internals', 'pandas._libs.writers', 'pandas.core.array_algos.quantile', 'pandas.core.array_algos.replace', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.reshape.concat', 'gzip', 'zipfile', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.describe', 'pandas.core.internals.construction', 'pandas.core.shared_docs', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas._libs.window.indexers', 'pandas.core.window.indexers', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.reshape.util', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.io.formats.info', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.compat.chainmap', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.engines', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.reshape', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.api', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io.date_converters', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.formats._color_data', 'pandas.io.formats.css', 'pandas.io.formats.excel', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel._xlwt', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas._version', 'pandas', 'scipy._lib._testutils', 'scipy._lib', 'scipy._lib.deprecation', 'scipy.__config__', 'scipy.version', 'scipy._distributor_init', 'scipy._lib._pep440', 'scipy._lib._ccallback_c', 'scipy._lib._ccallback', 'scipy._lib._uarray._uarray', 'scipy._lib._uarray._backend', 'scipy._lib._uarray', 'scipy._lib.uarray', 'scipy.fft._basic', 'scipy.fft._realtransforms', 'scipy.fft._pocketfft.pypocketfft', 'scipy.fft._pocketfft.helper', 'scipy.fft._pocketfft.basic', 'scipy.fft._pocketfft.realtransforms', 'scipy.fft._pocketfft', 'scipy.fft._helper', 'scipy.fft._backend', 'scipy.fft', 'scipy', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'scipy._lib._util', 'scipy.sparse.sputils', 'scipy.sparse.base', 'scipy.sparse._sparsetools', 'scipy.sparse.data', 'scipy.sparse.dia', 'scipy.sparse._index', 'scipy.sparse.compressed', 'scipy.sparse.csr', 'scipy.sparse.csc', 'scipy.sparse._csparsetools', 'scipy.sparse.lil', 'scipy.sparse.dok', 'scipy.sparse.coo', 'scipy.sparse.bsr', 'scipy.sparse.construct', 'scipy.sparse.extract', 'scipy.sparse._matrix_io', 'scipy.sparse.csgraph._laplacian', 'scipy.sparse.csgraph._tools', 'scipy.sparse.csgraph._validation', 'scipy.sparse.csgraph._shortest_path', 'scipy.sparse.csgraph._traversal', 'scipy.sparse.csgraph._min_spanning_tree', 'scipy.sparse.csgraph._flow', 'scipy.sparse.csgraph._matching', 'scipy.sparse.csgraph._reordering', 'scipy.sparse.csgraph', 'scipy.sparse', 'scipy.spatial.kdtree', 'scipy.spatial.ckdtree', 'scipy._lib.messagestream', 'scipy.spatial.qhull', 'scipy.spatial._voronoi', 'scipy.spatial._spherical_voronoi', 'scipy._lib.decorator', 'scipy.spatial._plotutils', 'scipy.linalg._fblas', 'scipy.linalg.blas', 'scipy.linalg._flapack', 'scipy.linalg.lapack', 'scipy.linalg.misc', 'scipy.linalg._flinalg', 'scipy.linalg.flinalg', 'scipy.linalg.decomp', 'scipy.linalg.decomp_svd', 'scipy.linalg._solve_toeplitz', 'scipy.linalg.basic', 'scipy.linalg.decomp_lu', 'scipy.linalg._decomp_ldl', 'scipy.linalg.decomp_cholesky', 'scipy.linalg.decomp_qr', 'scipy.linalg._decomp_qz', 'scipy.linalg.decomp_schur', 'scipy.linalg._decomp_polar', 'scipy.linalg.special_matrices', 'scipy.linalg._expm_frechet', 'scipy.linalg._matfuncs_sqrtm', 'scipy.linalg.matfuncs', 'scipy.linalg._solvers', 'scipy.linalg._procrustes', 'scipy.linalg.cython_blas', 'scipy.linalg.cython_lapack', 'scipy.linalg._decomp_update', 'scipy.linalg._sketches', 'scipy.linalg._decomp_cossin', 'scipy.linalg', 'scipy.spatial._procrustes', 'scipy.spatial._distance_wrap', 'scipy.spatial._hausdorff', 'scipy.special.sf_error', 'scipy.special._ufuncs_cxx', 'scipy.special._ufuncs', 'scipy.special.specfun', 'scipy.special.orthogonal', 'scipy.special._comb', 'scipy.special._basic', 'scipy.special._logsumexp', 'scipy.special.spfun_stats', 'scipy.special._ellip_harm_2', 'scipy.special._ellip_harm', 'scipy.special._lambertw', 'scipy.special._spherical_bessel', 'scipy.special', 'scipy.spatial.distance', 'scipy.spatial._geometric_slerp', 'scipy.constants.codata', 'scipy.constants.constants', 'scipy.constants', 'scipy.spatial.transform._rotation_groups', 'scipy.spatial.transform.rotation', 'scipy.spatial.transform._rotation_spline', 'scipy.spatial.transform', 'scipy.spatial', 'scipy.ndimage._ni_support', 'scipy.ndimage._nd_image', 'scipy._lib.doccer', 'scipy.ndimage._ni_docstrings', 'scipy.ndimage.filters', 'scipy.ndimage.fourier', 'scipy.ndimage.interpolation', '_ni_label', 'scipy.ndimage._ni_label', 'scipy.ndimage.morphology', 'scipy.ndimage.measurements', 'scipy.ndimage', 'scipy.stats._distr_params', 'scipy.optimize.minpack2', 'scipy.optimize.linesearch', 'scipy.sparse.linalg.isolve._iterative', 'scipy.sparse.linalg.interface', 'scipy.sparse.linalg.isolve.utils', 'scipy._lib._threadsafety', 'scipy.sparse.linalg.isolve.iterative', 'scipy.sparse.linalg.isolve.minres', 'scipy.sparse.linalg.isolve._gcrotmk', 'scipy.sparse.linalg.isolve.lgmres', 'scipy.sparse.linalg.isolve.lsqr', 'scipy.sparse.linalg.isolve.lsmr', 'scipy.sparse.linalg.isolve', 'scipy.sparse.linalg.dsolve._superlu', 'scipy.sparse.linalg.dsolve.linsolve', 'scipy.sparse.linalg.dsolve._add_newdocs', 'scipy.sparse.linalg.dsolve', 'scipy.sparse.linalg.eigen.arpack._arpack', 'scipy.sparse.linalg.eigen.lobpcg.lobpcg', 'scipy.sparse.linalg.eigen.lobpcg', 'scipy.sparse.linalg.eigen.arpack.arpack', 'scipy.sparse.linalg.eigen.arpack', 'scipy.sparse.linalg.eigen', 'scipy.sparse.linalg._expm_multiply', 'scipy.sparse.linalg.matfuncs', 'scipy.sparse.linalg._onenormest', 'scipy.sparse.linalg._norm', 'scipy.sparse.linalg', 'scipy.optimize._group_columns', 'scipy.optimize._numdiff', 'scipy.optimize._hessian_update_strategy', 'scipy.optimize._differentiable_functions', 'scipy.optimize.optimize', 'scipy.optimize._trustregion', 'scipy.optimize._trustregion_dogleg', 'scipy.optimize._trustregion_ncg', 'scipy.optimize._trlib._trlib', 'scipy.optimize._trlib', 'scipy.optimize._trustregion_krylov', 'scipy.optimize._trustregion_exact', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.async_case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'numpy.testing._private', 'numpy.linalg.lapack_lite', 'numpy.testing._private.utils', 'numpy.testing._private.extbuild', 'numpy.testing._private.decorators', 'numpy.testing._private.nosetester', 'numpy.testing', 'scipy.optimize._constraints', 'scipy.optimize._trustregion_constr.projections', 'scipy.optimize._trustregion_constr.qp_subproblem', 'scipy.optimize._trustregion_constr.equality_constrained_sqp', 'scipy.optimize._trustregion_constr.canonical_constraint', 'scipy.optimize._trustregion_constr.tr_interior_point', 'scipy.optimize._trustregion_constr.report', 'scipy.optimize._trustregion_constr.minimize_trustregion_constr', 'scipy.optimize._trustregion_constr', 'scipy.optimize._lbfgsb', 'scipy.optimize.lbfgsb', 'scipy.optimize.moduleTNC', 'scipy.optimize.tnc', 'scipy.optimize._cobyla', 'scipy.optimize.cobyla', 'scipy.optimize._slsqp', 'scipy.optimize.slsqp', 'scipy.optimize._minimize', 'scipy.optimize._minpack', 'scipy.optimize._lsq.common', 'scipy.optimize._lsq.trf', 'scipy.optimize._lsq.dogbox', 'scipy.optimize._lsq.least_squares', 'scipy.optimize._lsq.givens_elimination', 'scipy.optimize._lsq.trf_linear', 'scipy.optimize._lsq.bvls', 'scipy.optimize._lsq.lsq_linear', 'scipy.optimize._lsq', 'scipy.optimize.minpack', 'scipy.optimize._spectral', 'scipy.optimize.nonlin', 'scipy.optimize._root', 'scipy.optimize._zeros', 'scipy.optimize.zeros', 'scipy.optimize._root_scalar', 'scipy.optimize.__nnls', 'scipy.optimize._nnls', 'scipy.optimize._basinhopping', 'scipy.optimize._remove_redundancy', 'scipy.optimize._linprog_util', 'scipy.optimize._linprog_ip', 'scipy.optimize._linprog_simplex', 'scipy.optimize._bglu_dense', 'scipy.optimize._linprog_rs', 'scipy.optimize._linprog', 'scipy.optimize._lsap_module', 'scipy.optimize._lsap', 'scipy.optimize._differentialevolution', 'scipy.optimize._shgo_lib', 'scipy.optimize._shgo_lib.sobol_seq', 'scipy.optimize._shgo_lib.triangulation', 'scipy.optimize._shgo', 'scipy.optimize._dual_annealing', 'scipy.optimize', 'scipy.integrate._quadrature', 'scipy.integrate._odepack', 'scipy.integrate.odepack', 'scipy.integrate._quadpack', 'scipy.integrate.quadpack', 'scipy.integrate.vode', 'scipy.integrate._dop', 'scipy.integrate.lsoda', 'scipy.integrate._ode', 'scipy.integrate._bvp', 'scipy.integrate._ivp.common', 'scipy.integrate._ivp.base', 'scipy.integrate._ivp.bdf', 'scipy.integrate._ivp.radau', 'scipy.integrate._ivp.dop853_coefficients', 'scipy.integrate._ivp.rk', 'scipy.integrate._ivp.lsoda', 'scipy.integrate._ivp.ivp', 'scipy.integrate._ivp', 'scipy.integrate._quad_vec', 'scipy.integrate', 'scipy.misc.doccer', 'scipy.misc.common', 'scipy.misc', 'scipy.stats._constants', 'scipy.stats._distn_infrastructure', 'scipy.interpolate._fitpack', 'scipy.interpolate.dfitpack', 'scipy.interpolate._fitpack_impl', 'scipy.interpolate._bspl', 'scipy.interpolate._bsplines', 'scipy.interpolate.fitpack', 'scipy.interpolate.polyint', 'scipy.interpolate._ppoly', 'scipy.interpolate.fitpack2', 'scipy.interpolate.interpnd', 'scipy.interpolate.interpolate', 'scipy.interpolate.rbf', 'scipy.interpolate._cubic', 'scipy.interpolate.ndgriddata', 'scipy.interpolate._pade', 'scipy.interpolate', 'scipy.special.cython_special', 'scipy.stats._stats', 'scipy.stats._rvs_sampling', 'scipy.stats._tukeylambda_stats', 'scipy.stats._ksstats', 'scipy.stats._continuous_distns', 'scipy.stats._discrete_distns', 'scipy.stats.distributions', 'scipy.stats._stats_mstats_common', 'scipy.stats.mstats_basic', 'scipy.stats._wilcoxon_data', 'scipy.stats._hypotests', 'scipy.stats.stats', 'scipy.stats.statlib', 'scipy.stats.contingency', 'scipy.stats.morestats', 'scipy.stats._binned_statistic', 'scipy.stats.mvn', 'scipy.stats.kde', 'scipy.stats.mstats_extras', 'scipy.stats.mstats', 'scipy.stats._multivariate', 'scipy.stats', 'matplotlib', 'matplotlib.cbook.deprecation', 'matplotlib.cbook', 'matplotlib._animation_data', 'matplotlib.animation', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib.docstring', 'matplotlib._color_data', 'matplotlib.colors', 'cycler', 'matplotlib.rcsetup', 'matplotlib._version', 'matplotlib.ft2font', 'kiwisolver']
2022-10-26 20:39:46,167 [17116] DEBUG    matplotlib:241: [JupyterRequire] CACHEDIR=C:\Users\sasha\.matplotlib
2022-10-26 20:39:46,291 [17116] DEBUG    matplotlib.font_manager:1436: [JupyterRequire] Using fontManager instance from C:\Users\sasha\.matplotlib\fontlist-v330.json
2022-10-26 20:39:46,644 [17116] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-10-26 20:39:46,648 [17116] DEBUG    matplotlib.pyplot:289: [JupyterRequire] Loaded backend module://ipykernel.pylab.backend_inline version unknown.
2022-10-26 20:40:38,682 [17116] DEBUG    matplotlib.font_manager:1334: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2022-10-26 20:40:38,683 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,683 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,684 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,684 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,684 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,685 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,685 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,685 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,686 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,686 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,686 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,686 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,687 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,687 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-10-26 20:40:38,687 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,688 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,688 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,688 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,688 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,689 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,689 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,689 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,689 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-10-26 20:40:38,689 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,689 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,690 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,690 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,690 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,690 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,690 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-10-26 20:40:38,690 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-10-26 20:40:38,691 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,691 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,691 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,691 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,691 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-10-26 20:40:38,691 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,692 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-10-26 20:40:38,692 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,692 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,692 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-10-26 20:40:38,692 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,692 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,693 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,693 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,693 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-10-26 20:40:38,693 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-10-26 20:40:38,693 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,693 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-10-26 20:40:38,694 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,694 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,694 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,694 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,695 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,695 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-10-26 20:40:38,695 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,695 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-10-26 20:40:38,695 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,695 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,696 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,696 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,696 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,696 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,697 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,697 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-10-26 20:40:38,697 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,697 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-10-26 20:40:38,698 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,698 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,698 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,699 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,699 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-10-26 20:40:38,699 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,699 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,700 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,700 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,700 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,701 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,701 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,701 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,702 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,702 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,702 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,702 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,703 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,703 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,703 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,703 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,704 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,704 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,704 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,704 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,704 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,705 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-10-26 20:40:38,705 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,705 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,706 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,706 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,706 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,706 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,706 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasI.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,706 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,707 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,707 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
2022-10-26 20:40:38,707 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,708 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-10-26 20:40:38,708 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,708 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,708 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,709 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,709 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-10-26 20:40:38,709 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,709 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-10-26 20:40:38,710 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,710 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-10-26 20:40:38,710 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,710 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-10-26 20:40:38,710 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,711 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,711 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,711 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,711 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-10-26 20:40:38,711 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,711 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,712 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-10-26 20:40:38,712 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,712 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,712 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,712 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-10-26 20:40:38,713 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,713 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,713 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525
2022-10-26 20:40:38,714 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545
2022-10-26 20:40:38,714 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,714 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-10-26 20:40:38,714 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,715 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,715 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,715 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,715 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-10-26 20:40:38,716 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,716 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-10-26 20:40:38,716 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,716 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-10-26 20:40:38,717 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,717 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,717 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,717 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,718 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-10-26 20:40:38,718 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,718 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,718 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,719 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-10-26 20:40:38,719 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-10-26 20:40:38,719 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,719 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,720 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,720 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,720 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,720 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,721 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,721 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-10-26 20:40:38,721 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,721 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,721 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,722 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,722 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,722 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
2022-10-26 20:40:38,722 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,722 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,722 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-10-26 20:40:38,723 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,723 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 0.5349999999999999
2022-10-26 20:40:38,723 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-10-26 20:40:38,723 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-10-26 20:40:38,723 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,724 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,724 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,724 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,724 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,724 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,725 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-10-26 20:40:38,725 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-10-26 20:40:38,725 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,725 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,726 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,726 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,726 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975
2022-10-26 20:40:38,727 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
2022-10-26 20:40:38,727 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-10-26 20:40:38,727 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,727 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,728 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,728 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,728 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,728 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,729 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,729 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,729 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-10-26 20:40:38,730 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,730 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545
2022-10-26 20:40:38,730 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,730 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,731 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,731 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,731 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,731 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-10-26 20:40:38,732 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,732 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,732 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,732 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-10-26 20:40:38,733 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,733 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,733 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145
2022-10-26 20:40:38,734 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145
2022-10-26 20:40:38,734 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,734 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,734 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,735 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,735 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,735 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,735 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975
2022-10-26 20:40:38,736 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,736 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 1.25
2022-10-26 20:40:38,736 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,736 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-10-26 20:40:38,736 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,736 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,737 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,737 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145
2022-10-26 20:40:38,737 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
2022-10-26 20:40:38,737 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,737 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,737 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,737 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-10-26 20:40:38,738 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,738 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,738 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,738 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'TeamViewer15' (teamviewer15.otf) normal normal 500 normal>) = 10.145
2022-10-26 20:40:38,738 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
2022-10-26 20:40:38,738 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-10-26 20:40:38,739 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975
2022-10-26 20:40:38,739 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,739 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,739 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,739 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,739 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,739 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-10-26 20:40:38,740 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,740 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,740 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,740 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,740 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,740 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,740 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,741 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,741 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasB.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,741 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975
2022-10-26 20:40:38,741 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 1.535
2022-10-26 20:40:38,741 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,741 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,742 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-10-26 20:40:38,742 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,742 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
2022-10-26 20:40:38,742 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,742 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,742 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-10-26 20:40:38,743 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,743 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,743 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,743 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,743 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-10-26 20:40:38,743 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,743 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,744 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
2022-10-26 20:40:38,744 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,744 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,744 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,744 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,744 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Regular.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,745 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,745 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,745 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,745 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,745 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145
2022-10-26 20:40:38,745 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,745 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,746 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,746 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,746 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,746 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,746 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,746 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,747 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,747 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,747 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525
2022-10-26 20:40:38,747 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
2022-10-26 20:40:38,747 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,748 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,748 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,748 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasB.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,748 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
2022-10-26 20:40:38,748 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,748 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,748 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,749 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,749 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,749 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
2022-10-26 20:40:38,749 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,749 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,749 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,750 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
2022-10-26 20:40:38,750 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,750 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145
2022-10-26 20:40:38,750 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24
2022-10-26 20:40:38,750 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,751 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,751 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-10-26 20:40:38,751 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,751 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,751 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,751 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,751 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-BoldItalic.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,752 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,752 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,752 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
2022-10-26 20:40:38,752 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasI.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,752 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,752 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,752 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,753 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145
2022-10-26 20:40:38,753 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145
2022-10-26 20:40:38,753 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasBI.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,753 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,753 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,753 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,754 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,754 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,754 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,754 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,754 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 0.24
2022-10-26 20:40:38,754 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,754 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,755 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasBI.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,755 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24
2022-10-26 20:40:38,755 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Italic.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,755 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,755 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
2022-10-26 20:40:38,755 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,756 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364
2022-10-26 20:40:38,756 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,756 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,756 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145
2022-10-26 20:40:38,756 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
2022-10-26 20:40:38,756 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,756 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,757 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,757 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,757 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,757 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,757 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,757 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,758 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-10-26 20:40:38,758 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,758 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,758 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,758 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,758 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
2022-10-26 20:40:38,758 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145
2022-10-26 20:40:38,759 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,759 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,759 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,759 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,759 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
2022-10-26 20:40:38,759 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,760 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,760 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,760 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,760 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,760 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145
2022-10-26 20:40:38,760 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
2022-10-26 20:40:38,760 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,761 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,761 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Basic' (GenBasR.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,761 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,761 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Gentium Book Basic' (GenBkBasR.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,761 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
2022-10-26 20:40:38,761 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,762 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,762 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arimo' (Arimo-Bold.ttf) normal normal 700 normal>) = 10.335
2022-10-26 20:40:38,762 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,762 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 0.25
2022-10-26 20:40:38,763 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
2022-10-26 20:40:38,763 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
2022-10-26 20:40:38,764 [17116] DEBUG    matplotlib.font_manager:1346: [JupyterRequire] findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
2022-10-26 20:40:38,764 [17116] DEBUG    matplotlib.font_manager:1366: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\sasha\\anaconda3\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
2022-10-26 20:46:09,936 [9728] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-10-26 20:46:09,936 [9728] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-10-26 20:46:09,937 [9728] INFO     root:247: [JupyterRequire] Initializing comms.
2022-10-26 20:46:09,939 [9728] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-10-26 20:46:09,939 [9728] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-10-26 20:46:09,940 [9728] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-10-26 20:46:10,689 [9728] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-10-26 20:46:10,689 [9728] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-10-26 20:46:10,690 [9728] INFO     root:247: [JupyterRequire] Initializing comms.
2022-10-26 20:46:10,695 [9728] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-10-26 20:46:10,696 [9728] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-10-26 20:46:10,696 [9728] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-10-26 20:46:58,633 [14912] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-10-26 20:46:58,634 [14912] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-10-26 20:46:58,634 [14912] INFO     root:247: [JupyterRequire] Initializing comms.
2022-10-26 20:46:58,636 [14912] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-10-26 20:46:58,636 [14912] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-10-26 20:46:58,637 [14912] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2022-10-26 20:46:59,168 [14912] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2022-10-26 20:46:59,168 [14912] DEBUG    root:93: [JupyterRequire] Initializing comms.
2022-10-26 20:46:59,169 [14912] INFO     root:247: [JupyterRequire] Initializing comms.
2022-10-26 20:46:59,170 [14912] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2022-10-26 20:46:59,171 [14912] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2022-10-26 20:46:59,171 [14912] DEBUG    root:97: [JupyterRequire] Registering comm targets.
